{
  "$schema": "https://raw.githubusercontent.com/schemastore/schemastore/master/src/schemas/json/sarif-2.1.0-rtm.5.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "QDNET",
          "fullName": "Qodana for .NET",
          "version": "231.5825.43.2",
          "rules": [],
          "taxa": [
            {
              "id": "Potential Code Quality Issues",
              "name": "Potential Code Quality Issues"
            },
            {
              "id": "Clang Diagnostics",
              "name": "Clang Diagnostics"
            },
            {
              "id": "Unreal Engine",
              "name": "Unreal Engine"
            },
            {
              "id": "Language Usage Opportunities",
              "name": "Language Usage Opportunities"
            },
            {
              "id": "Clang-Tidy Checks",
              "name": "Clang-Tidy Checks"
            },
            {
              "id": "Sass/SCSS",
              "name": "Sass/SCSS"
            },
            {
              "id": "HTML",
              "name": "HTML"
            },
            {
              "id": "JavaScript and TypeScript",
              "name": "JavaScript and TypeScript"
            },
            {
              "id": "JavaScript and TypeScript/Flow type checker",
              "name": "Flow type checker",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Common Practices and Code Improvements",
              "name": "Common Practices and Code Improvements"
            },
            {
              "id": "JavaScript and TypeScript/Bitwise operation issues",
              "name": "Bitwise operation issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/General",
              "name": "General",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Unity",
              "name": "Unity"
            },
            {
              "id": "EditorConfig",
              "name": "EditorConfig"
            },
            {
              "id": "Syntax Style",
              "name": "Syntax Style"
            },
            {
              "id": "JavaScript and TypeScript/Validity issues",
              "name": "Validity issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Redundancies in Code",
              "name": "Redundancies in Code"
            },
            {
              "id": "Formatting",
              "name": "Formatting"
            },
            {
              "id": "SQL",
              "name": "SQL"
            },
            {
              "id": "NUnit",
              "name": "NUnit"
            },
            {
              "id": "Compiler Warnings",
              "name": "Compiler Warnings"
            },
            {
              "id": "CSS",
              "name": "CSS"
            },
            {
              "id": "CSS/Invalid elements",
              "name": "Invalid elements",
              "relationships": [
                {
                  "target": {
                    "id": "CSS",
                    "index": 21,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
              "name": "Potentially undesirable code constructs",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Clang Static Analyzer Checks",
              "name": "Clang Static Analyzer Checks"
            },
            {
              "id": "Redundancies in Symbol Declarations",
              "name": "Redundancies in Symbol Declarations"
            },
            {
              "id": "Properties files",
              "name": "Properties files"
            },
            {
              "id": "XSLT",
              "name": "XSLT"
            },
            {
              "id": "General",
              "name": "General"
            },
            {
              "id": "Code Notification",
              "name": "Code Notification"
            },
            {
              "id": "JavaScript and TypeScript/ES2015 migration aids",
              "name": "ES2015 migration aids",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/DOM issues",
              "name": "DOM issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/TypeScript",
              "name": "TypeScript",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "XML",
              "name": "XML"
            },
            {
              "id": "Unity Burst Compiler Warnings",
              "name": "Unity Burst Compiler Warnings"
            },
            {
              "id": "RegExp",
              "name": "RegExp"
            },
            {
              "id": "JavaScript and TypeScript/Potentially confusing code constructs",
              "name": "Potentially confusing code constructs",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Control flow issues",
              "name": "Control flow issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Code quality tools",
              "name": "Code quality tools",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Pug/Jade",
              "name": "Pug/Jade"
            },
            {
              "id": "JavaScript and TypeScript/Function metrics",
              "name": "Function metrics",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JSON and JSON5",
              "name": "JSON and JSON5"
            },
            {
              "id": "JavaScript and TypeScript/Code style issues",
              "name": "Code style issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Constraints Violations",
              "name": "Constraints Violations"
            },
            {
              "id": "HTML/Accessibility",
              "name": "Accessibility",
              "relationships": [
                {
                  "target": {
                    "id": "HTML",
                    "index": 6,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "XPath",
              "name": "XPath"
            },
            {
              "id": "JavaScript and TypeScript/Probable bugs",
              "name": "Probable bugs",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Vue",
              "name": "Vue"
            },
            {
              "id": "MongoJS",
              "name": "MongoJS"
            },
            {
              "id": "Spelling Issues",
              "name": "Spelling Issues"
            },
            {
              "id": "JavaScript and TypeScript/Try statement issues",
              "name": "Try statement issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "SQL server",
              "name": "SQL server"
            },
            {
              "id": "JavaScript and TypeScript/Async code and promises",
              "name": "Async code and promises",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Naming conventions",
              "name": "Naming conventions",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Assignment issues",
              "name": "Assignment issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Switch statement issues",
              "name": "Switch statement issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Shell script",
              "name": "Shell script"
            },
            {
              "id": "JavaScript and TypeScript/Data flow",
              "name": "Data flow",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnrealHeaderTool",
              "name": "UnrealHeaderTool"
            },
            {
              "id": "CSS/Code style issues",
              "name": "Code style issues",
              "relationships": [
                {
                  "target": {
                    "id": "CSS",
                    "index": 21,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Imports and dependencies",
              "name": "Imports and dependencies",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "YAML",
              "name": "YAML"
            },
            {
              "id": "T4",
              "name": "T4"
            },
            {
              "id": "JavaScript and TypeScript/Unused symbols",
              "name": "Unused symbols",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Less",
              "name": "Less"
            },
            {
              "id": "Oracle",
              "name": "Oracle"
            },
            {
              "id": "Internationalization",
              "name": "Internationalization"
            },
            {
              "id": "Unity Performance Inspections",
              "name": "Unity Performance Inspections"
            },
            {
              "id": "CSS/Code quality tools",
              "name": "Code quality tools",
              "relationships": [
                {
                  "target": {
                    "id": "CSS",
                    "index": 21,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RELAX NG",
              "name": "RELAX NG"
            },
            {
              "id": "JavaScript and TypeScript/Unit testing",
              "name": "Unit testing",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Unreal Build System",
              "name": "Unreal Build System"
            },
            {
              "id": "MySQL",
              "name": "MySQL"
            },
            {
              "id": ".NET Core",
              "name": ".NET Core"
            },
            {
              "id": "CSS/Probable bugs",
              "name": "Probable bugs",
              "relationships": [
                {
                  "target": {
                    "id": "CSS",
                    "index": 21,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Proofreading",
              "name": "Proofreading"
            },
            {
              "id": "Ini files",
              "name": "Ini files"
            },
            {
              "id": "Version control",
              "name": "Version control"
            },
            {
              "id": "PostgreSQL",
              "name": "PostgreSQL"
            },
            {
              "id": "File Watchers",
              "name": "File Watchers"
            },
            {
              "id": "JavaScript and TypeScript/React",
              "name": "React",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MSBuild",
              "name": "MSBuild"
            },
            {
              "id": "Handlebars/Mustache",
              "name": "Handlebars/Mustache"
            },
            {
              "id": "JavaScript and TypeScript/Node.js",
              "name": "Node.js",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xunit",
              "name": "Xunit"
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        },
        "extensions": [
          {
            "name": "rider.intellij.plugin.appender",
            "version": "231.5825.43",
            "rules": [
              {
                "id": "SwitchStatementHandlesSomeKnownEnumValuesWithDefault",
                "shortDescription": {
                  "text": "Some values of the enum are not processed inside 'switch' statement and are handled via default section"
                },
                "fullDescription": {
                  "text": "Some values of the enum are not processed inside 'switch' statement and fall into default section. This might indicate unintentional handling of all enum values added after the switch was introduced, consider handling missing enum values explicitly Learn more...",
                  "markdown": "Some values of the enum are not processed inside 'switch' statement and fall into default section. This might indicate unintentional handling of all enum values added after the switch was introduced, consider handling missing enum values explicitly [Learn more...](https://www.jetbrains.com/help/rider/SwitchStatementHandlesSomeKnownEnumValuesWithDefault.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp98Cpp11Cpp14CompatPedantic",
                "shortDescription": {
                  "text": "c++98-c++11-c++14-compat-pedantic clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wc++98-c++11-c++14-compat-pedantic clang diagnostic. Learn more...",
                  "markdown": "-Wc++98-c++11-c++14-compat-pedantic clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wc-98-c-11-c-14-compat-pedantic)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUEBlueprintImplementableEventNotImplemented",
                "shortDescription": {
                  "text": "BlueprintImplementableEvent function is not implemented in any blueprint"
                },
                "fullDescription": {
                  "text": "BlueprintImplementableEvent function is not implemented in any blueprint",
                  "markdown": "BlueprintImplementableEvent function is not implemented in any blueprint"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unreal Engine",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertToCompoundAssignment",
                "shortDescription": {
                  "text": "Use compound assignment"
                },
                "fullDescription": {
                  "text": "Replace assignment with compound assignment",
                  "markdown": "Replace assignment with compound assignment"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseConfigureAwaitFalseForAsyncDisposable",
                "shortDescription": {
                  "text": "Missing '.ConfigureAwait(false)' for async disposable in library code"
                },
                "fullDescription": {
                  "text": "It is recommended to use 'ConfigureAwait(false)' in your library code to prevent context capture in task continuations. This inspection is controlled by the 'ConfigureAwait analysis mode' project level property, which is set to 'Disabled' by default. Set 'ConfigureAwait analysis mode' project level property to 'Library' to analyze 'await using' statements for missing 'ConfigureAwait(false)' calls.",
                  "markdown": "It is recommended to use 'ConfigureAwait(false)' in your library code to prevent context capture in task continuations. This inspection is controlled by the 'ConfigureAwait analysis mode' project level property, which is set to 'Disabled' by default. Set 'ConfigureAwait analysis mode' project level property to 'Library' to analyze 'await using' statements for missing 'ConfigureAwait(false)' calls."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticEnumConversion",
                "shortDescription": {
                  "text": "enum-conversion clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wenum-conversion clang diagnostic. Learn more...",
                  "markdown": "-Wenum-conversion clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wenum-conversion)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesProTypeReinterpretCast",
                "shortDescription": {
                  "text": "cppcoreguidelines-pro-type-reinterpret-cast clang-tidy check"
                },
                "fullDescription": {
                  "text": "cppcoreguidelines-pro-type-reinterpret-cast clang-tidy check. Learn more...",
                  "markdown": "cppcoreguidelines-pro-type-reinterpret-cast clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/pro-type-reinterpret-cast.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCompareDistinctPointerTypes",
                "shortDescription": {
                  "text": "compare-distinct-pointer-types clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wcompare-distinct-pointer-types clang diagnostic. Learn more...",
                  "markdown": "-Wcompare-distinct-pointer-types clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wcompare-distinct-pointer-types)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppAssignedValueIsNeverUsed",
                "shortDescription": {
                  "text": "Assigned value is never used"
                },
                "fullDescription": {
                  "text": "Assigned value is never used",
                  "markdown": "Assigned value is never used"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppCVQualifierCanNotBeAppliedToReference",
                "shortDescription": {
                  "text": "Adding cv-qualifiers to references has no effect"
                },
                "fullDescription": {
                  "text": "Adding cv-qualifiers to references has no effect",
                  "markdown": "Adding cv-qualifiers to references has no effect"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPreOpenmp51Compat",
                "shortDescription": {
                  "text": "pre-openmp-51-compat clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wpre-openmp-51-compat clang diagnostic. Learn more...",
                  "markdown": "-Wpre-openmp-51-compat clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wpre-openmp-51-compat)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIncompatiblePointerTypes",
                "shortDescription": {
                  "text": "incompatible-pointer-types clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wincompatible-pointer-types clang diagnostic. Learn more...",
                  "markdown": "-Wincompatible-pointer-types clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wincompatible-pointer-types)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInitializerOverrides",
                "shortDescription": {
                  "text": "initializer-overrides clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Winitializer-overrides clang diagnostic. Learn more...",
                  "markdown": "-Winitializer-overrides clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#winitializer-overrides)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticStdlibcxxNotFound",
                "shortDescription": {
                  "text": "stdlibcxx-not-found clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wstdlibcxx-not-found clang diagnostic. Learn more...",
                  "markdown": "-Wstdlibcxx-not-found clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wstdlibcxx-not-found)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticTautologicalUnsignedEnumZeroCompare",
                "shortDescription": {
                  "text": "tautological-unsigned-enum-zero-compare clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wtautological-unsigned-enum-zero-compare clang diagnostic. Learn more...",
                  "markdown": "-Wtautological-unsigned-enum-zero-compare clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wtautological-unsigned-enum-zero-compare)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClassNeedsConstructorBecauseOfUninitializedMember",
                "shortDescription": {
                  "text": "Class should have a user-defined constructor because of an uninitialized data member"
                },
                "fullDescription": {
                  "text": "Class should have a user-defined constructor because of an uninitialized data member",
                  "markdown": "Class should have a user-defined constructor because of an uninitialized data member"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticTargetClonesMixedSpecifiers",
                "shortDescription": {
                  "text": "target-clones-mixed-specifiers clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wtarget-clones-mixed-specifiers clang diagnostic. Learn more...",
                  "markdown": "-Wtarget-clones-mixed-specifiers clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wtarget-clones-mixed-specifiers)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftExists",
                "shortDescription": {
                  "text": "microsoft-exists clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmicrosoft-exists clang diagnostic. Learn more...",
                  "markdown": "-Wmicrosoft-exists clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-exists)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAndroidCloexecAccept",
                "shortDescription": {
                  "text": "android-cloexec-accept clang-tidy check"
                },
                "fullDescription": {
                  "text": "android-cloexec-accept clang-tidy check. Learn more...",
                  "markdown": "android-cloexec-accept clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/android/cloexec-accept.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CoVariantArrayConversion",
                "shortDescription": {
                  "text": "Co-variant array conversion"
                },
                "fullDescription": {
                  "text": "Co-variant conversion of array could cause run-time exceptions Learn more...",
                  "markdown": "Co-variant conversion of array could cause run-time exceptions [Learn more...](https://www.jetbrains.com/help/rider/CoVariantArrayConversion.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MemberCanBeMadeStatic.Global",
                "shortDescription": {
                  "text": "Member can be made static (shared) (non-private accessibility)"
                },
                "fullDescription": {
                  "text": "A non-virtual instance member does not use 'this' object (neither implicitly nor explicitly) and can be made static (shared) Learn more...",
                  "markdown": "A non-virtual instance member does not use 'this' object (neither implicitly nor explicitly) and can be made static (shared) [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBeMadeStatic.Global.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUseElementsView",
                "shortDescription": {
                  "text": "std::views::keys/values can be used"
                },
                "fullDescription": {
                  "text": "For example, when iterating on key-value pairs, std::views::keys allows to ignore the values.",
                  "markdown": "For example, when iterating on key-value pairs, std::views::keys allows to ignore the values."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.Entities.SingletonMustBeRequested",
                "shortDescription": {
                  "text": "To use the result of a 'GetSingleton<{0}>' call in the function, 'OnCreate' must include a 'RequireForUpdate' call."
                },
                "fullDescription": {
                  "text": "To use the result of a 'GetSingleton<{0}>' call in the function, 'OnCreate' must include a 'RequireForUpdate' call.",
                  "markdown": "To use the result of a 'GetSingleton\\<{0}\\>' call in the function, 'OnCreate' must include a 'RequireForUpdate' call."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CollectionNeverUpdated.Global",
                "shortDescription": {
                  "text": "Collection is never updated (non-private accessibility)"
                },
                "fullDescription": {
                  "text": "New elements are never added to the collection Learn more...",
                  "markdown": "New elements are never added to the collection [Learn more...](https://www.jetbrains.com/help/rider/CollectionNeverUpdated.Global.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp98Cpp11CompatPedantic",
                "shortDescription": {
                  "text": "c++98-c++11-compat-pedantic clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wc++98-c++11-compat-pedantic clang diagnostic. Learn more...",
                  "markdown": "-Wc++98-c++11-compat-pedantic clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wc-98-c-11-compat-pedantic)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIgnoredPragmaIntrinsic",
                "shortDescription": {
                  "text": "ignored-pragma-intrinsic clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wignored-pragma-intrinsic clang diagnostic. Learn more...",
                  "markdown": "-Wignored-pragma-intrinsic clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wignored-pragma-intrinsic)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrangeModifiersOrder",
                "shortDescription": {
                  "text": "Adjust modifiers declaration order"
                },
                "fullDescription": {
                  "text": "The order of declaration modifiers does not match code style settings Learn more...",
                  "markdown": "The order of declaration modifiers does not match code style settings [Learn more...](https://www.jetbrains.com/help/rider/ArrangeModifiersOrder.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.UnknownLayer",
                "shortDescription": {
                  "text": "The layer is not defined in the 'Tags & Layers'"
                },
                "fullDescription": {
                  "text": "The layer is not defined in the 'Tags & Layers'. The call is likely to fail at runtime.",
                  "markdown": "The layer is not defined in the 'Tags \\& Layers'. The call is likely to fail at runtime."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantDelegateCreation",
                "shortDescription": {
                  "text": "Explicit delegate creation expression is redundant"
                },
                "fullDescription": {
                  "text": "Explicit delegate creation expression is redundant Learn more...",
                  "markdown": "Explicit delegate creation expression is redundant [Learn more...](https://www.jetbrains.com/help/rider/RedundantDelegateCreation.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadSemicolonSpaces",
                "shortDescription": {
                  "text": "Incorrect spacing (around semicolon)"
                },
                "fullDescription": {
                  "text": "Around semicolon Learn more...",
                  "markdown": "Around semicolon [Learn more...](https://www.jetbrains.com/help/rider/BadSemicolonSpaces.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticVarargs",
                "shortDescription": {
                  "text": "varargs clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wvarargs clang diagnostic. Learn more...",
                  "markdown": "-Wvarargs clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wvarargs)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.IncorrectScriptableObjectInstantiation",
                "shortDescription": {
                  "text": "'ScriptableObject' instances must be instantiated with 'ScriptableObject.CreateInstance<T>()' instead of 'new'"
                },
                "fullDescription": {
                  "text": "Using 'new' to instantiate a class derived from 'ScriptableObject' means that Unity will not call any event functions. Create a new instance using 'GameObject.AddComponent()'. Learn more...",
                  "markdown": "Using 'new' to instantiate a class derived from 'ScriptableObject' means that Unity will not call any event functions. Create a new instance using 'GameObject.AddComponent()'. [Learn more...](https://github.com/JetBrains/resharper-unity/wiki/ScriptableObjects-must-be-instantiated-with-ScriptableObject.CreateInstance-instead-of-new)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppFunctionDoesntReturnValue",
                "shortDescription": {
                  "text": "No return statement in a function or a lambda returning non-void"
                },
                "fullDescription": {
                  "text": "No return statement in a function or a lambda with non-void return type",
                  "markdown": "No return statement in a function or a lambda with non-void return type"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPointerArith",
                "shortDescription": {
                  "text": "pointer-arith clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wpointer-arith clang diagnostic. Learn more...",
                  "markdown": "-Wpointer-arith clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wpointer-arith)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMaxUnsignedZero",
                "shortDescription": {
                  "text": "max-unsigned-zero clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmax-unsigned-zero clang diagnostic. Learn more...",
                  "markdown": "-Wmax-unsigned-zero clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmax-unsigned-zero)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeReplaceRandomShuffle",
                "shortDescription": {
                  "text": "modernize-replace-random-shuffle clang-tidy check"
                },
                "fullDescription": {
                  "text": "modernize-replace-random-shuffle clang-tidy check. Learn more...",
                  "markdown": "modernize-replace-random-shuffle clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/replace-random-shuffle.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSpirvCompat",
                "shortDescription": {
                  "text": "spirv-compat clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wspirv-compat clang diagnostic. Learn more...",
                  "markdown": "-Wspirv-compat clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wspirv-compat)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CompareNonConstrainedGenericWithNull",
                "shortDescription": {
                  "text": "Possible comparison of value type with 'null'"
                },
                "fullDescription": {
                  "text": "Generic type has no value or class constraint, the condition could be always 'false' Learn more...",
                  "markdown": "Generic type has no value or class constraint, the condition could be always 'false' [Learn more...](https://www.jetbrains.com/help/rider/CompareNonConstrainedGenericWithNull.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.ImplicitUnspecifiedNullValues",
                "shortDescription": {
                  "text": "NUnit. Implicitly unspecified null values."
                },
                "fullDescription": {
                  "text": "NUnit. No enough values are provided in the Values attribute so NUnit implicitly adds 'null' values to fill test data.",
                  "markdown": "NUnit. No enough values are provided in the Values attribute so NUnit implicitly adds 'null' values to fill test data."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppDoxygenUndocumentedParameter",
                "shortDescription": {
                  "text": "Missing function parameter description in a documentation comment"
                },
                "fullDescription": {
                  "text": "Missing function parameter description in a documentation comment",
                  "markdown": "Missing function parameter description in a documentation comment"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS4014",
                "shortDescription": {
                  "text": "Async method invocation without await expression"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://msdn.microsoft.com/en-us/library/hh873131.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBadSwitchBracesIndent",
                "shortDescription": {
                  "text": "Incorrect indent (around switch statement)"
                },
                "fullDescription": {
                  "text": "Around switch statement",
                  "markdown": "Around switch statement"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticImplicitConstIntFloatConversion",
                "shortDescription": {
                  "text": "implicit-const-int-float-conversion clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wimplicit-const-int-float-conversion clang diagnostic. Learn more...",
                  "markdown": "-Wimplicit-const-int-float-conversion clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-const-int-float-conversion)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyGoogleExplicitConstructor",
                "shortDescription": {
                  "text": "google-explicit-constructor clang-tidy check"
                },
                "fullDescription": {
                  "text": "google-explicit-constructor clang-tidy check. Learn more...",
                  "markdown": "google-explicit-constructor clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/explicit-constructor.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticShadowUncapturedLocal",
                "shortDescription": {
                  "text": "shadow-uncaptured-local clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wshadow-uncaptured-local clang diagnostic. Learn more...",
                  "markdown": "-Wshadow-uncaptured-local clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wshadow-uncaptured-local)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseIsOperator.1",
                "shortDescription": {
                  "text": "Use 'is' operator"
                },
                "fullDescription": {
                  "text": "typeof($T$).IsAssignableFrom($expr$.GetType())",
                  "markdown": "typeof($T$).IsAssignableFrom($expr$.GetType())"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCplusplusSmartPtrModeling",
                "shortDescription": {
                  "text": "cplusplus.SmartPtrModeling clang static analyzer check"
                },
                "fullDescription": {
                  "text": "cplusplus.SmartPtrModeling clang static analyzer check. Learn more...",
                  "markdown": "cplusplus.SmartPtrModeling clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseIsOperator.2",
                "shortDescription": {
                  "text": "Use 'is' operator"
                },
                "fullDescription": {
                  "text": "typeof($T$).IsInstanceOfType($expr$)",
                  "markdown": "typeof($T$).IsInstanceOfType($expr$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuComplexInteger",
                "shortDescription": {
                  "text": "gnu-complex-integer clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wgnu-complex-integer clang diagnostic. Learn more...",
                  "markdown": "-Wgnu-complex-integer clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-complex-integer)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithOfType.Single.1",
                "shortDescription": {
                  "text": "Replace with OfType<T>().Single()"
                },
                "fullDescription": {
                  "text": "$seq$.Select($x$ => $x$ as $T$).Single($y$ => $y$ != null)",
                  "markdown": "$seq$.Select($x$ =\\> $x$ as $T$).Single($y$ =\\> $y$ != null)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithOfType.Single.2",
                "shortDescription": {
                  "text": "Replace with OfType<T>().Single() (replace with OfType<T>().Single(..))"
                },
                "fullDescription": {
                  "text": "$seq$.Select($x$ => $x$ as $T$).Single($y$ => $y$ != null && $expr$)",
                  "markdown": "$seq$.Select($x$ =\\> $x$ as $T$).Single($y$ =\\> $y$ != null \\&\\& $expr$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAbseilTimeSubtraction",
                "shortDescription": {
                  "text": "abseil-time-subtraction clang-tidy check"
                },
                "fullDescription": {
                  "text": "abseil-time-subtraction clang-tidy check. Learn more...",
                  "markdown": "abseil-time-subtraction clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/time-subtraction.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeallocInCategory",
                "shortDescription": {
                  "text": "dealloc-in-category clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdealloc-in-category clang diagnostic. Learn more...",
                  "markdown": "-Wdealloc-in-category clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdealloc-in-category)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp20Compat",
                "shortDescription": {
                  "text": "c++20-compat clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wc++20-compat clang diagnostic. Learn more...",
                  "markdown": "-Wc++20-compat clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wc-20-compat)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeleteIncomplete",
                "shortDescription": {
                  "text": "delete-incomplete clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdelete-incomplete clang diagnostic. Learn more...",
                  "markdown": "-Wdelete-incomplete clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdelete-incomplete)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticThreadSafetyAnalysis",
                "shortDescription": {
                  "text": "thread-safety-analysis clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wthread-safety-analysis clang diagnostic. Learn more...",
                  "markdown": "-Wthread-safety-analysis clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wthread-safety-analysis)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyMiscNoRecursion",
                "shortDescription": {
                  "text": "misc-no-recursion clang-tidy check"
                },
                "fullDescription": {
                  "text": "misc-no-recursion clang-tidy check. Learn more...",
                  "markdown": "misc-no-recursion clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/no-recursion.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EventUnsubscriptionViaAnonymousDelegate",
                "shortDescription": {
                  "text": "Event unsubscription via anonymous delegate"
                },
                "fullDescription": {
                  "text": "Event unsubscription via anonymous delegate is meaningless",
                  "markdown": "Event unsubscription via anonymous delegate is meaningless"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantConstSpecifier",
                "shortDescription": {
                  "text": "Redundant 'const' specifier"
                },
                "fullDescription": {
                  "text": "The 'const' specifier on a variable definition is redundant",
                  "markdown": "The 'const' specifier on a variable definition is redundant"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseNullableAnnotationInsteadOfAttribute",
                "shortDescription": {
                  "text": "Use nullable annotation instead of an attribute"
                },
                "fullDescription": {
                  "text": "An attribute is used to declare the nullability of a type. Nullable reference types' annotations might be used instead.",
                  "markdown": "An attribute is used to declare the nullability of a type. Nullable reference types' annotations might be used instead."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp14CompatPedantic",
                "shortDescription": {
                  "text": "c++14-compat-pedantic clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wc++14-compat-pedantic clang diagnostic. Learn more...",
                  "markdown": "-Wc++14-compat-pedantic clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wc-14-compat-pedantic)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppMissingIncludeGuard",
                "shortDescription": {
                  "text": "Missing include guard"
                },
                "fullDescription": {
                  "text": "Include guard is not found at the beginning of a header file",
                  "markdown": "Include guard is not found at the beginning of a header file"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedTupleComponentInReturnValue",
                "shortDescription": {
                  "text": "Component of the tuple is never used"
                },
                "fullDescription": {
                  "text": "Component of the tuple is never used",
                  "markdown": "Component of the tuple is never used"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMacroRedefined",
                "shortDescription": {
                  "text": "macro-redefined clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmacro-redefined clang diagnostic. Learn more...",
                  "markdown": "-Wmacro-redefined clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmacro-redefined)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticRetainedLanguageLinkage",
                "shortDescription": {
                  "text": "retained-language-linkage clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wretained-language-linkage clang diagnostic. Learn more...",
                  "markdown": "-Wretained-language-linkage clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wretained-language-linkage)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticKeywordMacro",
                "shortDescription": {
                  "text": "keyword-macro clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wkeyword-macro clang diagnostic. Learn more...",
                  "markdown": "-Wkeyword-macro clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wkeyword-macro)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityUseAnyofallof",
                "shortDescription": {
                  "text": "readability-use-anyofallof clang-tidy check"
                },
                "fullDescription": {
                  "text": "readability-use-anyofallof clang-tidy check. Learn more...",
                  "markdown": "readability-use-anyofallof clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/use-anyofallof.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticReadonlyIboutletProperty",
                "shortDescription": {
                  "text": "readonly-iboutlet-property clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wreadonly-iboutlet-property clang diagnostic. Learn more...",
                  "markdown": "-Wreadonly-iboutlet-property clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wreadonly-iboutlet-property)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGccCompat",
                "shortDescription": {
                  "text": "gcc-compat clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wgcc-compat clang diagnostic. Learn more...",
                  "markdown": "-Wgcc-compat clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wgcc-compat)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppDeprecatedRegisterStorageClassSpecifier",
                "shortDescription": {
                  "text": "Deprecated 'register' storage class specifier"
                },
                "fullDescription": {
                  "text": "The 'register' storage class specifier is deprecated in C++11 and removed in C++17",
                  "markdown": "The 'register' storage class specifier is deprecated in C++11 and removed in C++17"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMemsizeComparison",
                "shortDescription": {
                  "text": "memsize-comparison clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmemsize-comparison clang diagnostic. Learn more...",
                  "markdown": "-Wmemsize-comparison clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmemsize-comparison)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseNegatedPatternInIsExpression",
                "shortDescription": {
                  "text": "Convert negated 'is' expression into 'is' expression with negated pattern"
                },
                "fullDescription": {
                  "text": "Replace unary negation operator '!' before 'is' expression with C# 9.0 negated pattern",
                  "markdown": "Replace unary negation operator '!' before 'is' expression with C# 9.0 negated pattern"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppAvoidCArrays",
                "shortDescription": {
                  "text": "hicpp-avoid-c-arrays clang-tidy check"
                },
                "fullDescription": {
                  "text": "hicpp-avoid-c-arrays clang-tidy check. Learn more...",
                  "markdown": "hicpp-avoid-c-arrays clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/avoid-c-arrays.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithSingleCallToLast",
                "shortDescription": {
                  "text": "Replace with single call to Last(..)"
                },
                "fullDescription": {
                  "text": "$seq$.Where(Function ($x$) $expr$).Last()",
                  "markdown": "$seq$.Where(Function ($x$) $expr$).Last()"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Blazor.EditorRequired",
                "shortDescription": {
                  "text": "Missed value for required attribute"
                },
                "fullDescription": {
                  "text": "Missed value for required attribute",
                  "markdown": "Missed value for required attribute"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticBackslashNewlineEscape",
                "shortDescription": {
                  "text": "backslash-newline-escape clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wbackslash-newline-escape clang diagnostic. Learn more...",
                  "markdown": "-Wbackslash-newline-escape clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wbackslash-newline-escape)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneSizeofExpression",
                "shortDescription": {
                  "text": "bugprone-sizeof-expression clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-sizeof-expression clang-tidy check. Learn more...",
                  "markdown": "bugprone-sizeof-expression clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/sizeof-expression.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.TestCaseSourceShouldImplementIEnumerable",
                "shortDescription": {
                  "text": "NUnit. Test case source must be non-abstract and implement IEnumerable."
                },
                "fullDescription": {
                  "text": "NUnit. Test case source must refer to non-abstract class implementing IEnumerable. Learn more...",
                  "markdown": "NUnit. Test case source must refer to non-abstract class implementing IEnumerable. [Learn more...](https://www.jetbrains.com/help/rider/NUnit.TestCaseSourceShouldImplementIEnumerable.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CollectionNeverUpdated.Local",
                "shortDescription": {
                  "text": "Collection is never updated (private accessibility)"
                },
                "fullDescription": {
                  "text": "New elements are never added to the collection Learn more...",
                  "markdown": "New elements are never added to the collection [Learn more...](https://www.jetbrains.com/help/rider/CollectionNeverUpdated.Local.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8417",
                "shortDescription": {
                  "text": "The given expression always matches the provided constant."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8416",
                "shortDescription": {
                  "text": "The given expression never matches the provided pattern."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticOpenmp51Extensions",
                "shortDescription": {
                  "text": "openmp-51-extensions clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wopenmp-51-extensions clang diagnostic. Learn more...",
                  "markdown": "-Wopenmp-51-extensions clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wopenmp-51-extensions)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBadColonSpaces",
                "shortDescription": {
                  "text": "Incorrect spacing (around colon)"
                },
                "fullDescription": {
                  "text": "Around colon",
                  "markdown": "Around colon"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MergeNestedPropertyPatterns",
                "shortDescription": {
                  "text": "Merge nested property patterns"
                },
                "fullDescription": {
                  "text": "Simplify nested member access in a pattern by using the C# 10 extended property patterns syntax Learn more...",
                  "markdown": "Simplify nested member access in a pattern by using the C# 10 extended property patterns syntax [Learn more...](https://www.jetbrains.com/help/rider/MergeNestedPropertyPatterns.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticStrictPrototypes",
                "shortDescription": {
                  "text": "strict-prototypes clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wstrict-prototypes clang diagnostic. Learn more...",
                  "markdown": "-Wstrict-prototypes clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wstrict-prototypes)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.XKeyAttributeDisallowed",
                "shortDescription": {
                  "text": "x:Key is allowed for resources and dictionary elements only"
                },
                "fullDescription": {
                  "text": "x:Key is allowed for resources and dictionary elements only",
                  "markdown": "x:Key is allowed for resources and dictionary elements only"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JoinNullCheckWithUsage",
                "shortDescription": {
                  "text": "Join null check with assignment"
                },
                "fullDescription": {
                  "text": "Replaces if statement with code using ?? operator and throw expression Learn more...",
                  "markdown": "Replaces if statement with code using ?? operator and throw expression [Learn more...](https://www.jetbrains.com/help/rider/JoinNullCheckWithUsage.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticReceiverExpr",
                "shortDescription": {
                  "text": "receiver-expr clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wreceiver-expr clang diagnostic. Learn more...",
                  "markdown": "-Wreceiver-expr clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wreceiver-expr)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1574,CS1584,CS1581,CS1580",
                "shortDescription": {
                  "text": "Cannot resolve reference in XML comment"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.LoadSceneUnexistingScene",
                "shortDescription": {
                  "text": "Scene does not exist"
                },
                "fullDescription": {
                  "text": "There is no scene with the same name in the project.",
                  "markdown": "There is no scene with the same name in the project."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8425",
                "shortDescription": {
                  "text": "Async-iterator has one or more parameters of type 'CancellationToken' but none of them is annotated with the 'EnumeratorCancellation' attribute."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8424",
                "shortDescription": {
                  "text": "The 'EnumeratorCancellation' attribute is only effective on a parameter of type 'CancellationToken' in an async-iterator method returning 'IAsyncEnumerable<>'."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppDeletingVoidPointer",
                "shortDescription": {
                  "text": "Deleting a void pointer"
                },
                "fullDescription": {
                  "text": "Deleting a void pointer is undefined behavior",
                  "markdown": "Deleting a void pointer is undefined behavior"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticStrictSelectorMatch",
                "shortDescription": {
                  "text": "strict-selector-match clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wstrict-selector-match clang diagnostic. Learn more...",
                  "markdown": "-Wstrict-selector-match clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wstrict-selector-match)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNullableToNonnullConversion",
                "shortDescription": {
                  "text": "nullable-to-nonnull-conversion clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wnullable-to-nonnull-conversion clang diagnostic. Learn more...",
                  "markdown": "-Wnullable-to-nonnull-conversion clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wnullable-to-nonnull-conversion)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RouteTemplates.ParameterConstraintCanBeSpecified",
                "shortDescription": {
                  "text": "Route parameter constraint can be added due to type of method argument"
                },
                "fullDescription": {
                  "text": "Route parameter constraint can be added due to type of method argument",
                  "markdown": "Route parameter constraint can be added due to type of method argument"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftCommentPaste",
                "shortDescription": {
                  "text": "microsoft-comment-paste clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmicrosoft-comment-paste clang diagnostic. Learn more...",
                  "markdown": "-Wmicrosoft-comment-paste clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-comment-paste)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppThrowExpressionCanBeReplacedWithRethrow",
                "shortDescription": {
                  "text": "Throw expression can be replaced with a rethrow expression"
                },
                "fullDescription": {
                  "text": "Throw expression can be replaced with a rethrow expression",
                  "markdown": "Throw expression can be replaced with a rethrow expression"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.XamlMismatchedDeviceFamilyViewClrNameHighlighting",
                "shortDescription": {
                  "text": "DeviceFamily-specific view type name does not match generic type name"
                },
                "fullDescription": {
                  "text": "DeviceFamily-specific view type name does not match generic type name",
                  "markdown": "DeviceFamily-specific view type name does not match generic type name"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp98Cpp11Cpp14Compat",
                "shortDescription": {
                  "text": "c++98-c++11-c++14-compat clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wc++98-c++11-c++14-compat clang diagnostic. Learn more...",
                  "markdown": "-Wc++98-c++11-c++14-compat clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wc-98-c-11-c-14-compat)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPreCpp14CompatPedantic",
                "shortDescription": {
                  "text": "pre-c++14-compat-pedantic clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wpre-c++14-compat-pedantic clang diagnostic. Learn more...",
                  "markdown": "-Wpre-c++14-compat-pedantic clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wpre-c-14-compat-pedantic)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedCopyWithUserProvidedCopy",
                "shortDescription": {
                  "text": "deprecated-copy-with-user-provided-copy clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdeprecated-copy-with-user-provided-copy clang diagnostic. Learn more...",
                  "markdown": "-Wdeprecated-copy-with-user-provided-copy clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-copy-with-user-provided-copy)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRangeBasedForIncompatibleReference",
                "shortDescription": {
                  "text": "Possibly unintended incompatible reference type in range declaration"
                },
                "fullDescription": {
                  "text": "Using an incompatible reference type in the range declaration is likely to cause unwanted object copying",
                  "markdown": "Using an incompatible reference type in the range declaration is likely to cause unwanted object copying"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAtomicAccess",
                "shortDescription": {
                  "text": "atomic-access clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Watomic-access clang diagnostic. Learn more...",
                  "markdown": "-Watomic-access clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#watomic-access)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticTautologicalTypeLimitCompare",
                "shortDescription": {
                  "text": "tautological-type-limit-compare clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wtautological-type-limit-compare clang diagnostic. Learn more...",
                  "markdown": "-Wtautological-type-limit-compare clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wtautological-type-limit-compare)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertCon36C",
                "shortDescription": {
                  "text": "cert-con36-c clang-tidy check"
                },
                "fullDescription": {
                  "text": "cert-con36-c clang-tidy check. Learn more...",
                  "markdown": "cert-con36-c clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/con36-c.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftUnionMemberReference",
                "shortDescription": {
                  "text": "microsoft-union-member-reference clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmicrosoft-union-member-reference clang diagnostic. Learn more...",
                  "markdown": "-Wmicrosoft-union-member-reference clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-union-member-reference)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertToLocalFunction",
                "shortDescription": {
                  "text": "Convert delegate variable into local function"
                },
                "fullDescription": {
                  "text": "Replace delegate variable with local function Learn more...",
                  "markdown": "Replace delegate variable with local function [Learn more...](https://www.jetbrains.com/help/rider/ConvertToLocalFunction.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNonModularIncludeInModule",
                "shortDescription": {
                  "text": "non-modular-include-in-module clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wnon-modular-include-in-module clang diagnostic. Learn more...",
                  "markdown": "-Wnon-modular-include-in-module clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wnon-modular-include-in-module)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIncompatibleMsStruct",
                "shortDescription": {
                  "text": "incompatible-ms-struct clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wincompatible-ms-struct clang diagnostic. Learn more...",
                  "markdown": "-Wincompatible-ms-struct clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wincompatible-ms-struct)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppNoArrayDecay",
                "shortDescription": {
                  "text": "hicpp-no-array-decay clang-tidy check"
                },
                "fullDescription": {
                  "text": "hicpp-no-array-decay clang-tidy check. Learn more...",
                  "markdown": "hicpp-no-array-decay clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/no-array-decay.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxNSOrCFErrorDerefChecker",
                "shortDescription": {
                  "text": "osx.NSOrCFErrorDerefChecker clang static analyzer check"
                },
                "fullDescription": {
                  "text": "osx.NSOrCFErrorDerefChecker clang static analyzer check. Learn more...",
                  "markdown": "osx.NSOrCFErrorDerefChecker clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPointerIntegerCompare",
                "shortDescription": {
                  "text": "pointer-integer-compare clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wpointer-integer-compare clang diagnostic. Learn more...",
                  "markdown": "-Wpointer-integer-compare clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wpointer-integer-compare)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppMissingIndent",
                "shortDescription": {
                  "text": "Incorrect indent (line should be indented or outdented elsewhere)"
                },
                "fullDescription": {
                  "text": "Line should be indented or outdented elsewhere",
                  "markdown": "Line should be indented or outdented elsewhere"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Html.AttributeValueNotResolved",
                "shortDescription": {
                  "text": "Unknown attribute value"
                },
                "fullDescription": {
                  "text": "Unknown attribute value in HTML and related technologies",
                  "markdown": "Unknown attribute value in HTML and related technologies"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticConceptsTsCompat",
                "shortDescription": {
                  "text": "concepts-ts-compat clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wconcepts-ts-compat clang diagnostic. Learn more...",
                  "markdown": "-Wconcepts-ts-compat clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wconcepts-ts-compat)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppPrintfExtraArg",
                "shortDescription": {
                  "text": "Too many arguments in a call to printf"
                },
                "fullDescription": {
                  "text": "Too many arguments in a call to printf. Some of the arguments are not used.",
                  "markdown": "Too many arguments in a call to printf. Some of the arguments are not used."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityElseAfterReturn",
                "shortDescription": {
                  "text": "readability-else-after-return clang-tidy check"
                },
                "fullDescription": {
                  "text": "readability-else-after-return clang-tidy check. Learn more...",
                  "markdown": "readability-else-after-return clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/else-after-return.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPragmaClangAttribute",
                "shortDescription": {
                  "text": "pragma-clang-attribute clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wpragma-clang-attribute clang diagnostic. Learn more...",
                  "markdown": "-Wpragma-clang-attribute clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wpragma-clang-attribute)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesProBoundsPointerArithmetic",
                "shortDescription": {
                  "text": "cppcoreguidelines-pro-bounds-pointer-arithmetic clang-tidy check"
                },
                "fullDescription": {
                  "text": "cppcoreguidelines-pro-bounds-pointer-arithmetic clang-tidy check. Learn more...",
                  "markdown": "cppcoreguidelines-pro-bounds-pointer-arithmetic clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/pro-bounds-pointer-arithmetic.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticExternInitializer",
                "shortDescription": {
                  "text": "extern-initializer clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wextern-initializer clang diagnostic. Learn more...",
                  "markdown": "-Wextern-initializer clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wextern-initializer)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesAvoidMagicNumbers",
                "shortDescription": {
                  "text": "cppcoreguidelines-avoid-magic-numbers clang-tidy check"
                },
                "fullDescription": {
                  "text": "cppcoreguidelines-avoid-magic-numbers clang-tidy check. Learn more...",
                  "markdown": "cppcoreguidelines-avoid-magic-numbers clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/avoid-magic-numbers.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BaseObjectGetHashCodeCallInGetHashCode",
                "shortDescription": {
                  "text": "Overridden GetHashCode calls base 'Object.GetHashCode()'"
                },
                "fullDescription": {
                  "text": "Overridden GetHashCode calls base 'Object.GetHashCode()'",
                  "markdown": "Overridden GetHashCode calls base 'Object.GetHashCode()'"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityUppercaseLiteralSuffix",
                "shortDescription": {
                  "text": "readability-uppercase-literal-suffix clang-tidy check"
                },
                "fullDescription": {
                  "text": "readability-uppercase-literal-suffix clang-tidy check. Learn more...",
                  "markdown": "readability-uppercase-literal-suffix clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/uppercase-literal-suffix.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDirectIvarAccess",
                "shortDescription": {
                  "text": "direct-ivar-access clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdirect-ivar-access clang diagnostic. Learn more...",
                  "markdown": "-Wdirect-ivar-access clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdirect-ivar-access)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppIdenticalOperandsInBinaryExpression",
                "shortDescription": {
                  "text": "Binary operator acts on identical operands"
                },
                "fullDescription": {
                  "text": "Binary operator acts on identical operands",
                  "markdown": "Binary operator acts on identical operands"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedRegister",
                "shortDescription": {
                  "text": "deprecated-register clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdeprecated-register clang diagnostic. Learn more...",
                  "markdown": "-Wdeprecated-register clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-register)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMismatchedNewDelete",
                "shortDescription": {
                  "text": "mismatched-new-delete clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmismatched-new-delete clang diagnostic. Learn more...",
                  "markdown": "-Wmismatched-new-delete clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmismatched-new-delete)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.BurstAccessingManagedMethod",
                "shortDescription": {
                  "text": "Accessing managed methods is not supported"
                },
                "fullDescription": {
                  "text": "Accessing managed methods is not supported",
                  "markdown": "Accessing managed methods is not supported"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity Burst Compiler Warnings",
                      "index": 34,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ShiftExpressionResultEqualsZero",
                "shortDescription": {
                  "text": "Constant shift expression with non-zero operands results in a zero value"
                },
                "fullDescription": {
                  "text": "Constant shift expression with non-zero operands results in a zero value",
                  "markdown": "Constant shift expression with non-zero operands results in a zero value"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityRedundantStringInit",
                "shortDescription": {
                  "text": "readability-redundant-string-init clang-tidy check"
                },
                "fullDescription": {
                  "text": "readability-redundant-string-init clang-tidy check. Learn more...",
                  "markdown": "readability-redundant-string-init clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/redundant-string-init.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnsupportedTargetOpt",
                "shortDescription": {
                  "text": "unsupported-target-opt clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunsupported-target-opt clang diagnostic. Learn more...",
                  "markdown": "-Wunsupported-target-opt clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunsupported-target-opt)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticTautologicalConstantInRangeCompare",
                "shortDescription": {
                  "text": "tautological-constant-in-range-compare clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wtautological-constant-in-range-compare clang diagnostic. Learn more...",
                  "markdown": "-Wtautological-constant-in-range-compare clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wtautological-constant-in-range-compare)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnknownEscapeSequence",
                "shortDescription": {
                  "text": "unknown-escape-sequence clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunknown-escape-sequence clang diagnostic. Learn more...",
                  "markdown": "-Wunknown-escape-sequence clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunknown-escape-sequence)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseArrayEmptyMethod",
                "shortDescription": {
                  "text": "Use 'Array.Empty<T>()'"
                },
                "fullDescription": {
                  "text": "Replace an empty array allocation with a call of the predefined 'Array.Empty()' method",
                  "markdown": "Replace an empty array allocation with a call of the predefined 'Array.Empty()' method"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBadCommaSpaces",
                "shortDescription": {
                  "text": "Incorrect spacing (around comma)"
                },
                "fullDescription": {
                  "text": "Around comma",
                  "markdown": "Around comma"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppAbstractClassWithoutSpecifier",
                "shortDescription": {
                  "text": "Class is abstract but not explicitly declared as such"
                },
                "fullDescription": {
                  "text": "The class is abstract but not explicitly declared as such",
                  "markdown": "The class is abstract but not explicitly declared as such"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithOfType.Single.2",
                "shortDescription": {
                  "text": "Replace with OfType<T>().Single() (replace with OfType(Of ..)().Single(..))"
                },
                "fullDescription": {
                  "text": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).Single(Function ($y$) $y$ IsNot Nothing AndAlso $expr$)",
                  "markdown": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).Single(Function ($y$) $y$ IsNot Nothing AndAlso $expr$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithOfType.Single.1",
                "shortDescription": {
                  "text": "Replace with OfType<T>().Single() (replace with OfType(Of ..)().Single())"
                },
                "fullDescription": {
                  "text": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).Single(Function ($y$) $y$ IsNot Nothing)",
                  "markdown": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).Single(Function ($y$) $y$ IsNot Nothing)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFormatSecurity",
                "shortDescription": {
                  "text": "format-security clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wformat-security clang diagnostic. Learn more...",
                  "markdown": "-Wformat-security clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wformat-security)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBoostFormatBadCode",
                "shortDescription": {
                  "text": "Incorrect format directive in boost::format"
                },
                "fullDescription": {
                  "text": "A format string of boost::format contains an erroneous format directive",
                  "markdown": "A format string of boost::format contains an erroneous format directive"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBadParensSpaces",
                "shortDescription": {
                  "text": "Incorrect spacing (around parenthesis)"
                },
                "fullDescription": {
                  "text": "Around parenthesis",
                  "markdown": "Around parenthesis"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPessimizingMove",
                "shortDescription": {
                  "text": "pessimizing-move clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wpessimizing-move clang diagnostic. Learn more...",
                  "markdown": "-Wpessimizing-move clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wpessimizing-move)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PossibleInterfaceMemberAmbiguity",
                "shortDescription": {
                  "text": "Possible ambiguity while accessing member by interface"
                },
                "fullDescription": {
                  "text": "Possible ambiguity while accessing member by interface",
                  "markdown": "Possible ambiguity while accessing member by interface"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MethodHasAsyncOverloadWithCancellation",
                "shortDescription": {
                  "text": "Method has async overload with cancellation support"
                },
                "fullDescription": {
                  "text": "Method has async overload with 'CancellationToken'",
                  "markdown": "Method has async overload with 'CancellationToken'"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIncompatibleFunctionPointerTypes",
                "shortDescription": {
                  "text": "incompatible-function-pointer-types clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wincompatible-function-pointer-types clang diagnostic. Learn more...",
                  "markdown": "-Wincompatible-function-pointer-types clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wincompatible-function-pointer-types)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeleteNonAbstractNonVirtualDtor",
                "shortDescription": {
                  "text": "delete-non-abstract-non-virtual-dtor clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdelete-non-abstract-non-virtual-dtor clang diagnostic. Learn more...",
                  "markdown": "-Wdelete-non-abstract-non-virtual-dtor clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdelete-non-abstract-non-virtual-dtor)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesAvoidGoto",
                "shortDescription": {
                  "text": "cppcoreguidelines-avoid-goto clang-tidy check"
                },
                "fullDescription": {
                  "text": "cppcoreguidelines-avoid-goto clang-tidy check. Learn more...",
                  "markdown": "cppcoreguidelines-avoid-goto clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/avoid-goto.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppPrivateSpecialMemberFunctionIsNotImplemented",
                "shortDescription": {
                  "text": "Private special member function is not implemented"
                },
                "fullDescription": {
                  "text": "A private special member function must be defined or deleted",
                  "markdown": "A private special member function must be defined or deleted"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUndefPrefix",
                "shortDescription": {
                  "text": "undef-prefix clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wundef-prefix clang diagnostic. Learn more...",
                  "markdown": "-Wundef-prefix clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wundef-prefix)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityInconsistentDeclarationParameterName",
                "shortDescription": {
                  "text": "readability-inconsistent-declaration-parameter-name clang-tidy check"
                },
                "fullDescription": {
                  "text": "readability-inconsistent-declaration-parameter-name clang-tidy check. Learn more...",
                  "markdown": "readability-inconsistent-declaration-parameter-name clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/inconsistent-declaration-parameter-name.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ObsoleteElementError",
                "shortDescription": {
                  "text": "Use of obsolete type or type member (error)"
                },
                "fullDescription": {
                  "text": "Use of obsolete type or type member in XAML markup (error)",
                  "markdown": "Use of obsolete type or type member in XAML markup (error)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.DuplicateShortcut",
                "shortDescription": {
                  "text": "The same shortcut is defined for another menu item"
                },
                "fullDescription": {
                  "text": "The same shortcut is defined for another menu item",
                  "markdown": "The same shortcut is defined for another menu item"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneUnhandledExceptionAtNew",
                "shortDescription": {
                  "text": "bugprone-unhandled-exception-at-new clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-unhandled-exception-at-new clang-tidy check. Learn more...",
                  "markdown": "bugprone-unhandled-exception-at-new clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/unhandled-exception-at-new.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDllexportExplicitInstantiationDecl",
                "shortDescription": {
                  "text": "dllexport-explicit-instantiation-decl clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdllexport-explicit-instantiation-decl clang diagnostic. Learn more...",
                  "markdown": "-Wdllexport-explicit-instantiation-decl clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdllexport-explicit-instantiation-decl)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppIntegralToPointerConversion",
                "shortDescription": {
                  "text": "Implicit integer to pointer conversion"
                },
                "fullDescription": {
                  "text": "Implicit integer to pointer conversion",
                  "markdown": "Implicit integer to pointer conversion"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0420",
                "shortDescription": {
                  "text": "Reference to a volatile field will not be treated as volatile"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://msdn.microsoft.com/en-us/library/4bw5ewxy.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFourCharConstants",
                "shortDescription": {
                  "text": "four-char-constants clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wfour-char-constants clang diagnostic. Learn more...",
                  "markdown": "-Wfour-char-constants clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wfour-char-constants)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8383",
                "shortDescription": {
                  "text": "The tuple element name is ignored because a different name or no name is specified on the other side of the tuple == or != operator."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.XamlRelativeSourceDefaultModeWarningHighlighting",
                "shortDescription": {
                  "text": "RelativeSourceMode is not set explicitly"
                },
                "fullDescription": {
                  "text": "Default RelativeSourceMode value is platform-specific, explicit specification is required to process RelativeSource usage unambiguously",
                  "markdown": "Default RelativeSourceMode value is platform-specific, explicit specification is required to process RelativeSource usage unambiguously"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.RangeAttributeBoundsAreOutOfRange",
                "shortDescription": {
                  "text": "NUnit. Values in range do not fit the type of the test parameter."
                },
                "fullDescription": {
                  "text": "NUnit. Values specified in [Range] are out range for the type of the test parameter. Learn more...",
                  "markdown": "NUnit. Values specified in \\[Range\\] are out range for the type of the test parameter. [Learn more...](https://www.jetbrains.com/help/rider/NUnit.RangeAttributeBoundsAreOutOfRange.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyFuchsiaVirtualInheritance",
                "shortDescription": {
                  "text": "fuchsia-virtual-inheritance clang-tidy check"
                },
                "fullDescription": {
                  "text": "fuchsia-virtual-inheritance clang-tidy check. Learn more...",
                  "markdown": "fuchsia-virtual-inheritance clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/fuchsia/virtual-inheritance.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuPointerArith",
                "shortDescription": {
                  "text": "gnu-pointer-arith clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wgnu-pointer-arith clang diagnostic. Learn more...",
                  "markdown": "-Wgnu-pointer-arith clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-pointer-arith)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadIndent",
                "shortDescription": {
                  "text": "Incorrect indent (line indent should not be changed relative to the previous line elsewhere)"
                },
                "fullDescription": {
                  "text": "Line indent should not be changed relative to the previous line elsewhere Learn more...",
                  "markdown": "Line indent should not be changed relative to the previous line elsewhere [Learn more...](https://www.jetbrains.com/help/rider/BadIndent.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertCon54Cpp",
                "shortDescription": {
                  "text": "cert-con54-cpp clang-tidy check"
                },
                "fullDescription": {
                  "text": "cert-con54-cpp clang-tidy check. Learn more...",
                  "markdown": "cert-con54-cpp clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/con54-cpp.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInvalidPpToken",
                "shortDescription": {
                  "text": "invalid-pp-token clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Winvalid-pp-token clang diagnostic. Learn more...",
                  "markdown": "-Winvalid-pp-token clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#winvalid-pp-token)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NotAssignedOutParameter",
                "shortDescription": {
                  "text": "'out' parameter is not assigned upon exit"
                },
                "fullDescription": {
                  "text": "'out' parameter is not assigned upon exit",
                  "markdown": "'out' parameter is not assigned upon exit"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1723",
                "shortDescription": {
                  "text": "XML comment has cref attribute that refers to a type parameter"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://msdn.microsoft.com/en-us/library/ms228603.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.RedundantExpectedResultInTestCaseAttribute",
                "shortDescription": {
                  "text": "NUnit. Redundant expected result for void test method."
                },
                "fullDescription": {
                  "text": "Specifying expected result for void NUnit test methods through the [TestCase] attribute is redundant. Learn more...",
                  "markdown": "Specifying expected result for void NUnit test methods through the \\[TestCase\\] attribute is redundant. [Learn more...](https://www.jetbrains.com/help/rider/NUnit.RedundantExpectedResultInTestCaseAttribute.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.UnknownTag",
                "shortDescription": {
                  "text": "The tag is not defined in the 'Tags & Layers'"
                },
                "fullDescription": {
                  "text": "The tag is not defined in the 'Tags & Layers'. Expression will return 'false'.",
                  "markdown": "The tag is not defined in the 'Tags \\& Layers'. Expression will return 'false'."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyGoogleObjcFunctionNaming",
                "shortDescription": {
                  "text": "google-objc-function-naming clang-tidy check"
                },
                "fullDescription": {
                  "text": "google-objc-function-naming clang-tidy check. Learn more...",
                  "markdown": "google-objc-function-naming clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/objc-function-naming.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOptinPerformancePadding",
                "shortDescription": {
                  "text": "optin.performance.Padding clang static analyzer check"
                },
                "fullDescription": {
                  "text": "optin.performance.Padding clang static analyzer check. Learn more...",
                  "markdown": "optin.performance.Padding clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantExplicitParamsArrayCreation",
                "shortDescription": {
                  "text": "Redundant explicit array creation in argument of 'params' parameter"
                },
                "fullDescription": {
                  "text": "Array creation in argument passed to 'params' parameter is redundant",
                  "markdown": "Array creation in argument passed to 'params' parameter is redundant"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS7023",
                "shortDescription": {
                  "text": "Static type in 'is' or 'as' operator."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Asp.Warning",
                "shortDescription": {
                  "text": "ASP.NET Warning"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS7022",
                "shortDescription": {
                  "text": "The 'Main' method will not be used as an entry point because compilation unit with top-level statements was found."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCoreUninitializedArraySubscript",
                "shortDescription": {
                  "text": "core.uninitialized.ArraySubscript clang static analyzer check"
                },
                "fullDescription": {
                  "text": "core.uninitialized.ArraySubscript clang static analyzer check. Learn more...",
                  "markdown": "core.uninitialized.ArraySubscript clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseIndexFromEndExpression",
                "shortDescription": {
                  "text": "Use index from end expression"
                },
                "fullDescription": {
                  "text": "Replace array indexer argument with index from end expression",
                  "markdown": "Replace array indexer argument with index from end expression"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RouteTemplates.ParameterTypeAndConstraintsMismatch",
                "shortDescription": {
                  "text": "Type of parameter doesn't satisfy constraints declared in route template"
                },
                "fullDescription": {
                  "text": "Type of parameter doesn't satisfy constraints declared in route template",
                  "markdown": "Type of parameter doesn't satisfy constraints declared in route template"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertMsc32C",
                "shortDescription": {
                  "text": "cert-msc32-c clang-tidy check"
                },
                "fullDescription": {
                  "text": "cert-msc32-c clang-tidy check. Learn more...",
                  "markdown": "cert-msc32-c clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/msc32-c.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuBinaryLiteral",
                "shortDescription": {
                  "text": "gnu-binary-literal clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wgnu-binary-literal clang diagnostic. Learn more...",
                  "markdown": "-Wgnu-binary-literal clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-binary-literal)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertTypeCheckToNullCheck",
                "shortDescription": {
                  "text": "Use null check instead of a type check succeeding on any not-null value"
                },
                "fullDescription": {
                  "text": "The expression of 'is' operator matches the provided type on any non-null value. Consider comparing with 'null' instead.",
                  "markdown": "The expression of 'is' operator matches the provided type on any non-null value. Consider comparing with 'null' instead."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppUseEqualsDefault",
                "shortDescription": {
                  "text": "hicpp-use-equals-default clang-tidy check"
                },
                "fullDescription": {
                  "text": "hicpp-use-equals-default clang-tidy check. Learn more...",
                  "markdown": "hicpp-use-equals-default clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/use-equals-default.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.IgnoredParameterAttribute",
                "shortDescription": {
                  "text": "NUnit. Ignored parameter attribute."
                },
                "fullDescription": {
                  "text": "NUnit. Parameter attribute is ignored by NUnit framework.",
                  "markdown": "NUnit. Parameter attribute is ignored by NUnit framework."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeUseTransparentFunctors",
                "shortDescription": {
                  "text": "modernize-use-transparent-functors clang-tidy check"
                },
                "fullDescription": {
                  "text": "modernize-use-transparent-functors clang-tidy check. Learn more...",
                  "markdown": "modernize-use-transparent-functors clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-transparent-functors.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MeaninglessDefaultParameterValue",
                "shortDescription": {
                  "text": "'DefaultParameterValueAttribute' must be used in conjunction with 'OptionalAttribute'"
                },
                "fullDescription": {
                  "text": "'DefaultParameterValueAttribute' must be used in conjunction with 'OptionalAttribute'",
                  "markdown": "'DefaultParameterValueAttribute' must be used in conjunction with 'OptionalAttribute'"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnneededInternalDeclaration",
                "shortDescription": {
                  "text": "unneeded-internal-declaration clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunneeded-internal-declaration clang diagnostic. Learn more...",
                  "markdown": "-Wunneeded-internal-declaration clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunneeded-internal-declaration)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.BurstCreatingManagedType",
                "shortDescription": {
                  "text": "Creating a managed type is not supported"
                },
                "fullDescription": {
                  "text": "Creating a managed type is not supported",
                  "markdown": "Creating a managed type is not supported"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity Burst Compiler Warnings",
                      "index": 34,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDangling",
                "shortDescription": {
                  "text": "dangling clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdangling clang diagnostic. Learn more...",
                  "markdown": "-Wdangling clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdangling)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticWeakVtables",
                "shortDescription": {
                  "text": "weak-vtables clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wweak-vtables clang diagnostic. Learn more...",
                  "markdown": "-Wweak-vtables clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wweak-vtables)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMissingNoreturn",
                "shortDescription": {
                  "text": "missing-noreturn clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmissing-noreturn clang diagnostic. Learn more...",
                  "markdown": "-Wmissing-noreturn clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmissing-noreturn)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppIfCanBeReplacedByConstexprIf",
                "shortDescription": {
                  "text": "If statement with constant condition can be replaced with 'if constexpr'"
                },
                "fullDescription": {
                  "text": "If statement with constant condition can be replaced with 'if constexpr'",
                  "markdown": "If statement with constant condition can be replaced with 'if constexpr'"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppUseNoexcept",
                "shortDescription": {
                  "text": "hicpp-use-noexcept clang-tidy check"
                },
                "fullDescription": {
                  "text": "hicpp-use-noexcept clang-tidy check. Learn more...",
                  "markdown": "hicpp-use-noexcept clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/use-noexcept.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0458",
                "shortDescription": {
                  "text": "The result of the expression is always 'null' of nullable type"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnusedButSetParameter",
                "shortDescription": {
                  "text": "unused-but-set-parameter clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunused-but-set-parameter clang diagnostic. Learn more...",
                  "markdown": "-Wunused-but-set-parameter clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-but-set-parameter)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppDefaultCaseNotHandledInSwitchStatement",
                "shortDescription": {
                  "text": "Default case is not handled in a switch statement"
                },
                "fullDescription": {
                  "text": "Default case is not handled in a switch statement",
                  "markdown": "Default case is not handled in a switch statement"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticShadowFieldInConstructorModified",
                "shortDescription": {
                  "text": "shadow-field-in-constructor-modified clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wshadow-field-in-constructor-modified clang diagnostic. Learn more...",
                  "markdown": "-Wshadow-field-in-constructor-modified clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wshadow-field-in-constructor-modified)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NotOverriddenInSpecificCulture",
                "shortDescription": {
                  "text": "Resource is not overridden in specific culture"
                },
                "fullDescription": {
                  "text": "Resource is not overridden in one or more specific cultures Learn more...",
                  "markdown": "Resource is not overridden in one or more specific cultures [Learn more...](https://www.jetbrains.com/help/rider/NotOverriddenInSpecificCulture.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyMiscConfusableIdentifiers",
                "shortDescription": {
                  "text": "misc-confusable-identifiers clang-tidy check"
                },
                "fullDescription": {
                  "text": "misc-confusable-identifiers clang-tidy check. Learn more...",
                  "markdown": "misc-confusable-identifiers clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/confusable-identifiers.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonReadonlyMemberInGetHashCode",
                "shortDescription": {
                  "text": "Non-readonly type member referenced in 'GetHashCode()'"
                },
                "fullDescription": {
                  "text": "Non-readonly field or auto-property referenced in 'GetHashCode()' Learn more...",
                  "markdown": "Non-readonly field or auto-property referenced in 'GetHashCode()' [Learn more...](https://www.jetbrains.com/help/rider/NonReadonlyMemberInGetHashCode.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNonportableSystemIncludePath",
                "shortDescription": {
                  "text": "nonportable-system-include-path clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wnonportable-system-include-path clang diagnostic. Learn more...",
                  "markdown": "-Wnonportable-system-include-path clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wnonportable-system-include-path)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPragmaOnceOutsideHeader",
                "shortDescription": {
                  "text": "pragma-once-outside-header clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wpragma-once-outside-header clang diagnostic. Learn more...",
                  "markdown": "-Wpragma-once-outside-header clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wpragma-once-outside-header)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertMsc30C",
                "shortDescription": {
                  "text": "cert-msc30-c clang-tidy check"
                },
                "fullDescription": {
                  "text": "cert-msc30-c clang-tidy check. Learn more...",
                  "markdown": "cert-msc30-c clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/msc30-c.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAtomicAlignment",
                "shortDescription": {
                  "text": "atomic-alignment clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Watomic-alignment clang diagnostic. Learn more...",
                  "markdown": "-Watomic-alignment clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#watomic-alignment)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0469",
                "shortDescription": {
                  "text": "'goto case' value is not implicitly convertible to required type"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://msdn.microsoft.com/en-us/library/ms228370.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedAnonymousMethodSignature",
                "shortDescription": {
                  "text": "Anonymous method signature is not necessary"
                },
                "fullDescription": {
                  "text": "Specifying signature in an anonymous method is not necessary because none of its parameters are used in the body",
                  "markdown": "Specifying signature in an anonymous method is not necessary because none of its parameters are used in the body"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMissingExceptionSpec",
                "shortDescription": {
                  "text": "missing-exception-spec clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmissing-exception-spec clang diagnostic. Learn more...",
                  "markdown": "-Wmissing-exception-spec clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmissing-exception-spec)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPoisonSystemDirectories",
                "shortDescription": {
                  "text": "poison-system-directories clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wpoison-system-directories clang diagnostic. Learn more...",
                  "markdown": "-Wpoison-system-directories clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wpoison-system-directories)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0464",
                "shortDescription": {
                  "text": "Comparing with null of nullable value type always produces 'false'"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0465",
                "shortDescription": {
                  "text": "Introducing a 'Finalize' method can interfere with destructor invocation"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://msdn.microsoft.com/en-us/library/02wtfwbt.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnusedLambdaCapture",
                "shortDescription": {
                  "text": "unused-lambda-capture clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunused-lambda-capture clang diagnostic. Learn more...",
                  "markdown": "-Wunused-lambda-capture clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-lambda-capture)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFormat",
                "shortDescription": {
                  "text": "format clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wformat clang diagnostic. Learn more...",
                  "markdown": "-Wformat clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wformat)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIgnoredReferenceQualifiers",
                "shortDescription": {
                  "text": "ignored-reference-qualifiers clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wignored-reference-qualifiers clang diagnostic. Learn more...",
                  "markdown": "-Wignored-reference-qualifiers clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wignored-reference-qualifiers)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.EmptyGridLengthDefinition",
                "shortDescription": {
                  "text": "Grid length definition must not be empty"
                },
                "fullDescription": {
                  "text": "Grid length definition must not be empty",
                  "markdown": "Grid length definition must not be empty"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBUseMethodAny.1",
                "shortDescription": {
                  "text": "Use method Any()"
                },
                "fullDescription": {
                  "text": "$seq$.Count() > 0",
                  "markdown": "$seq$.Count() \\> 0"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBUseMethodAny.2",
                "shortDescription": {
                  "text": "Use method Any()"
                },
                "fullDescription": {
                  "text": "$seq$.Count() >= 1",
                  "markdown": "$seq$.Count() \\>= 1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS7095",
                "shortDescription": {
                  "text": "Filter expression is a constant, consider removing the filter"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBUseMethodAny.3",
                "shortDescription": {
                  "text": "Use method Any()"
                },
                "fullDescription": {
                  "text": "$seq$.Count() = 0",
                  "markdown": "$seq$.Count() = 0"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBUseMethodAny.4",
                "shortDescription": {
                  "text": "Use method Any()"
                },
                "fullDescription": {
                  "text": "$seq$.Count() <= 0",
                  "markdown": "$seq$.Count() \\<= 0"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBUseMethodAny.5",
                "shortDescription": {
                  "text": "Use method Any()"
                },
                "fullDescription": {
                  "text": "$seq$.Count() < 1",
                  "markdown": "$seq$.Count() \\< 1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUsedButMarkedUnused",
                "shortDescription": {
                  "text": "used-but-marked-unused clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wused-but-marked-unused clang diagnostic. Learn more...",
                  "markdown": "-Wused-but-marked-unused clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wused-but-marked-unused)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticOverloadedShiftOpParentheses",
                "shortDescription": {
                  "text": "overloaded-shift-op-parentheses clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Woverloaded-shift-op-parentheses clang diagnostic. Learn more...",
                  "markdown": "-Woverloaded-shift-op-parentheses clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#woverloaded-shift-op-parentheses)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FSharpInterpolatedString",
                "shortDescription": {
                  "text": "Format string can be replaced with an interpolated string"
                },
                "fullDescription": {
                  "text": "Format string can be replaced with an interpolated string.",
                  "markdown": "Format string can be replaced with an interpolated string."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithFieldKeyword",
                "shortDescription": {
                  "text": "Replace with 'field' keyword"
                },
                "fullDescription": {
                  "text": "Replace explicit field declaration with a 'field' keyword usage in corresponding property declaration (anonymous field)",
                  "markdown": "Replace explicit field declaration with a 'field' keyword usage in corresponding property declaration (anonymous field)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrangeTypeModifiers",
                "shortDescription": {
                  "text": "Use explicit or implicit modifier definition for types"
                },
                "fullDescription": {
                  "text": "'internal' modifier can be safely added/removed from types without changing code semantics Learn more...",
                  "markdown": "'internal' modifier can be safely added/removed from types without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeTypeModifiers.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNonModularIncludeInFrameworkModule",
                "shortDescription": {
                  "text": "non-modular-include-in-framework-module clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wnon-modular-include-in-framework-module clang diagnostic. Learn more...",
                  "markdown": "-Wnon-modular-include-in-framework-module clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wnon-modular-include-in-framework-module)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LocalFunctionHidesMethod",
                "shortDescription": {
                  "text": "Local function hides method"
                },
                "fullDescription": {
                  "text": "Local function has the same name as a method and hides it",
                  "markdown": "Local function has the same name as a method and hides it"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.LoadSceneAmbiguousSceneName",
                "shortDescription": {
                  "text": "Short scene name is not unique"
                },
                "fullDescription": {
                  "text": "There are several scenes with the same name in the Unity build settings. Only scene with smallest index will be used.",
                  "markdown": "There are several scenes with the same name in the Unity build settings. Only scene with smallest index will be used."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.LoadSceneDisabledSceneName",
                "shortDescription": {
                  "text": "Scene is disabled in the build settings"
                },
                "fullDescription": {
                  "text": "Scene is disabled in the Unity build settings, so it could not be loaded",
                  "markdown": "Scene is disabled in the Unity build settings, so it could not be loaded"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDefaultedFunctionDeleted",
                "shortDescription": {
                  "text": "defaulted-function-deleted clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdefaulted-function-deleted clang diagnostic. Learn more...",
                  "markdown": "-Wdefaulted-function-deleted clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdefaulted-function-deleted)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReturnTypeCanBeNotNullable",
                "shortDescription": {
                  "text": "Return type of a function can be non-nullable"
                },
                "fullDescription": {
                  "text": "Function's return type is declared as nullable but it never returns nullable values",
                  "markdown": "Function's return type is declared as nullable but it never returns nullable values"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MissingBodyTag",
                "shortDescription": {
                  "text": "Important tags or attributes missing (missing <body>)"
                },
                "fullDescription": {
                  "text": "<([)html(]) $attr1$>$cont$",
                  "markdown": "\\<(\\[)html(\\]) $attr1$\\>$cont$"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppOutParameterMustBeWritten",
                "shortDescription": {
                  "text": "The 'out' parameter must be assigned"
                },
                "fullDescription": {
                  "text": "In HLSL 'out' parameters must be assigned before exiting the function",
                  "markdown": "In HLSL 'out' parameters must be assigned before exiting the function"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.BindingWithContextNotResolved",
                "shortDescription": {
                  "text": "Unresolved binding path when DataContext is known"
                },
                "fullDescription": {
                  "text": "Unresolved binding path when DataContext for data binding is specified, but symbol cannot be found",
                  "markdown": "Unresolved binding path when DataContext for data binding is specified, but symbol cannot be found"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticOutOfScopeFunction",
                "shortDescription": {
                  "text": "out-of-scope-function clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wout-of-scope-function clang diagnostic. Learn more...",
                  "markdown": "-Wout-of-scope-function clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wout-of-scope-function)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrangeConstructorOrDestructorBody",
                "shortDescription": {
                  "text": "Use preferred body style (convert into constructor or destructor with preferred body style)"
                },
                "fullDescription": {
                  "text": "Use expression or block body Learn more...",
                  "markdown": "Use expression or block body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeConstructorOrDestructorBody.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Html.TagShouldNotBeSelfClosed",
                "shortDescription": {
                  "text": "Wrong self-closed tag"
                },
                "fullDescription": {
                  "text": "Wrong self-closed tag in HTML and related technologies",
                  "markdown": "Wrong self-closed tag in HTML and related technologies"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticModuleConflict",
                "shortDescription": {
                  "text": "module-conflict clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmodule-conflict clang diagnostic. Learn more...",
                  "markdown": "-Wmodule-conflict clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmodule-conflict)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantExtendsListEntry",
                "shortDescription": {
                  "text": "Redundant class or interface specification in base types list"
                },
                "fullDescription": {
                  "text": "Type is either mentioned in the base types list of other part or it is an interface and appears as other type's base and contains no explicit implementations Learn more...",
                  "markdown": "Type is either mentioned in the base types list of other part or it is an interface and appears as other type's base and contains no explicit implementations [Learn more...](https://www.jetbrains.com/help/rider/RedundantExtendsListEntry.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReturnValueOfPureMethodIsNotUsed",
                "shortDescription": {
                  "text": "Return value of pure method is not used"
                },
                "fullDescription": {
                  "text": "Return value of pure method is not used Learn more...",
                  "markdown": "Return value of pure method is not used [Learn more...](https://www.jetbrains.com/help/rider/ReturnValueOfPureMethodIsNotUsed.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticConfigMacros",
                "shortDescription": {
                  "text": "config-macros clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wconfig-macros clang diagnostic. Learn more...",
                  "markdown": "-Wconfig-macros clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wconfig-macros)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDocumentationUnknownCommand",
                "shortDescription": {
                  "text": "documentation-unknown-command clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdocumentation-unknown-command clang diagnostic. Learn more...",
                  "markdown": "-Wdocumentation-unknown-command clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdocumentation-unknown-command)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyStatement",
                "shortDescription": {
                  "text": "Empty statement is redundant"
                },
                "fullDescription": {
                  "text": "Empty statement is redundant Learn more...",
                  "markdown": "Empty statement is redundant [Learn more...](https://www.jetbrains.com/help/rider/EmptyStatement.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NotAccessedPositionalProperty.Local",
                "shortDescription": {
                  "text": "Non-accessed positional property (private accessibility)"
                },
                "fullDescription": {
                  "text": "Positional property is never accessed for reading Learn more...",
                  "markdown": "Positional property is never accessed for reading [Learn more...](https://www.jetbrains.com/help/rider/NotAccessedPositionalProperty.Local.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.IncorrectMethodSignatureInStringLiteral",
                "shortDescription": {
                  "text": "Method referenced in string literal does not have the expected signature"
                },
                "fullDescription": {
                  "text": "Method referenced in string literal does not have the expected signature.",
                  "markdown": "Method referenced in string literal does not have the expected signature."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.RedundantFreezeAttribute",
                "shortDescription": {
                  "text": "Redundant 'Freeze' attribute"
                },
                "fullDescription": {
                  "text": "Freeze attribute is not used and can be safely removed",
                  "markdown": "Freeze attribute is not used and can be safely removed"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnassignedGetOnlyAutoProperty",
                "shortDescription": {
                  "text": "Get-only auto-property is never assigned"
                },
                "fullDescription": {
                  "text": "Auto-property without setter has no initializer or is never assigned in constructor",
                  "markdown": "Auto-property without setter has no initializer or is never assigned in constructor"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUE4BlueprintCallableFunctionMayBeStatic",
                "shortDescription": {
                  "text": "BlueprintCallable function can be made static"
                },
                "fullDescription": {
                  "text": "BlueprintCallable function can be made static",
                  "markdown": "BlueprintCallable function can be made static"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unreal Engine",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantSetContainsBeforeAdding",
                "shortDescription": {
                  "text": "Redundant set 'Contains' before 'Add'"
                },
                "fullDescription": {
                  "text": "Redundant set 'Contains' before 'Add'. If the element is already in the set, it won't be added again.",
                  "markdown": "Redundant set 'Contains' before 'Add'. If the element is already in the set, it won't be added again."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneUnhandledSelfAssignment",
                "shortDescription": {
                  "text": "bugprone-unhandled-self-assignment clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-unhandled-self-assignment clang-tidy check. Learn more...",
                  "markdown": "bugprone-unhandled-self-assignment clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/unhandled-self-assignment.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneSuspiciousMemoryComparison",
                "shortDescription": {
                  "text": "bugprone-suspicious-memory-comparison clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-suspicious-memory-comparison clang-tidy check. Learn more...",
                  "markdown": "bugprone-suspicious-memory-comparison clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/suspicious-memory-comparison.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AssignNullToNotNullAttribute",
                "shortDescription": {
                  "text": "Possible 'null' assignment to non-nullable entity"
                },
                "fullDescription": {
                  "text": "An expression that can have 'null' value is assigned to an entity marked with 'Value cannot be null' attribute. In particular, this can happen when passing such value to a method whose parameter is marked with 'Value cannot be null' attribute. Learn more...",
                  "markdown": "An expression that can have 'null' value is assigned to an entity marked with 'Value cannot be null' attribute. In particular, this can happen when passing such value to a method whose parameter is marked with 'Value cannot be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/AssignNullToNotNullAttribute.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Constraints Violations",
                      "index": 43,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppDeclarationSpecifierWithoutDeclarators",
                "shortDescription": {
                  "text": "Declaration specifier with no declarators"
                },
                "fullDescription": {
                  "text": "A declaration specifier is ignored when there are no declarators",
                  "markdown": "A declaration specifier is ignored when there are no declarators"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDuplicateMethodArg",
                "shortDescription": {
                  "text": "duplicate-method-arg clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wduplicate-method-arg clang diagnostic. Learn more...",
                  "markdown": "-Wduplicate-method-arg clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wduplicate-method-arg)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesNonPrivateMemberVariablesInClasses",
                "shortDescription": {
                  "text": "cppcoreguidelines-non-private-member-variables-in-classes clang-tidy check"
                },
                "fullDescription": {
                  "text": "cppcoreguidelines-non-private-member-variables-in-classes clang-tidy check. Learn more...",
                  "markdown": "cppcoreguidelines-non-private-member-variables-in-classes clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/non-private-member-variables-in-classes.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCocoaSelfInit",
                "shortDescription": {
                  "text": "osx.cocoa.SelfInit clang static analyzer check"
                },
                "fullDescription": {
                  "text": "osx.cocoa.SelfInit clang static analyzer check. Learn more...",
                  "markdown": "osx.cocoa.SelfInit clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WebConfig.ModuleQualificationResolve",
                "shortDescription": {
                  "text": "Module qualification required"
                },
                "fullDescription": {
                  "text": "Module qualification required for type resolution",
                  "markdown": "Module qualification required for type resolution"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IntroduceOptionalParameters.Global",
                "shortDescription": {
                  "text": "Introduce optional parameters (non-private accessibility)"
                },
                "fullDescription": {
                  "text": "Introduce optional parameters to overload method",
                  "markdown": "Introduce optional parameters to overload method"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DoubleNegationOperator",
                "shortDescription": {
                  "text": "Double negation operator"
                },
                "fullDescription": {
                  "text": "Double negation is meaningless bool b = !!condition; Learn more...",
                  "markdown": "Double negation is meaningless\n\n```\nbool b = !!condition;\n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/DoubleNegationOperator.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyGoogleBuildNamespaces",
                "shortDescription": {
                  "text": "google-build-namespaces clang-tidy check"
                },
                "fullDescription": {
                  "text": "google-build-namespaces clang-tidy check. Learn more...",
                  "markdown": "google-build-namespaces clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/build-namespaces.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneForwardingReferenceOverload",
                "shortDescription": {
                  "text": "bugprone-forwarding-reference-overload clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-forwarding-reference-overload clang-tidy check. Learn more...",
                  "markdown": "bugprone-forwarding-reference-overload clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/forwarding-reference-overload.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeUseNullptr",
                "shortDescription": {
                  "text": "modernize-use-nullptr clang-tidy check"
                },
                "fullDescription": {
                  "text": "modernize-use-nullptr clang-tidy check. Learn more...",
                  "markdown": "modernize-use-nullptr clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-nullptr.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizePassByValue",
                "shortDescription": {
                  "text": "modernize-pass-by-value clang-tidy check"
                },
                "fullDescription": {
                  "text": "modernize-pass-by-value clang-tidy check. Learn more...",
                  "markdown": "modernize-pass-by-value clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/pass-by-value.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithSingleCallToSingle",
                "shortDescription": {
                  "text": "Replace with single call to Single(..)"
                },
                "fullDescription": {
                  "text": "$seq$.Where($x$ => $expr$).Single()",
                  "markdown": "$seq$.Where($x$ =\\> $expr$).Single()"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticRegister",
                "shortDescription": {
                  "text": "register clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wregister clang diagnostic. Learn more...",
                  "markdown": "-Wregister clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wregister)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0472",
                "shortDescription": {
                  "text": "The result of the expression is always 'true' or 'false' since a value of value type is never equal to 'null'"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.BurstFunctionSignatureContainsManagedTypes",
                "shortDescription": {
                  "text": "Function signature cannot contain managed types"
                },
                "fullDescription": {
                  "text": "Function signature cannot contain managed types",
                  "markdown": "Function signature cannot contain managed types"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity Burst Compiler Warnings",
                      "index": 34,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuConditionalOmittedOperand",
                "shortDescription": {
                  "text": "gnu-conditional-omitted-operand clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wgnu-conditional-omitted-operand clang diagnostic. Learn more...",
                  "markdown": "-Wgnu-conditional-omitted-operand clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-conditional-omitted-operand)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RoslynAnalyzersOutputInspection",
                "shortDescription": {
                  "text": "Roslyn analyzers output"
                },
                "fullDescription": {
                  "text": "Presents output of Roslyn analyzers",
                  "markdown": "Presents output of Roslyn analyzers"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticClassVarargs",
                "shortDescription": {
                  "text": "class-varargs clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wclass-varargs clang diagnostic. Learn more...",
                  "markdown": "-Wclass-varargs clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wclass-varargs)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCastFunctionType",
                "shortDescription": {
                  "text": "cast-function-type clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wcast-function-type clang diagnostic. Learn more...",
                  "markdown": "-Wcast-function-type clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wcast-function-type)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppWrongIndentSize",
                "shortDescription": {
                  "text": "Incorrect indent (incorrect indent size)"
                },
                "fullDescription": {
                  "text": "Incorrect indent size",
                  "markdown": "Incorrect indent size"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrangeRedundantParentheses",
                "shortDescription": {
                  "text": "Remove redundant parentheses"
                },
                "fullDescription": {
                  "text": "Parentheses can be safely removed from expressions without changing code semantics Learn more...",
                  "markdown": "Parentheses can be safely removed from expressions without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeRedundantParentheses.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.ResourceFilePathCaseMismatch",
                "shortDescription": {
                  "text": "Path to resource is case-sensitive"
                },
                "fullDescription": {
                  "text": "Path to resource is case-sensitive",
                  "markdown": "Path to resource is case-sensitive"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithLastOrDefault.2",
                "shortDescription": {
                  "text": "Replace with LastOrDefault($args$)"
                },
                "fullDescription": {
                  "text": "$expr$ && $seq$.Any($args$) ? $seq$.Last($args$) : null",
                  "markdown": "$expr$ \\&\\& $seq$.Any($args$) ? $seq$.Last($args$) : null"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMissingPrototypes",
                "shortDescription": {
                  "text": "missing-prototypes clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmissing-prototypes clang diagnostic. Learn more...",
                  "markdown": "-Wmissing-prototypes clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmissing-prototypes)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithLastOrDefault.3",
                "shortDescription": {
                  "text": "Replace with LastOrDefault($args$)"
                },
                "fullDescription": {
                  "text": "$seq$.Any($args$) ? $seq$.Last($args$) : default($T$)",
                  "markdown": "$seq$.Any($args$) ? $seq$.Last($args$) : default($T$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PossibleInvalidCastExceptionInForeachLoop",
                "shortDescription": {
                  "text": "Possible 'System.InvalidCastException' in foreach loop"
                },
                "fullDescription": {
                  "text": "Possible cast expression of incompatible type Learn more...",
                  "markdown": "Possible cast expression of incompatible type [Learn more...](https://www.jetbrains.com/help/rider/PossibleInvalidCastExceptionInForeachLoop.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithLastOrDefault.1",
                "shortDescription": {
                  "text": "Replace with LastOrDefault($args$)"
                },
                "fullDescription": {
                  "text": "$seq$.Any($args$) ? $seq$.Last($args$) : null",
                  "markdown": "$seq$.Any($args$) ? $seq$.Last($args$) : null"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PossiblyImpureMethodCallOnReadonlyVariable",
                "shortDescription": {
                  "text": "Possibly impure struct method is called on readonly variable: struct value always copied before invocation"
                },
                "fullDescription": {
                  "text": "Possibly impure struct instance method or 'this ref' extension method is called on readonly field/in parameter/ref readonly return: struct value always copied before invocation",
                  "markdown": "Possibly impure struct instance method or 'this ref' extension method is called on readonly field/in parameter/ref readonly return: struct value always copied before invocation"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAndroidCloexecPipe2",
                "shortDescription": {
                  "text": "android-cloexec-pipe2 clang-tidy check"
                },
                "fullDescription": {
                  "text": "android-cloexec-pipe2 clang-tidy check. Learn more...",
                  "markdown": "android-cloexec-pipe2 clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/android/cloexec-pipe2.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithLastOrDefault.4",
                "shortDescription": {
                  "text": "Replace with LastOrDefault($args$)"
                },
                "fullDescription": {
                  "text": "$expr$ && $seq$.Any($args$) ? $seq$.Last($args$) : default($T$)",
                  "markdown": "$expr$ \\&\\& $seq$.Any($args$) ? $seq$.Last($args$) : default($T$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftTemplate",
                "shortDescription": {
                  "text": "microsoft-template clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmicrosoft-template clang diagnostic. Learn more...",
                  "markdown": "-Wmicrosoft-template clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-template)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUE4CodingStandardUClassNamingViolationError",
                "shortDescription": {
                  "text": "Inconsistent Unreal Engine UCLASS Naming"
                },
                "fullDescription": {
                  "text": "Class is declared with UCLASS or USTRUCT macro but its name doesn't match the Unreal Engine's coding standard naming style; this will lead to a build error. This inspection includes three rules: classes inherited from AActor must be prefixed by 'A', classes inherited from UObject must be prefixed by 'U', and USTRUCTS must be prefixed by 'F'.",
                  "markdown": "Class is declared with UCLASS or USTRUCT macro but its name doesn't match the Unreal Engine's coding standard naming style; this will lead to a build error. This inspection includes three rules: classes inherited from AActor must be prefixed by 'A', classes inherited from UObject must be prefixed by 'U', and USTRUCTS must be prefixed by 'F'."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unreal Engine",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.BurstTryNotSupported",
                "shortDescription": {
                  "text": "Try statement is not supported"
                },
                "fullDescription": {
                  "text": "Try statement is not supported",
                  "markdown": "Try statement is not supported"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity Burst Compiler Warnings",
                      "index": 34,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantEnumCaseLabelForDefaultSection",
                "shortDescription": {
                  "text": "Redundant 'case' label before default section"
                },
                "fullDescription": {
                  "text": "'case' label statement with enum value in front of default section is redundant",
                  "markdown": "'case' label statement with enum value in front of default section is redundant"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBadParensLineBreaks",
                "shortDescription": {
                  "text": "Incorrect line breaks (around parenthesis)"
                },
                "fullDescription": {
                  "text": "Around parenthesis",
                  "markdown": "Around parenthesis"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyPerformanceTypePromotionInMathFn",
                "shortDescription": {
                  "text": "performance-type-promotion-in-math-fn clang-tidy check"
                },
                "fullDescription": {
                  "text": "performance-type-promotion-in-math-fn clang-tidy check. Learn more...",
                  "markdown": "performance-type-promotion-in-math-fn clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/type-promotion-in-math-fn.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnsequenced",
                "shortDescription": {
                  "text": "unsequenced clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunsequenced clang diagnostic. Learn more...",
                  "markdown": "-Wunsequenced clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunsequenced)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDuplicateDeclSpecifier",
                "shortDescription": {
                  "text": "duplicate-decl-specifier clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wduplicate-decl-specifier clang diagnostic. Learn more...",
                  "markdown": "-Wduplicate-decl-specifier clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wduplicate-decl-specifier)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBadSymbolSpaces",
                "shortDescription": {
                  "text": "Incorrect spacing (around operator symbols)"
                },
                "fullDescription": {
                  "text": "Around operator symbols",
                  "markdown": "Around operator symbols"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesExplicitVirtualFunctions",
                "shortDescription": {
                  "text": "cppcoreguidelines-explicit-virtual-functions clang-tidy check"
                },
                "fullDescription": {
                  "text": "cppcoreguidelines-explicit-virtual-functions clang-tidy check. Learn more...",
                  "markdown": "cppcoreguidelines-explicit-virtual-functions clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/explicit-virtual-functions.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithOfType.Any.2",
                "shortDescription": {
                  "text": "Replace with OfType<T>().Any() (replace with OfType<T>().Any(..))"
                },
                "fullDescription": {
                  "text": "$seq$.Select($x$ => $x$ as $T$).Any($y$ => $y$ != null && $expr$)",
                  "markdown": "$seq$.Select($x$ =\\> $x$ as $T$).Any($y$ =\\> $y$ != null \\&\\& $expr$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithOfType.Any.1",
                "shortDescription": {
                  "text": "Replace with OfType<T>().Any()"
                },
                "fullDescription": {
                  "text": "$seq$.Select($x$ => $x$ as $T$).Any($y$ => $y$ != null)",
                  "markdown": "$seq$.Select($x$ =\\> $x$ as $T$).Any($y$ =\\> $y$ != null)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PossibleInvalidOperationException",
                "shortDescription": {
                  "text": "Possible 'System.InvalidOperationException'"
                },
                "fullDescription": {
                  "text": "Possible call to method is invalid for the object's current state Learn more...",
                  "markdown": "Possible call to method is invalid for the object's current state [Learn more...](https://www.jetbrains.com/help/rider/PossibleInvalidOperationException.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIndependentClassAttribute",
                "shortDescription": {
                  "text": "IndependentClass-attribute clang diagnostic"
                },
                "fullDescription": {
                  "text": "-WIndependentClass-attribute clang diagnostic. Learn more...",
                  "markdown": "-WIndependentClass-attribute clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wIndependentClass-attribute)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSignedEnumBitfield",
                "shortDescription": {
                  "text": "signed-enum-bitfield clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wsigned-enum-bitfield clang diagnostic. Learn more...",
                  "markdown": "-Wsigned-enum-bitfield clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wsigned-enum-bitfield)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerApiModelingTrustReturnsNonnull",
                "shortDescription": {
                  "text": "apiModeling.TrustReturnsNonnull clang static analyzer check"
                },
                "fullDescription": {
                  "text": "apiModeling.TrustReturnsNonnull clang static analyzer check. Learn more...",
                  "markdown": "apiModeling.TrustReturnsNonnull clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrangeVarKeywordsInDeconstructingDeclaration",
                "shortDescription": {
                  "text": "Join or separate 'var' in deconstruction declarations"
                },
                "fullDescription": {
                  "text": "Use preferred code style to check joined/separate 'var' usages in deconstruction declarations",
                  "markdown": "Use preferred code style to check joined/separate 'var' usages in deconstruction declarations"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.InstantiateWithoutParent",
                "shortDescription": {
                  "text": "Setting 'parent' property immediately after object instantiation is inefficient"
                },
                "fullDescription": {
                  "text": "Instantiating a Unity object and setting the 'parent' property as separate operations is inefficient, as the transform hierarchy is created and immediately replaced. Combine setting the 'parent' property with the call to instantiate the object. Learn more...",
                  "markdown": "Instantiating a Unity object and setting the 'parent' property as separate operations is inefficient, as the transform hierarchy is created and immediately replaced. Combine setting the 'parent' property with the call to instantiate the object. [Learn more...](https://github.com/JetBrains/resharper-unity/wiki/Avoid-using-Object.Instantiate-without-“Transform-Parent”-parameter-and-using-SetParent-later)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticShiftSignOverflow",
                "shortDescription": {
                  "text": "shift-sign-overflow clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wshift-sign-overflow clang diagnostic. Learn more...",
                  "markdown": "-Wshift-sign-overflow clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wshift-sign-overflow)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticShadowFieldInConstructor",
                "shortDescription": {
                  "text": "shadow-field-in-constructor clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wshadow-field-in-constructor clang diagnostic. Learn more...",
                  "markdown": "-Wshadow-field-in-constructor clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wshadow-field-in-constructor)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseObjectOrCollectionInitializer",
                "shortDescription": {
                  "text": "Use object or collection initializer when possible"
                },
                "fullDescription": {
                  "text": "Suggest to replace object sequential assignments to newly created object fields by object initializer Learn more...",
                  "markdown": "Suggest to replace object sequential assignments to newly created object fields by object initializer [Learn more...](https://www.jetbrains.com/help/rider/UseObjectOrCollectionInitializer.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MemberCanBePrivate.Global",
                "shortDescription": {
                  "text": "Member can be made private (non-private accessibility)"
                },
                "fullDescription": {
                  "text": "Member can be made private Learn more...",
                  "markdown": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Global.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppDiscardedPostfixOperatorResult",
                "shortDescription": {
                  "text": "Result of a postfix operator is discarded"
                },
                "fullDescription": {
                  "text": "Result of a postfix operator is discarded. It might be more efficient to use a prefix form of the operator.",
                  "markdown": "Result of a postfix operator is discarded. It might be more efficient to use a prefix form of the operator."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseCollectionCountProperty",
                "shortDescription": {
                  "text": "Use collection's count property"
                },
                "fullDescription": {
                  "text": "Usage of 'Enumerable.Count()' method can be replaced with direct collection count property access Learn more...",
                  "markdown": "Usage of 'Enumerable.Count()' method can be replaced with direct collection count property access [Learn more...](https://www.jetbrains.com/help/rider/UseCollectionCountProperty.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPragmaPack",
                "shortDescription": {
                  "text": "pragma-pack clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wpragma-pack clang diagnostic. Learn more...",
                  "markdown": "-Wpragma-pack clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wpragma-pack)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyGoogleReadabilityTodo",
                "shortDescription": {
                  "text": "google-readability-todo clang-tidy check"
                },
                "fullDescription": {
                  "text": "google-readability-todo clang-tidy check. Learn more...",
                  "markdown": "google-readability-todo clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/readability-todo.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedType",
                "shortDescription": {
                  "text": "deprecated-type clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdeprecated-type clang diagnostic. Learn more...",
                  "markdown": "-Wdeprecated-type clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-type)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppEmptyDeclaration",
                "shortDescription": {
                  "text": "Declaration does not declare anything"
                },
                "fullDescription": {
                  "text": "A declaration does not declare anything",
                  "markdown": "A declaration does not declare anything"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppIncompatiblePointerConversion",
                "shortDescription": {
                  "text": "Implicit conversion to incompatible pointer type"
                },
                "fullDescription": {
                  "text": "Implicit conversion to incompatible pointer type",
                  "markdown": "Implicit conversion to incompatible pointer type"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCoreUninitializedCapturedBlockVariable",
                "shortDescription": {
                  "text": "core.uninitialized.CapturedBlockVariable clang static analyzer check"
                },
                "fullDescription": {
                  "text": "core.uninitialized.CapturedBlockVariable clang static analyzer check. Learn more...",
                  "markdown": "core.uninitialized.CapturedBlockVariable clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DlTagContainsNonDtOrDdElements",
                "shortDescription": {
                  "text": "Elements not allowed in context (<dl> contains elements other than <dt> or <dd> or they are unclosed)"
                },
                "fullDescription": {
                  "text": "$cont1$([)$cont2$(])$cont3$",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticStringConversion",
                "shortDescription": {
                  "text": "string-conversion clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wstring-conversion clang diagnostic. Learn more...",
                  "markdown": "-Wstring-conversion clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wstring-conversion)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NotNullOrRequiredMemberIsNotInitialized",
                "shortDescription": {
                  "text": "Non-nullable or required member is not initialized at constructor exit"
                },
                "fullDescription": {
                  "text": "Non-nullable or required type member is not initialized in any execution path of the constructor",
                  "markdown": "Non-nullable or required type member is not initialized in any execution path of the constructor"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Constraints Violations",
                      "index": 43,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseUnsignedRightShiftOperator",
                "shortDescription": {
                  "text": "Use unsigned right shift operator '>>>'"
                },
                "fullDescription": {
                  "text": "Use unsigned right shift operator '>>>' instead of manual casting and shifting",
                  "markdown": "Use unsigned right shift operator '\\>\\>\\>' instead of manual casting and shifting"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedDeclarations",
                "shortDescription": {
                  "text": "deprecated-declarations clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdeprecated-declarations clang diagnostic. Learn more...",
                  "markdown": "-Wdeprecated-declarations clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-declarations)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnreachableCodeLoopIncrement",
                "shortDescription": {
                  "text": "unreachable-code-loop-increment clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunreachable-code-loop-increment clang diagnostic. Learn more...",
                  "markdown": "-Wunreachable-code-loop-increment clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunreachable-code-loop-increment)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithOfType.Last.1",
                "shortDescription": {
                  "text": "Replace with OfType<T>().Last() (replace with OfType(Of ..)().Last())"
                },
                "fullDescription": {
                  "text": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).Last(Function ($y$) $y$ IsNot Nothing)",
                  "markdown": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).Last(Function ($y$) $y$ IsNot Nothing)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AnnotateCanBeNullTypeMember",
                "shortDescription": {
                  "text": "Declaration nullability inferred (type member is inferred to be nullable)"
                },
                "fullDescription": {
                  "text": "Type member is inferred to be nullable: consider annotating it with [CanBeNull] or [ItemCanBeNull] attribute",
                  "markdown": "Type member is inferred to be nullable: consider annotating it with \\[CanBeNull\\] or \\[ItemCanBeNull\\] attribute"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithOfType.Last.2",
                "shortDescription": {
                  "text": "Replace with OfType<T>().Last() (replace with OfType(Of ..)().Last(..))"
                },
                "fullDescription": {
                  "text": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).Last(Function ($y$) $y$ IsNot Nothing AndAlso $expr$)",
                  "markdown": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).Last(Function ($y$) $y$ IsNot Nothing AndAlso $expr$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OneWayOperationContractWithReturnType",
                "shortDescription": {
                  "text": "One way operations must not return values"
                },
                "fullDescription": {
                  "text": "Methods marked with OperationContract attribute as OneWay operations must not return values",
                  "markdown": "Methods marked with OperationContract attribute as OneWay operations must not return values"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseThrowIfNullMethod",
                "shortDescription": {
                  "text": "Use 'ArgumentNullException.ThrowIfNull'"
                },
                "fullDescription": {
                  "text": "Replace throwing of 'ArgumentNullException' object with an invocation of the helper method",
                  "markdown": "Replace throwing of 'ArgumentNullException' object with an invocation of the helper method"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertToAutoPropertyWhenPossible",
                "shortDescription": {
                  "text": "Convert property into auto-property (when possible)"
                },
                "fullDescription": {
                  "text": "Converts property declaration into C# auto-property syntax",
                  "markdown": "Converts property declaration into C# auto-property syntax"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SimplifyStringInterpolation",
                "shortDescription": {
                  "text": "Use format specifier in interpolated strings"
                },
                "fullDescription": {
                  "text": "'.ToString()' call could be replaced with a format specifier",
                  "markdown": "'.ToString()' call could be replaced with a format specifier"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MoveVariableDeclarationInsideLoopCondition",
                "shortDescription": {
                  "text": "Move variable declaration inside loop condition"
                },
                "fullDescription": {
                  "text": "Declare variable inside a loop condition using pattern matching syntax to reduce its scope and avoid doing a C-style assignment as a side effect",
                  "markdown": "Declare variable inside a loop condition using pattern matching syntax to reduce its scope and avoid doing a C-style assignment as a side effect"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuIncludeNext",
                "shortDescription": {
                  "text": "gnu-include-next clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wgnu-include-next clang diagnostic. Learn more...",
                  "markdown": "-Wgnu-include-next clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-include-next)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReferenceEqualsWithValueType",
                "shortDescription": {
                  "text": "'Object.ReferenceEquals' is always false because it is called with value type"
                },
                "fullDescription": {
                  "text": "'Object.ReferenceEquals' is always false because it is called with value type",
                  "markdown": "'Object.ReferenceEquals' is always false because it is called with value type"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SimplifyConditionalTernaryExpression",
                "shortDescription": {
                  "text": "Simplify conditional ternary expression"
                },
                "fullDescription": {
                  "text": "Ternary expression contains 'true' or 'false' in result branch, for example \r\n            condition ? true : elseBranch\r\n            condition ? thenBranch : true\r\n          Learn more...",
                  "markdown": "Ternary expression contains 'true' or 'false' in result branch, for example\n\n```\n\r\n            condition ? true : elseBranch\r\n            condition ? thenBranch : true\r\n          \n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/SimplifyConditionalTernaryExpression.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticEmbeddedDirective",
                "shortDescription": {
                  "text": "embedded-directive clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wembedded-directive clang diagnostic. Learn more...",
                  "markdown": "-Wembedded-directive clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wembedded-directive)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOptinOsxOSObjectCStyleCast",
                "shortDescription": {
                  "text": "optin.osx.OSObjectCStyleCast clang static analyzer check"
                },
                "fullDescription": {
                  "text": "optin.osx.OSObjectCStyleCast clang static analyzer check. Learn more...",
                  "markdown": "optin.osx.OSObjectCStyleCast clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadAttributeBracketsSpaces",
                "shortDescription": {
                  "text": "Incorrect spacing (around attributes)"
                },
                "fullDescription": {
                  "text": "Around attributes Learn more...",
                  "markdown": "Around attributes [Learn more...](https://www.jetbrains.com/help/rider/BadAttributeBracketsSpaces.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Mvc.AreaNotResolved",
                "shortDescription": {
                  "text": "MVC (unknown area)"
                },
                "fullDescription": {
                  "text": "Unknown ASP.NET MVC Area",
                  "markdown": "Unknown ASP.NET MVC Area"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyPerformanceImplicitConversionInLoop",
                "shortDescription": {
                  "text": "performance-implicit-conversion-in-loop clang-tidy check"
                },
                "fullDescription": {
                  "text": "performance-implicit-conversion-in-loop clang-tidy check. Learn more...",
                  "markdown": "performance-implicit-conversion-in-loop clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/implicit-conversion-in-loop.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Asp.ResolveWarning",
                "shortDescription": {
                  "text": "ASP.NET Resolve Warning"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMalformedWarningCheck",
                "shortDescription": {
                  "text": "malformed-warning-check clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmalformed-warning-check clang diagnostic. Learn more...",
                  "markdown": "-Wmalformed-warning-check clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmalformed-warning-check)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilitySimplifyBooleanExpr",
                "shortDescription": {
                  "text": "readability-simplify-boolean-expr clang-tidy check"
                },
                "fullDescription": {
                  "text": "readability-simplify-boolean-expr clang-tidy check. Learn more...",
                  "markdown": "readability-simplify-boolean-expr clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/simplify-boolean-expr.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MarkupAttributeTypo",
                "shortDescription": {
                  "text": "Typo in markup attribute value"
                },
                "fullDescription": {
                  "text": "Typo in markup attribute value Learn more...",
                  "markdown": "Typo in markup attribute value [Learn more...](https://www.jetbrains.com/help/rider/MarkupAttributeTypo.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spelling Issues",
                      "index": 49,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedAltivecSrcCompat",
                "shortDescription": {
                  "text": "deprecated-altivec-src-compat clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdeprecated-altivec-src-compat clang diagnostic. Learn more...",
                  "markdown": "-Wdeprecated-altivec-src-compat clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-altivec-src-compat)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticExtraSemiStmt",
                "shortDescription": {
                  "text": "extra-semi-stmt clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wextra-semi-stmt clang diagnostic. Learn more...",
                  "markdown": "-Wextra-semi-stmt clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wextra-semi-stmt)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnusedConstVariable",
                "shortDescription": {
                  "text": "unused-const-variable clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunused-const-variable clang diagnostic. Learn more...",
                  "markdown": "-Wunused-const-variable clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-const-variable)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InternalOrPrivateMemberNotDocumented",
                "shortDescription": {
                  "text": "Missing XML comment for private or internal type or member"
                },
                "fullDescription": {
                  "text": "Missing XML comment for private or internal type or member",
                  "markdown": "Missing XML comment for private or internal type or member"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDllAttributeOnRedeclaration",
                "shortDescription": {
                  "text": "dll-attribute-on-redeclaration clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdll-attribute-on-redeclaration clang diagnostic. Learn more...",
                  "markdown": "-Wdll-attribute-on-redeclaration clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdll-attribute-on-redeclaration)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IsExpressionAlwaysFalse",
                "shortDescription": {
                  "text": "The expression of 'is' operator is never of the provided type"
                },
                "fullDescription": {
                  "text": "The expression of 'is' operator is never of the provided type",
                  "markdown": "The expression of 'is' operator is never of the provided type"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUENonExistentInputAction",
                "shortDescription": {
                  "text": "Action with this name does not exist"
                },
                "fullDescription": {
                  "text": "Action with this name does not exist",
                  "markdown": "Action with this name does not exist"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unreal Engine",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticArcPerformSelectorLeaks",
                "shortDescription": {
                  "text": "arc-performSelector-leaks clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Warc-performSelector-leaks clang diagnostic. Learn more...",
                  "markdown": "-Warc-performSelector-leaks clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#warc-performSelector-leaks)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeAvoidCArrays",
                "shortDescription": {
                  "text": "modernize-avoid-c-arrays clang-tidy check"
                },
                "fullDescription": {
                  "text": "modernize-avoid-c-arrays clang-tidy check. Learn more...",
                  "markdown": "modernize-avoid-c-arrays clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/avoid-c-arrays.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBadControlBracesIndent",
                "shortDescription": {
                  "text": "Incorrect indent (around statement braces)"
                },
                "fullDescription": {
                  "text": "Around statement braces",
                  "markdown": "Around statement braces"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAnonEnumEnumConversion",
                "shortDescription": {
                  "text": "anon-enum-enum-conversion clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wanon-enum-enum-conversion clang diagnostic. Learn more...",
                  "markdown": "-Wanon-enum-enum-conversion clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wanon-enum-enum-conversion)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppCoroutineCallResolveError",
                "shortDescription": {
                  "text": "Cannot resolve a required coroutine function"
                },
                "fullDescription": {
                  "text": "A coroutine-related function which is required by the C++20 standard cannot be resolved",
                  "markdown": "A coroutine-related function which is required by the C++20 standard cannot be resolved"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRemoveRedundantBraces",
                "shortDescription": {
                  "text": "Use preferred braces style (remove redundant braces)"
                },
                "fullDescription": {
                  "text": "Braces can be safely removed without changing code semantics",
                  "markdown": "Braces can be safely removed without changing code semantics"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIncompleteUmbrella",
                "shortDescription": {
                  "text": "incomplete-umbrella clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wincomplete-umbrella clang diagnostic. Learn more...",
                  "markdown": "-Wincomplete-umbrella clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wincomplete-umbrella)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppDefaultIsUsedAsIdentifier",
                "shortDescription": {
                  "text": "Keyword 'default' is used as identifier"
                },
                "fullDescription": {
                  "text": "'default' is a keyword in the C++ standard and cannot be used as an identifier",
                  "markdown": "'default' is a keyword in the C++ standard and cannot be used as an identifier"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArgumentsStyleOther",
                "shortDescription": {
                  "text": "Use preferred argument style"
                },
                "fullDescription": {
                  "text": "Prefer using named/positional argument for all expressions except literal, named and anonymous function Learn more...",
                  "markdown": "Prefer using named/positional argument for all expressions except literal, named and anonymous function [Learn more...](https://www.jetbrains.com/help/rider/ArgumentsStyleOther.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantDefaultMemberInitializer",
                "shortDescription": {
                  "text": "Redundant member initializer"
                },
                "fullDescription": {
                  "text": "Initializing field/property/event with default value is redundant Learn more...",
                  "markdown": "Initializing field/property/event with default value is redundant [Learn more...](https://www.jetbrains.com/help/rider/RedundantDefaultMemberInitializer.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.RedundantXamarinFormsClassDeclaration",
                "shortDescription": {
                  "text": "Resource cannot be accessed by class name because of x:Key attribute"
                },
                "fullDescription": {
                  "text": "Resource cannot be accessed by class name because of x:Key attribute",
                  "markdown": "Resource cannot be accessed by class name because of x:Key attribute"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedLabel",
                "shortDescription": {
                  "text": "Unused label"
                },
                "fullDescription": {
                  "text": "Label is never referenced",
                  "markdown": "Label is never referenced"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedCopy",
                "shortDescription": {
                  "text": "deprecated-copy clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdeprecated-copy clang diagnostic. Learn more...",
                  "markdown": "-Wdeprecated-copy clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-copy)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUESourceFileWithoutStandardLibrary",
                "shortDescription": {
                  "text": "C++ standard library headers not found"
                },
                "fullDescription": {
                  "text": "C++ standard library headers cannot be resolved in an Unreal Engine source file. You might need to regenerate the project files.",
                  "markdown": "C++ standard library headers cannot be resolved in an Unreal Engine source file. You might need to regenerate the project files."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unreal Engine",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDelegatingCtorCycles",
                "shortDescription": {
                  "text": "delegating-ctor-cycles clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdelegating-ctor-cycles clang diagnostic. Learn more...",
                  "markdown": "-Wdelegating-ctor-cycles clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdelegating-ctor-cycles)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeMakeShared",
                "shortDescription": {
                  "text": "modernize-make-shared clang-tidy check"
                },
                "fullDescription": {
                  "text": "modernize-make-shared clang-tidy check. Learn more...",
                  "markdown": "modernize-make-shared clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/make-shared.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCompoundTokenSplitBySpace",
                "shortDescription": {
                  "text": "compound-token-split-by-space clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wcompound-token-split-by-space clang diagnostic. Learn more...",
                  "markdown": "-Wcompound-token-split-by-space clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wcompound-token-split-by-space)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAbstractFinalClass",
                "shortDescription": {
                  "text": "abstract-final-class clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wabstract-final-class clang diagnostic. Learn more...",
                  "markdown": "-Wabstract-final-class clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wabstract-final-class)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NestedStringInterpolation",
                "shortDescription": {
                  "text": "Nested string interpolation can be inlined"
                },
                "fullDescription": {
                  "text": "Nested string interpolation can be inlined into containing one",
                  "markdown": "Nested string interpolation can be inlined into containing one"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReadAccessInDoubleCheckLocking",
                "shortDescription": {
                  "text": "Possible incorrect implementation of Double-Check Locking pattern. Read access to checked field."
                },
                "fullDescription": {
                  "text": "Possible incorrect implementation of Double-Check Locking pattern. Read access to checked field. Learn more...",
                  "markdown": "Possible incorrect implementation of Double-Check Locking pattern. Read access to checked field. [Learn more...](https://www.jetbrains.com/help/rider/ReadAccessInDoubleCheckLocking.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertMsc50Cpp",
                "shortDescription": {
                  "text": "cert-msc50-cpp clang-tidy check"
                },
                "fullDescription": {
                  "text": "cert-msc50-cpp clang-tidy check. Learn more...",
                  "markdown": "cert-msc50-cpp clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/msc50-cpp.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticLiteralRange",
                "shortDescription": {
                  "text": "literal-range clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wliteral-range clang diagnostic. Learn more...",
                  "markdown": "-Wliteral-range clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wliteral-range)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TooWideLocalVariableScope",
                "shortDescription": {
                  "text": "Local variable has too wide declaration scope"
                },
                "fullDescription": {
                  "text": "Local variable is declared in a wider scope than the scope of its actual use Learn more...",
                  "markdown": "Local variable is declared in a wider scope than the scope of its actual use [Learn more...](https://www.jetbrains.com/help/rider/TooWideLocalVariableScope.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AspOdsMethodReferenceResolveError",
                "shortDescription": {
                  "text": "Object data source method resolve problem"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.RangeToValueIsNotReachable",
                "shortDescription": {
                  "text": "NUnit. The maximum range value is not reachable with the step value."
                },
                "fullDescription": {
                  "text": "NUnit. The maximum value of [Range] is not reachable, check range and step values. Learn more...",
                  "markdown": "NUnit. The maximum value of \\[Range\\] is not reachable, check range and step values. [Learn more...](https://www.jetbrains.com/help/rider/NUnit.RangeToValueIsNotReachable.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticQualifiedVoidReturnType",
                "shortDescription": {
                  "text": "qualified-void-return-type clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wqualified-void-return-type clang diagnostic. Learn more...",
                  "markdown": "-Wqualified-void-return-type clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wqualified-void-return-type)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticStaticFloatInit",
                "shortDescription": {
                  "text": "static-float-init clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wstatic-float-init clang diagnostic. Learn more...",
                  "markdown": "-Wstatic-float-init clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wstatic-float-init)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Web.MappedPath",
                "shortDescription": {
                  "text": "Mapped path"
                },
                "fullDescription": {
                  "text": "Path is mapped to a different path in project settings",
                  "markdown": "Path is mapped to a different path in project settings"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertErr33C",
                "shortDescription": {
                  "text": "cert-err33-c clang-tidy check"
                },
                "fullDescription": {
                  "text": "cert-err33-c clang-tidy check. Learn more...",
                  "markdown": "cert-err33-c clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/err33-c.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneNarrowingConversions",
                "shortDescription": {
                  "text": "bugprone-narrowing-conversions clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-narrowing-conversions clang-tidy check. Learn more...",
                  "markdown": "bugprone-narrowing-conversions clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/narrowing-conversions.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadBracesSpaces",
                "shortDescription": {
                  "text": "Incorrect spacing (around braces)"
                },
                "fullDescription": {
                  "text": "Around braces Learn more...",
                  "markdown": "Around braces [Learn more...](https://www.jetbrains.com/help/rider/BadBracesSpaces.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertErr60Cpp",
                "shortDescription": {
                  "text": "cert-err60-cpp clang-tidy check"
                },
                "fullDescription": {
                  "text": "cert-err60-cpp clang-tidy check. Learn more...",
                  "markdown": "cert-err60-cpp clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/err60-cpp.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceSliceWithRangeIndexer",
                "shortDescription": {
                  "text": "Replace 'Slice' with range indexer"
                },
                "fullDescription": {
                  "text": "Replace 'Slice' method call with range indexer access",
                  "markdown": "Replace 'Slice' method call with range indexer access"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantPropertyPatternClause",
                "shortDescription": {
                  "text": "Redundant property pattern clause"
                },
                "fullDescription": {
                  "text": "Empty property pattern clause can be omitted",
                  "markdown": "Empty property pattern clause can be omitted"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerUnixCstringBadSizeArg",
                "shortDescription": {
                  "text": "unix.cstring.BadSizeArg clang static analyzer check"
                },
                "fullDescription": {
                  "text": "unix.cstring.BadSizeArg clang static analyzer check. Learn more...",
                  "markdown": "unix.cstring.BadSizeArg clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftMutableReference",
                "shortDescription": {
                  "text": "microsoft-mutable-reference clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmicrosoft-mutable-reference clang diagnostic. Learn more...",
                  "markdown": "-Wmicrosoft-mutable-reference clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-mutable-reference)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticRewriteNotBool",
                "shortDescription": {
                  "text": "rewrite-not-bool clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wrewrite-not-bool clang diagnostic. Learn more...",
                  "markdown": "-Wrewrite-not-bool clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wrewrite-not-bool)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppParameterMayBeConst",
                "shortDescription": {
                  "text": "Parameter can be made const"
                },
                "fullDescription": {
                  "text": "Parameter can be made const",
                  "markdown": "Parameter can be made const"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadParensLineBreaks",
                "shortDescription": {
                  "text": "Incorrect line breaks (around parenthesis)"
                },
                "fullDescription": {
                  "text": "Around parenthesis Learn more...",
                  "markdown": "Around parenthesis [Learn more...](https://www.jetbrains.com/help/rider/BadParensLineBreaks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityFunctionCognitiveComplexity",
                "shortDescription": {
                  "text": "readability-function-cognitive-complexity clang-tidy check"
                },
                "fullDescription": {
                  "text": "readability-function-cognitive-complexity clang-tidy check. Learn more...",
                  "markdown": "readability-function-cognitive-complexity clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/function-cognitive-complexity.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyPortabilityRestrictSystemIncludes",
                "shortDescription": {
                  "text": "portability-restrict-system-includes clang-tidy check"
                },
                "fullDescription": {
                  "text": "portability-restrict-system-includes clang-tidy check. Learn more...",
                  "markdown": "portability-restrict-system-includes clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/portability/restrict-system-includes.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppIncompleteSwitchStatement",
                "shortDescription": {
                  "text": "Possibly erroneous incomplete switch-statement"
                },
                "fullDescription": {
                  "text": "The switch statement doesn't cover the whole range of the enumeration used",
                  "markdown": "The switch statement doesn't cover the whole range of the enumeration used"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AssignmentInConditionalExpression",
                "shortDescription": {
                  "text": "Assignment in conditional expression"
                },
                "fullDescription": {
                  "text": "Assignment in conditional expression; did you mean to use '==' instead of '='? Learn more...",
                  "markdown": "Assignment in conditional expression; did you mean to use '==' instead of '='? [Learn more...](https://www.jetbrains.com/help/rider/AssignmentInConditionalExpression.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerNullabilityNullableReturnedFromNonnull",
                "shortDescription": {
                  "text": "nullability.NullableReturnedFromNonnull clang static analyzer check"
                },
                "fullDescription": {
                  "text": "nullability.NullableReturnedFromNonnull clang static analyzer check. Learn more...",
                  "markdown": "nullability.NullableReturnedFromNonnull clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WebConfig.TypeNotResolved",
                "shortDescription": {
                  "text": "Cannot resolve symbol"
                },
                "fullDescription": {
                  "text": "Cannot resolve symbol",
                  "markdown": "Cannot resolve symbol"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticKeywordCompat",
                "shortDescription": {
                  "text": "keyword-compat clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wkeyword-compat clang diagnostic. Learn more...",
                  "markdown": "-Wkeyword-compat clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wkeyword-compat)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIntegerOverflow",
                "shortDescription": {
                  "text": "integer-overflow clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Winteger-overflow clang diagnostic. Learn more...",
                  "markdown": "-Winteger-overflow clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#winteger-overflow)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDocumentationDeprecatedSync",
                "shortDescription": {
                  "text": "documentation-deprecated-sync clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdocumentation-deprecated-sync clang diagnostic. Learn more...",
                  "markdown": "-Wdocumentation-deprecated-sync clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdocumentation-deprecated-sync)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticExpansionToDefined",
                "shortDescription": {
                  "text": "expansion-to-defined clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wexpansion-to-defined clang diagnostic. Learn more...",
                  "markdown": "-Wexpansion-to-defined clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wexpansion-to-defined)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDllimportStaticFieldDef",
                "shortDescription": {
                  "text": "dllimport-static-field-def clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdllimport-static-field-def clang diagnostic. Learn more...",
                  "markdown": "-Wdllimport-static-field-def clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdllimport-static-field-def)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.ExpectedComponent",
                "shortDescription": {
                  "text": "Expected type derived from 'Component' or 'MonoBehaviour'"
                },
                "fullDescription": {
                  "text": "Expected built in type derived from 'Component', or user type derived from 'MonoBehaviour'",
                  "markdown": "Expected built in type derived from 'Component', or user type derived from 'MonoBehaviour'"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FSharpRedundantNew",
                "shortDescription": {
                  "text": "Redundant 'new' keyword"
                },
                "fullDescription": {
                  "text": "'new' keyword is not required and can be safely removed.",
                  "markdown": "'new' keyword is not required and can be safely removed."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SwapViaDeconstruction",
                "shortDescription": {
                  "text": "Use deconstruction to swap variables"
                },
                "fullDescription": {
                  "text": "Replace multiple assignments with single deconstructing assignment to perform swapping",
                  "markdown": "Replace multiple assignments with single deconstructing assignment to perform swapping"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RemoveConstructorInvocation",
                "shortDescription": {
                  "text": "Remove constructor invocation"
                },
                "fullDescription": {
                  "text": "new List<$T$>($seq$).ToArray()",
                  "markdown": "new List\\<$T$\\>($seq$).ToArray()"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.CompiledBindingMissingDataTypeErrorHighlighting",
                "shortDescription": {
                  "text": "x:DataType not specified for CompiledBinding"
                },
                "fullDescription": {
                  "text": "x:DataType not specified for CompiledBinding",
                  "markdown": "x:DataType not specified for CompiledBinding"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InlineOutVariableDeclaration",
                "shortDescription": {
                  "text": "Inline 'out' variable declaration"
                },
                "fullDescription": {
                  "text": "Replace ordinary variable declaration with inline variable declaration under 'out' argument",
                  "markdown": "Replace ordinary variable declaration with inline variable declaration under 'out' argument"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticExportUsingDirective",
                "shortDescription": {
                  "text": "export-using-directive clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wexport-using-directive clang diagnostic. Learn more...",
                  "markdown": "-Wexport-using-directive clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wexport-using-directive)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertErr34C",
                "shortDescription": {
                  "text": "cert-err34-c clang-tidy check"
                },
                "fullDescription": {
                  "text": "cert-err34-c clang-tidy check. Learn more...",
                  "markdown": "cert-err34-c clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/err34-c.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithSingleCallToFirstOrDefault",
                "shortDescription": {
                  "text": "Replace with single call to FirstOrDefault(..)"
                },
                "fullDescription": {
                  "text": "$seq$.Where(Function ($x$) $expr$).FirstOrDefault()",
                  "markdown": "$seq$.Where(Function ($x$) $expr$).FirstOrDefault()"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp98Cpp11Compat",
                "shortDescription": {
                  "text": "c++98-c++11-compat clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wc++98-c++11-compat clang diagnostic. Learn more...",
                  "markdown": "-Wc++98-c++11-compat clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wc-98-c-11-compat)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VirtualMemberCallInConstructor",
                "shortDescription": {
                  "text": "Virtual member call in constructor"
                },
                "fullDescription": {
                  "text": "When a virtual method is called, the actual type that executes the method is not selected until run time. When a constructor calls a virtual method, it is possible that the constructor for the instance that invokes the method has not executed. See http://msdn2.microsoft.com/en-us/library/ms182331.aspx. Learn more...",
                  "markdown": "When a virtual method is called, the actual type that executes the method is not selected until run time. When a constructor calls a virtual method, it is possible that the constructor for the instance that invokes the method has not executed. See <http://msdn2.microsoft.com/en-us/library/ms182331.aspx>. [Learn more...](https://www.jetbrains.com/help/rider/VirtualMemberCallInConstructor.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnreachableCodeBreak",
                "shortDescription": {
                  "text": "unreachable-code-break clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunreachable-code-break clang diagnostic. Learn more...",
                  "markdown": "-Wunreachable-code-break clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunreachable-code-break)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AddressOfMarshalByRefObject",
                "shortDescription": {
                  "text": "Captured field reference of a marshal-by-reference class may cause a runtime exception"
                },
                "fullDescription": {
                  "text": "Captured field reference of a marshal-by-reference class may cause a runtime exception",
                  "markdown": "Captured field reference of a marshal-by-reference class may cause a runtime exception"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AnnotationRedundancyAtValueType",
                "shortDescription": {
                  "text": "Nullability attribute usage with declaration of void or value type"
                },
                "fullDescription": {
                  "text": "Nullability attribute usage with declaration of void or value type does not affect code analysis Learn more...",
                  "markdown": "Nullability attribute usage with declaration of void or value type does not affect code analysis [Learn more...](https://www.jetbrains.com/help/rider/AnnotationRedundancyAtValueType.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClearAttributeIsObsolete",
                "shortDescription": {
                  "text": "Obsolete tags and attributes (attribute 'clear' is obsolete)"
                },
                "fullDescription": {
                  "text": "<$tag$ ([)clear=\"$val$\"(]) $a1$>",
                  "markdown": "\\<$tag$ (\\[)clear=\"$val$\"(\\]) $a1$\\>"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantExplicitPositionalPropertyDeclaration",
                "shortDescription": {
                  "text": "Redundant explicit positional property declaration"
                },
                "fullDescription": {
                  "text": "Redundant explicit positional property declaration in record type with primary constructor",
                  "markdown": "Redundant explicit positional property declaration in record type with primary constructor"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OperationContractWithoutServiceContract",
                "shortDescription": {
                  "text": "Method is marked as OperationContract but containing type is not marked as ServiceContract"
                },
                "fullDescription": {
                  "text": "Marking method as OperationContract without ServiceContract attribute on the containing type could cause runtime exception",
                  "markdown": "Marking method as OperationContract without ServiceContract attribute on the containing type could cause runtime exception"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadSquareBracketsSpaces",
                "shortDescription": {
                  "text": "Incorrect spacing (around square brackets within a statement)"
                },
                "fullDescription": {
                  "text": "Around square brackets within a statement Learn more...",
                  "markdown": "Around square brackets within a statement [Learn more...](https://www.jetbrains.com/help/rider/BadSquareBracketsSpaces.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedMethodReturnValue.Global",
                "shortDescription": {
                  "text": "Method return value is never used (non-private accessibility)"
                },
                "fullDescription": {
                  "text": "Method return value is never used",
                  "markdown": "Method return value is never used"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInvalidConstexpr",
                "shortDescription": {
                  "text": "invalid-constexpr clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Winvalid-constexpr clang diagnostic. Learn more...",
                  "markdown": "-Winvalid-constexpr clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#winvalid-constexpr)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPreCpp2bCompat",
                "shortDescription": {
                  "text": "pre-c++2b-compat clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wpre-c++2b-compat clang diagnostic. Learn more...",
                  "markdown": "-Wpre-c++2b-compat clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wpre-c-2b-compat)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyObjcMissingHash",
                "shortDescription": {
                  "text": "objc-missing-hash clang-tidy check"
                },
                "fullDescription": {
                  "text": "objc-missing-hash clang-tidy check. Learn more...",
                  "markdown": "objc-missing-hash clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/objc/missing-hash.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClearAttributeIsObsolete.All",
                "shortDescription": {
                  "text": "Obsolete tags and attributes (attribute 'clear' is obsolete)"
                },
                "fullDescription": {
                  "text": "<$tag$ ([)clear=all(]) $a1$>",
                  "markdown": "\\<$tag$ (\\[)clear=all(\\]) $a1$\\>"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMissingDeclarations",
                "shortDescription": {
                  "text": "missing-declarations clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmissing-declarations clang diagnostic. Learn more...",
                  "markdown": "-Wmissing-declarations clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmissing-declarations)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnreachableSwitchArmDueToIntegerAnalysis",
                "shortDescription": {
                  "text": "Heuristically unreachable switch arm according to integer analysis"
                },
                "fullDescription": {
                  "text": "Heuristically unreachable switch arm according to integer analysis Learn more...",
                  "markdown": "Heuristically unreachable switch arm according to integer analysis [Learn more...](https://www.jetbrains.com/help/rider/UnreachableSwitchArmDueToIntegerAnalysis.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EnforceDoWhileStatementBraces",
                "shortDescription": {
                  "text": "Use preferred braces style (enforce braces in 'do-while' statement)"
                },
                "fullDescription": {
                  "text": "Use braces to separate 'do-while' statement body Learn more...",
                  "markdown": "Use braces to separate 'do-while' statement body [Learn more...](https://www.jetbrains.com/help/rider/EnforceDoWhileStatementBraces.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppWrongSlashesInIncludeDirective",
                "shortDescription": {
                  "text": "Use preferred include directive style (slash symbol used in #include directive does not match code style settings)"
                },
                "fullDescription": {
                  "text": "Slash symbol used in #include directive does not match code style settings",
                  "markdown": "Slash symbol used in #include directive does not match code style settings"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PropertyCanBeMadeInitOnly.Global",
                "shortDescription": {
                  "text": "Property can be made init-only (non-private accessibility)"
                },
                "fullDescription": {
                  "text": "Property setter can be replaced with 'init' accessor to enforce property immutability",
                  "markdown": "Property setter can be replaced with 'init' accessor to enforce property immutability"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseWithExpressionToCopyTuple",
                "shortDescription": {
                  "text": "Use 'with' expression to copy tuple"
                },
                "fullDescription": {
                  "text": "Use 'with' expression to create a modified copy of a tuple",
                  "markdown": "Use 'with' expression to create a modified copy of a tuple"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityRedundantPreprocessor",
                "shortDescription": {
                  "text": "readability-redundant-preprocessor clang-tidy check"
                },
                "fullDescription": {
                  "text": "readability-redundant-preprocessor clang-tidy check. Learn more...",
                  "markdown": "readability-redundant-preprocessor clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/redundant-preprocessor.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuggestVarOrType_SimpleTypes",
                "shortDescription": {
                  "text": "Use preferred 'var' style (when type is simple)"
                },
                "fullDescription": {
                  "text": "Convert if simple type (not an array and does not have generic parameters) Learn more...",
                  "markdown": "Convert if simple type (not an array and does not have generic parameters) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_SimpleTypes.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantQualifier",
                "shortDescription": {
                  "text": "Redundant qualifier"
                },
                "fullDescription": {
                  "text": "Qualifier is redundant",
                  "markdown": "Qualifier is redundant"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.RedundantGridSpan",
                "shortDescription": {
                  "text": "Single-cell grid column/row span is redundant"
                },
                "fullDescription": {
                  "text": "Single-cell grid column/row span is redundant",
                  "markdown": "Single-cell grid column/row span is redundant"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerDeadcodeDeadStores",
                "shortDescription": {
                  "text": "deadcode.DeadStores clang static analyzer check"
                },
                "fullDescription": {
                  "text": "deadcode.DeadStores clang static analyzer check. Learn more...",
                  "markdown": "deadcode.DeadStores clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppEnforceOverridingFunctionStyle",
                "shortDescription": {
                  "text": "Use preferred overriding function style (enforce overriding function style)"
                },
                "fullDescription": {
                  "text": "Enforce the 'virtual' and 'override' specifiers on overriding functions",
                  "markdown": "Enforce the 'virtual' and 'override' specifiers on overriding functions"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCtadMaybeUnsupported",
                "shortDescription": {
                  "text": "ctad-maybe-unsupported clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wctad-maybe-unsupported clang diagnostic. Learn more...",
                  "markdown": "-Wctad-maybe-unsupported clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wctad-maybe-unsupported)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInlineAsm",
                "shortDescription": {
                  "text": "inline-asm clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Winline-asm clang diagnostic. Learn more...",
                  "markdown": "-Winline-asm clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#winline-asm)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AnnotateNotNullParameter",
                "shortDescription": {
                  "text": "Declaration nullability inferred (parameter is inferred to be not null)"
                },
                "fullDescription": {
                  "text": "Parameter is inferred always not to be null: consider annotating it with [NotNull] or [ItemNotNull] attribute",
                  "markdown": "Parameter is inferred always not to be null: consider annotating it with \\[NotNull\\] or \\[ItemNotNull\\] attribute"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrangeThisQualifier",
                "shortDescription": {
                  "text": "Add/remove 'this.' qualifier"
                },
                "fullDescription": {
                  "text": "'this.' qualifier can be safely added/removed without changing code semantics Learn more...",
                  "markdown": "'this.' qualifier can be safely added/removed without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeThisQualifier.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticArcRetainCycles",
                "shortDescription": {
                  "text": "arc-retain-cycles clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Warc-retain-cycles clang diagnostic. Learn more...",
                  "markdown": "-Warc-retain-cycles clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#warc-retain-cycles)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppNewDeleteOperators",
                "shortDescription": {
                  "text": "hicpp-new-delete-operators clang-tidy check"
                },
                "fullDescription": {
                  "text": "hicpp-new-delete-operators clang-tidy check. Learn more...",
                  "markdown": "hicpp-new-delete-operators clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/new-delete-operators.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeUseUsing",
                "shortDescription": {
                  "text": "modernize-use-using clang-tidy check"
                },
                "fullDescription": {
                  "text": "modernize-use-using clang-tidy check. Learn more...",
                  "markdown": "modernize-use-using clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-using.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneTooSmallLoopVariable",
                "shortDescription": {
                  "text": "bugprone-too-small-loop-variable clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-too-small-loop-variable clang-tidy check. Learn more...",
                  "markdown": "bugprone-too-small-loop-variable clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/too-small-loop-variable.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyMiscNonPrivateMemberVariablesInClasses",
                "shortDescription": {
                  "text": "misc-non-private-member-variables-in-classes clang-tidy check"
                },
                "fullDescription": {
                  "text": "misc-non-private-member-variables-in-classes clang-tidy check. Learn more...",
                  "markdown": "misc-non-private-member-variables-in-classes clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/non-private-member-variables-in-classes.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticXorUsedAsPow",
                "shortDescription": {
                  "text": "xor-used-as-pow clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wxor-used-as-pow clang diagnostic. Learn more...",
                  "markdown": "-Wxor-used-as-pow clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wxor-used-as-pow)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityIdentifierLength",
                "shortDescription": {
                  "text": "readability-identifier-length clang-tidy check"
                },
                "fullDescription": {
                  "text": "readability-identifier-length clang-tidy check. Learn more...",
                  "markdown": "readability-identifier-length clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/identifier-length.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftRedeclareStatic",
                "shortDescription": {
                  "text": "microsoft-redeclare-static clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmicrosoft-redeclare-static clang diagnostic. Learn more...",
                  "markdown": "-Wmicrosoft-redeclare-static clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-redeclare-static)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNonPowerOfTwoAlignment",
                "shortDescription": {
                  "text": "non-power-of-two-alignment clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wnon-power-of-two-alignment clang diagnostic. Learn more...",
                  "markdown": "-Wnon-power-of-two-alignment clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wnon-power-of-two-alignment)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantExplicitArraySize",
                "shortDescription": {
                  "text": "Redundant explicit size specification in array creation"
                },
                "fullDescription": {
                  "text": "When array initializer has the same number of elements as specified in size expression, explicit size specification is redundant Learn more...",
                  "markdown": "When array initializer has the same number of elements as specified in size expression, explicit size specification is redundant [Learn more...](https://www.jetbrains.com/help/rider/RedundantExplicitArraySize.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDoublePromotion",
                "shortDescription": {
                  "text": "double-promotion clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdouble-promotion clang diagnostic. Learn more...",
                  "markdown": "-Wdouble-promotion clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdouble-promotion)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FunctionComplexityOverflow",
                "shortDescription": {
                  "text": "Function body is too complex to analyze"
                },
                "fullDescription": {
                  "text": "Function body is too complex to analyze, consider decomposing it or reducing number of variables",
                  "markdown": "Function body is too complex to analyze, consider decomposing it or reducing number of variables"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticReorderCtor",
                "shortDescription": {
                  "text": "reorder-ctor clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wreorder-ctor clang diagnostic. Learn more...",
                  "markdown": "-Wreorder-ctor clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wreorder-ctor)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PolymorphicFieldLikeEventInvocation",
                "shortDescription": {
                  "text": "Invocation of polymorphic field-like event"
                },
                "fullDescription": {
                  "text": "Invocation of 'virtual' or 'override' field-like event leads to unpredictable result because the invocation list is not virtual Learn more...",
                  "markdown": "Invocation of 'virtual' or 'override' field-like event leads to unpredictable result because the invocation list is not virtual [Learn more...](https://www.jetbrains.com/help/rider/PolymorphicFieldLikeEventInvocation.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBadEmptyBracesLineBreaks",
                "shortDescription": {
                  "text": "Incorrect line breaks (around empty braces)"
                },
                "fullDescription": {
                  "text": "Around empty braces",
                  "markdown": "Around empty braces"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerApiModelingLlvmCastValue",
                "shortDescription": {
                  "text": "apiModeling.llvm.CastValue clang static analyzer check"
                },
                "fullDescription": {
                  "text": "apiModeling.llvm.CastValue clang static analyzer check. Learn more...",
                  "markdown": "apiModeling.llvm.CastValue clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantCast",
                "shortDescription": {
                  "text": "Redundant cast"
                },
                "fullDescription": {
                  "text": "Type cast can be safely removed Learn more...",
                  "markdown": "Type cast can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantCast.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringLiteralAsInterpolationArgument",
                "shortDescription": {
                  "text": "String literal can be inlined"
                },
                "fullDescription": {
                  "text": "String literal can be inlined into interpolation",
                  "markdown": "String literal can be inlined into interpolation"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedStaticAnalyzerFlag",
                "shortDescription": {
                  "text": "deprecated-static-analyzer-flag clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdeprecated-static-analyzer-flag clang diagnostic. Learn more...",
                  "markdown": "-Wdeprecated-static-analyzer-flag clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-static-analyzer-flag)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerFuchsiaHandleChecker",
                "shortDescription": {
                  "text": "fuchsia.HandleChecker clang static analyzer check"
                },
                "fullDescription": {
                  "text": "fuchsia.HandleChecker clang static analyzer check. Learn more...",
                  "markdown": "fuchsia.HandleChecker clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticShadowField",
                "shortDescription": {
                  "text": "shadow-field clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wshadow-field clang diagnostic. Learn more...",
                  "markdown": "-Wshadow-field clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wshadow-field)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantWithExpression",
                "shortDescription": {
                  "text": "Empty 'with' expression is redundant"
                },
                "fullDescription": {
                  "text": "Empty 'with' expression applied to newly created object instance results in unnecessary clone creation",
                  "markdown": "Empty 'with' expression applied to newly created object instance results in unnecessary clone creation"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticExtraQualification",
                "shortDescription": {
                  "text": "extra-qualification clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wextra-qualification clang diagnostic. Learn more...",
                  "markdown": "-Wextra-qualification clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wextra-qualification)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAutoStorageClass",
                "shortDescription": {
                  "text": "auto-storage-class clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wauto-storage-class clang diagnostic. Learn more...",
                  "markdown": "-Wauto-storage-class clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wauto-storage-class)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppNoexceptMove",
                "shortDescription": {
                  "text": "hicpp-noexcept-move clang-tidy check"
                },
                "fullDescription": {
                  "text": "hicpp-noexcept-move clang-tidy check. Learn more...",
                  "markdown": "hicpp-noexcept-move clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/noexcept-move.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertToVbAutoPropertyWhenPossible",
                "shortDescription": {
                  "text": "Convert property to auto-property when possible"
                },
                "fullDescription": {
                  "text": "Converts property declaration to VB.NET auto-property syntax.",
                  "markdown": "Converts property declaration to VB.NET auto-property syntax."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WebConfig.UnusedElementDueToConfigSourceAttribute",
                "shortDescription": {
                  "text": "Redundant element or attribute because of 'configSource' attribute"
                },
                "fullDescription": {
                  "text": "Element or attribute is not applied because of 'configSource' attribute and can be safely removed",
                  "markdown": "Element or attribute is not applied because of 'configSource' attribute and can be safely removed"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadExpressionBracesLineBreaks",
                "shortDescription": {
                  "text": "Incorrect line breaks (around expression braces)"
                },
                "fullDescription": {
                  "text": "Around expression braces Learn more...",
                  "markdown": "Around expression braces [Learn more...](https://www.jetbrains.com/help/rider/BadExpressionBracesLineBreaks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIncompleteModule",
                "shortDescription": {
                  "text": "incomplete-module clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wincomplete-module clang diagnostic. Learn more...",
                  "markdown": "-Wincomplete-module clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wincomplete-module)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppMissingKeywordThrow",
                "shortDescription": {
                  "text": "May be missing keyword 'throw'"
                },
                "fullDescription": {
                  "text": "Object of exception type is created, but is not thrown",
                  "markdown": "Object of exception type is created, but is not thrown"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppNonInlineFunctionDefinitionInHeaderFile",
                "shortDescription": {
                  "text": "Non-inline function definition in a header file"
                },
                "fullDescription": {
                  "text": "A function definition in a header file that will cause multiple definition linkage error",
                  "markdown": "A function definition in a header file that will cause multiple definition linkage error"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedMemberHierarchy.Local",
                "shortDescription": {
                  "text": "Type member is only used in overrides (private accessibility)"
                },
                "fullDescription": {
                  "text": "Type member is never used from outside of implementation hierarchy, it is only accessed from overrides through base call",
                  "markdown": "Type member is never used from outside of implementation hierarchy, it is only accessed from overrides through base call"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuStaticFloatInit",
                "shortDescription": {
                  "text": "gnu-static-float-init clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wgnu-static-float-init clang diagnostic. Learn more...",
                  "markdown": "-Wgnu-static-float-init clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-static-float-init)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAssume",
                "shortDescription": {
                  "text": "assume clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wassume clang diagnostic. Learn more...",
                  "markdown": "-Wassume clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wassume)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp98CompatUnnamedTypeTemplateArgs",
                "shortDescription": {
                  "text": "c++98-compat-unnamed-type-template-args clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wc++98-compat-unnamed-type-template-args clang diagnostic. Learn more...",
                  "markdown": "-Wc++98-compat-unnamed-type-template-args clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wc-98-compat-unnamed-type-template-args)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1717",
                "shortDescription": {
                  "text": "Assignment made to same variable"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://msdn.microsoft.com/en-us/library/a1kzfw0z.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1711",
                "shortDescription": {
                  "text": "XML comment has a 'typeparam' tag for 'TypeParameter', but there is no type parameter by that name"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1712",
                "shortDescription": {
                  "text": "Type parameter has no matching typeparam tag in the XML comment"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://msdn.microsoft.com/en-us/library/t8zca749.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithSimpleAssignment.False",
                "shortDescription": {
                  "text": "Replace with simple assignment"
                },
                "fullDescription": {
                  "text": "$bool1$ &= false",
                  "markdown": "$bool1$ \\&= false"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAndroidComparisonInTempFailureRetry",
                "shortDescription": {
                  "text": "android-comparison-in-temp-failure-retry clang-tidy check"
                },
                "fullDescription": {
                  "text": "android-comparison-in-temp-failure-retry clang-tidy check. Learn more...",
                  "markdown": "android-comparison-in-temp-failure-retry clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/android/comparison-in-temp-failure-retry.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1710",
                "shortDescription": {
                  "text": "Duplicate typeparam tag in XML comment"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://msdn.microsoft.com/en-us/library/k5ya7w1x.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp20CompatPedantic",
                "shortDescription": {
                  "text": "c++20-compat-pedantic clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wc++20-compat-pedantic clang diagnostic. Learn more...",
                  "markdown": "-Wc++20-compat-pedantic clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wc-20-compat-pedantic)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClassWithVirtualMembersNeverInherited.Local",
                "shortDescription": {
                  "text": "Class with virtual (overridable) members never inherited (private accessibility)"
                },
                "fullDescription": {
                  "text": "Non-abstract class has virtual (overridable) members but has no inheritors",
                  "markdown": "Non-abstract class has virtual (overridable) members but has no inheritors"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertOop57Cpp",
                "shortDescription": {
                  "text": "cert-oop57-cpp clang-tidy check"
                },
                "fullDescription": {
                  "text": "cert-oop57-cpp clang-tidy check. Learn more...",
                  "markdown": "cert-oop57-cpp clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/oop57-cpp.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.TestCaseResultPropertyIsObsolete",
                "shortDescription": {
                  "text": "NUnit. Test case Result property is obsolete."
                },
                "fullDescription": {
                  "text": "NUnit. Test case Result property is obsolete since NUnit 2.6. Learn more...",
                  "markdown": "NUnit. Test case Result property is obsolete since NUnit 2.6. [Learn more...](https://www.jetbrains.com/help/rider/NUnit.TestCaseResultPropertyIsObsolete.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertDcl21Cpp",
                "shortDescription": {
                  "text": "cert-dcl21-cpp clang-tidy check"
                },
                "fullDescription": {
                  "text": "cert-dcl21-cpp clang-tidy check. Learn more...",
                  "markdown": "cert-dcl21-cpp clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/dcl21-cpp.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUE4ProbableMemoryIssuesWithUObjectsInContainer",
                "shortDescription": {
                  "text": "Objects stored in non-uproperty member can be destroyed during garbage collection, resulting in stale pointers"
                },
                "fullDescription": {
                  "text": "Objects stored in non-uproperty member can be destroyed during garbage collection, resulting in stale pointers",
                  "markdown": "Objects stored in non-uproperty member can be destroyed during garbage collection, resulting in stale pointers"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unreal Engine",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppPrintfRiskyFormat",
                "shortDescription": {
                  "text": "Possibly invalid printf format specifier"
                },
                "fullDescription": {
                  "text": "Format string contains a potential error",
                  "markdown": "Format string contains a potential error"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UsePositionalDeconstructionPattern",
                "shortDescription": {
                  "text": "Use positional deconstruction pattern"
                },
                "fullDescription": {
                  "text": "Replace property pattern member(s) of recursive pattern with positional deconstruction patterns",
                  "markdown": "Replace property pattern member(s) of recursive pattern with positional deconstruction patterns"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.SharedStaticUnmanagedType",
                "shortDescription": {
                  "text": "Shared static type parameter requires the unmanaged constraint"
                },
                "fullDescription": {
                  "text": "Shared static type parameter requires the unmanaged constraint",
                  "markdown": "Shared static type parameter requires the unmanaged constraint"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity Burst Compiler Warnings",
                      "index": 34,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPadded",
                "shortDescription": {
                  "text": "padded clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wpadded clang diagnostic. Learn more...",
                  "markdown": "-Wpadded clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wpadded)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantLogicalConditionalExpressionOperand",
                "shortDescription": {
                  "text": "Redundant operand in logical conditional expression"
                },
                "fullDescription": {
                  "text": "Redundant operand in logical conditional expression, for example \r\n  expr || false\r\n  expr && true\r\n Learn more...",
                  "markdown": "Redundant operand in logical conditional expression, for example\n\n```\n\r\n  expr || false\r\n  expr && true\r\n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/RedundantLogicalConditionalExpressionOperand.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticLanguageExtensionToken",
                "shortDescription": {
                  "text": "language-extension-token clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wlanguage-extension-token clang diagnostic. Learn more...",
                  "markdown": "-Wlanguage-extension-token clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wlanguage-extension-token)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonAtomicCompoundOperator",
                "shortDescription": {
                  "text": "Suspicious 'volatile' field usage: compound operation is not atomic. 'Interlocked' class can be used instead."
                },
                "fullDescription": {
                  "text": "Suspicious 'volatile' field usage: compound operation is not atomic. 'Interlocked' class can be used instead.",
                  "markdown": "Suspicious 'volatile' field usage: compound operation is not atomic. 'Interlocked' class can be used instead."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHighlighting",
                "shortDescription": {
                  "text": "Unknown clang-tidy checks"
                },
                "fullDescription": {
                  "text": "Unknown clang-tidy checks.",
                  "markdown": "Unknown clang-tidy checks."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnusedButSetVariable",
                "shortDescription": {
                  "text": "unused-but-set-variable clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunused-but-set-variable clang diagnostic. Learn more...",
                  "markdown": "-Wunused-but-set-variable clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-but-set-variable)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticTautologicalObjcBoolCompare",
                "shortDescription": {
                  "text": "tautological-objc-bool-compare clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wtautological-objc-bool-compare clang diagnostic. Learn more...",
                  "markdown": "-Wtautological-objc-bool-compare clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wtautological-objc-bool-compare)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OverriddenWithSameValue",
                "shortDescription": {
                  "text": "Resource is overridden with identical value"
                },
                "fullDescription": {
                  "text": "Base resource item and the current item have the same value Learn more...",
                  "markdown": "Base resource item and the current item have the same value [Learn more...](https://www.jetbrains.com/help/rider/OverriddenWithSameValue.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Asxx.PathError",
                "shortDescription": {
                  "text": "Path error"
                },
                "fullDescription": {
                  "text": "Path error",
                  "markdown": "Path error"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMisspelledAssumption",
                "shortDescription": {
                  "text": "misspelled-assumption clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmisspelled-assumption clang diagnostic. Learn more...",
                  "markdown": "-Wmisspelled-assumption clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmisspelled-assumption)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeUseTrailingReturnType",
                "shortDescription": {
                  "text": "modernize-use-trailing-return-type clang-tidy check"
                },
                "fullDescription": {
                  "text": "modernize-use-trailing-return-type clang-tidy check. Learn more...",
                  "markdown": "modernize-use-trailing-return-type clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-trailing-return-type.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrangeNamespaceBody",
                "shortDescription": {
                  "text": "Use preferred namespace body style"
                },
                "fullDescription": {
                  "text": "Use file-scoped or block-scoped namespace body Learn more...",
                  "markdown": "Use file-scoped or block-scoped namespace body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeNamespaceBody.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftStaticAssert",
                "shortDescription": {
                  "text": "microsoft-static-assert clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmicrosoft-static-assert clang diagnostic. Learn more...",
                  "markdown": "-Wmicrosoft-static-assert clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-static-assert)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCastQual",
                "shortDescription": {
                  "text": "cast-qual clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wcast-qual clang diagnostic. Learn more...",
                  "markdown": "-Wcast-qual clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wcast-qual)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PropertyCanBeMadeInitOnly.Local",
                "shortDescription": {
                  "text": "Property can be made init-only (private accessibility)"
                },
                "fullDescription": {
                  "text": "Property setter can be replaced with 'init' accessor to enforce property immutability",
                  "markdown": "Property setter can be replaced with 'init' accessor to enforce property immutability"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp11Compat",
                "shortDescription": {
                  "text": "c++11-compat clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wc++11-compat clang diagnostic. Learn more...",
                  "markdown": "-Wc++11-compat clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wc-11-compat)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftEnumValue",
                "shortDescription": {
                  "text": "microsoft-enum-value clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmicrosoft-enum-value clang diagnostic. Learn more...",
                  "markdown": "-Wmicrosoft-enum-value clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-enum-value)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneUnusedRaii",
                "shortDescription": {
                  "text": "bugprone-unused-raii clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-unused-raii clang-tidy check. Learn more...",
                  "markdown": "bugprone-unused-raii clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/unused-raii.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneMisplacedOperatorInStrlenInAlloc",
                "shortDescription": {
                  "text": "bugprone-misplaced-operator-in-strlen-in-alloc clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-misplaced-operator-in-strlen-in-alloc clang-tidy check. Learn more...",
                  "markdown": "bugprone-misplaced-operator-in-strlen-in-alloc clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/misplaced-operator-in-strlen-in-alloc.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticShorten64To32",
                "shortDescription": {
                  "text": "shorten-64-to-32 clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wshorten-64-to-32 clang diagnostic. Learn more...",
                  "markdown": "-Wshorten-64-to-32 clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wshorten-64-to-32)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAndroidCloexecEpollCreate",
                "shortDescription": {
                  "text": "android-cloexec-epoll-create clang-tidy check"
                },
                "fullDescription": {
                  "text": "android-cloexec-epoll-create clang-tidy check. Learn more...",
                  "markdown": "android-cloexec-epoll-create clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/android/cloexec-epoll-create.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Html.EventNotResolved",
                "shortDescription": {
                  "text": "Unknown event"
                },
                "fullDescription": {
                  "text": "Unknown event in HTML and related technologies",
                  "markdown": "Unknown event in HTML and related technologies"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticParenthesesEquality",
                "shortDescription": {
                  "text": "parentheses-equality clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wparentheses-equality clang diagnostic. Learn more...",
                  "markdown": "-Wparentheses-equality clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wparentheses-equality)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUninitializedDependentBaseClass",
                "shortDescription": {
                  "text": "Uninitialized dependent base class"
                },
                "fullDescription": {
                  "text": "Possibly uninitialized dependent base class",
                  "markdown": "Possibly uninitialized dependent base class"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SimplifyLinqExpressionUseMinByAndMaxBy",
                "shortDescription": {
                  "text": "Use 'MinBy' or 'MaxBy' instead of ordering and taking 'First' or 'Last'"
                },
                "fullDescription": {
                  "text": "Replace ordering and taking 'First' or 'Last' with 'MinBy' or 'MaxBy' invocation",
                  "markdown": "Replace ordering and taking 'First' or 'Last' with 'MinBy' or 'MaxBy' invocation"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUseAutoForNumeric",
                "shortDescription": {
                  "text": "Use preferred 'auto' style (numeric type can be replaced with auto)"
                },
                "fullDescription": {
                  "text": "A numeric type can be replaced with 'auto'",
                  "markdown": "A numeric type can be replaced with 'auto'"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithSingleAssignment.1",
                "shortDescription": {
                  "text": "Replace with single assignment"
                },
                "fullDescription": {
                  "text": "Dim $x$ = False If($bool1$) Then $x$ = True",
                  "markdown": "Dim $x$ = False If($bool1$) Then $x$ = True"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithSingleAssignment.2",
                "shortDescription": {
                  "text": "Replace with single assignment"
                },
                "fullDescription": {
                  "text": "Dim $x$ = True If($bool1$) Then $x$ = False",
                  "markdown": "Dim $x$ = True If($bool1$) Then $x$ = False"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppTypeAliasNeverUsed",
                "shortDescription": {
                  "text": "Type alias is never used"
                },
                "fullDescription": {
                  "text": "A type alias is never used",
                  "markdown": "A type alias is never used"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantReadonlyModifier",
                "shortDescription": {
                  "text": "Redundant 'readonly' modifier"
                },
                "fullDescription": {
                  "text": "Readonly 'redundant' member/accessor modifier in struct declaration",
                  "markdown": "Readonly 'redundant' member/accessor modifier in struct declaration"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSelfAssignField",
                "shortDescription": {
                  "text": "self-assign-field clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wself-assign-field clang diagnostic. Learn more...",
                  "markdown": "-Wself-assign-field clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wself-assign-field)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticConditionalTypeMismatch",
                "shortDescription": {
                  "text": "conditional-type-mismatch clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wconditional-type-mismatch clang diagnostic. Learn more...",
                  "markdown": "-Wconditional-type-mismatch clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wconditional-type-mismatch)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppPassValueParameterByConstReference",
                "shortDescription": {
                  "text": "Pass value parameters by const reference"
                },
                "fullDescription": {
                  "text": "Parameter of a type that is expensive to copy is passed by value, but can be passed by const reference instead.",
                  "markdown": "Parameter of a type that is expensive to copy is passed by value, but can be passed by const reference instead."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantArrayLowerBoundSpecification",
                "shortDescription": {
                  "text": "Redundant array lower bound specification"
                },
                "fullDescription": {
                  "text": "Array lower bound specification is redundant",
                  "markdown": "Array lower bound specification is redundant"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBoostUseToString",
                "shortDescription": {
                  "text": "boost-use-to-string clang-tidy check"
                },
                "fullDescription": {
                  "text": "boost-use-to-string clang-tidy check. Learn more...",
                  "markdown": "boost-use-to-string clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/boost/use-to-string.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JoinDeclarationAndInitializer",
                "shortDescription": {
                  "text": "Join local variable declaration and assignment"
                },
                "fullDescription": {
                  "text": "Join local variable declaration and assignment Learn more...",
                  "markdown": "Join local variable declaration and assignment [Learn more...](https://www.jetbrains.com/help/rider/JoinDeclarationAndInitializer.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RouteTemplates.SyntaxError",
                "shortDescription": {
                  "text": "Syntax error"
                },
                "fullDescription": {
                  "text": "Syntax error",
                  "markdown": "Syntax error"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneThrowKeywordMissing",
                "shortDescription": {
                  "text": "bugprone-throw-keyword-missing clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-throw-keyword-missing clang-tidy check. Learn more...",
                  "markdown": "bugprone-throw-keyword-missing clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/throw-keyword-missing.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SwitchStatementMissingSomeEnumCasesNoDefault",
                "shortDescription": {
                  "text": "Some values of the enum are not processed inside 'switch' statement"
                },
                "fullDescription": {
                  "text": "Some values of the enum are not processed inside 'switch' statement Learn more...",
                  "markdown": "Some values of the enum are not processed inside 'switch' statement [Learn more...](https://www.jetbrains.com/help/rider/SwitchStatementMissingSomeEnumCasesNoDefault.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantPatternParentheses",
                "shortDescription": {
                  "text": "Remove redundant pattern-matching parentheses"
                },
                "fullDescription": {
                  "text": "Parentheses surrounding a pattern are redundant if they do not change precedence of `or`-/`and`-patterns",
                  "markdown": "Parentheses surrounding a pattern are redundant if they do not change precedence of \\`or\\`-/\\`and\\`-patterns"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertToPrimaryConstructor",
                "shortDescription": {
                  "text": "Convert record constructor into primary constructor"
                },
                "fullDescription": {
                  "text": "Replace ordinary record constructor with primary constructor",
                  "markdown": "Replace ordinary record constructor with primary constructor"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyZirconTemporaryObjects",
                "shortDescription": {
                  "text": "zircon-temporary-objects clang-tidy check"
                },
                "fullDescription": {
                  "text": "zircon-temporary-objects clang-tidy check. Learn more...",
                  "markdown": "zircon-temporary-objects clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/zircon/temporary-objects.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGlobalConstructors",
                "shortDescription": {
                  "text": "global-constructors clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wglobal-constructors clang diagnostic. Learn more...",
                  "markdown": "-Wglobal-constructors clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wglobal-constructors)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantLinebreak",
                "shortDescription": {
                  "text": "Incorrect line breaks (line break is redundant elsewhere)"
                },
                "fullDescription": {
                  "text": "Line break is redundant elsewhere",
                  "markdown": "Line break is redundant elsewhere"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantTypenameKeyword",
                "shortDescription": {
                  "text": "Redundant 'typename' keyword"
                },
                "fullDescription": {
                  "text": "Redundant 'typename' keyword",
                  "markdown": "Redundant 'typename' keyword"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppDoxygenSyntaxError",
                "shortDescription": {
                  "text": "Syntax error in doxygen comment"
                },
                "fullDescription": {
                  "text": "Syntax error in a doxygen comment",
                  "markdown": "Syntax error in a doxygen comment"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UselessComparisonToIntegralConstant",
                "shortDescription": {
                  "text": "Comparison to integral constant is useless"
                },
                "fullDescription": {
                  "text": "Comparison to integral constant is useless; the constant is outside the range of the target type",
                  "markdown": "Comparison to integral constant is useless; the constant is outside the range of the target type"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantElseKeyword",
                "shortDescription": {
                  "text": "Redundant 'else' keyword"
                },
                "fullDescription": {
                  "text": "Redundant 'else' keyword",
                  "markdown": "Redundant 'else' keyword"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesSpecialMemberFunctions",
                "shortDescription": {
                  "text": "cppcoreguidelines-special-member-functions clang-tidy check"
                },
                "fullDescription": {
                  "text": "cppcoreguidelines-special-member-functions clang-tidy check. Learn more...",
                  "markdown": "cppcoreguidelines-special-member-functions clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/special-member-functions.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyConstructor",
                "shortDescription": {
                  "text": "Empty constructor"
                },
                "fullDescription": {
                  "text": "Empty public constructor declaration with no parameters is redundant. The compiler generates the same by default. Learn more...",
                  "markdown": "Empty public constructor declaration with no parameters is redundant. The compiler generates the same by default. [Learn more...](https://www.jetbrains.com/help/rider/EmptyConstructor.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringIndexOfIsCultureSpecific.2",
                "shortDescription": {
                  "text": "String.IndexOf is culture-specific (string.IndexOf(string, int) is culture-specific)"
                },
                "fullDescription": {
                  "text": "$s$.IndexOf($sarg$, $iarg1$) Learn more...",
                  "markdown": "$s$.IndexOf($sarg$, $iarg1$) [Learn more...](https://www.jetbrains.com/help/rider/StringIndexOfIsCultureSpecific.2.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesSlicing",
                "shortDescription": {
                  "text": "cppcoreguidelines-slicing clang-tidy check"
                },
                "fullDescription": {
                  "text": "cppcoreguidelines-slicing clang-tidy check. Learn more...",
                  "markdown": "cppcoreguidelines-slicing clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/slicing.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringIndexOfIsCultureSpecific.3",
                "shortDescription": {
                  "text": "String.IndexOf is culture-specific (string.IndexOf(string, int) is culture-specific)"
                },
                "fullDescription": {
                  "text": "$s$.IndexOf($sarg$, $iarg1$, $iarg2$) Learn more...",
                  "markdown": "$s$.IndexOf($sarg$, $iarg1$, $iarg2$) [Learn more...](https://www.jetbrains.com/help/rider/StringIndexOfIsCultureSpecific.3.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyMiscMisleadingBidirectional",
                "shortDescription": {
                  "text": "misc-misleading-bidirectional clang-tidy check"
                },
                "fullDescription": {
                  "text": "misc-misleading-bidirectional clang-tidy check. Learn more...",
                  "markdown": "misc-misleading-bidirectional clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/misleading-bidirectional.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringIndexOfIsCultureSpecific.1",
                "shortDescription": {
                  "text": "String.IndexOf is culture-specific (string.IndexOf(string) is culture-specific)"
                },
                "fullDescription": {
                  "text": "$s$.IndexOf($sarg$) Learn more...",
                  "markdown": "$s$.IndexOf($sarg$) [Learn more...](https://www.jetbrains.com/help/rider/StringIndexOfIsCultureSpecific.1.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityConvertMemberFunctionsToStatic",
                "shortDescription": {
                  "text": "readability-convert-member-functions-to-static clang-tidy check"
                },
                "fullDescription": {
                  "text": "readability-convert-member-functions-to-static clang-tidy check. Learn more...",
                  "markdown": "readability-convert-member-functions-to-static clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/convert-member-functions-to-static.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StaticMemberInGenericType",
                "shortDescription": {
                  "text": "Static field or auto-property in generic type"
                },
                "fullDescription": {
                  "text": "Static field or auto-property in generic type may result in state duplication per each generic type instantiation Learn more...",
                  "markdown": "Static field or auto-property in generic type may result in state duplication per each generic type instantiation [Learn more...](https://www.jetbrains.com/help/rider/StaticMemberInGenericType.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticReservedMacroIdentifier",
                "shortDescription": {
                  "text": "reserved-macro-identifier clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wreserved-macro-identifier clang diagnostic. Learn more...",
                  "markdown": "-Wreserved-macro-identifier clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wreserved-macro-identifier)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppVararg",
                "shortDescription": {
                  "text": "hicpp-vararg clang-tidy check"
                },
                "fullDescription": {
                  "text": "hicpp-vararg clang-tidy check. Learn more...",
                  "markdown": "hicpp-vararg clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/vararg.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyMiscDefinitionsInHeaders",
                "shortDescription": {
                  "text": "misc-definitions-in-headers clang-tidy check"
                },
                "fullDescription": {
                  "text": "misc-definitions-in-headers clang-tidy check. Learn more...",
                  "markdown": "misc-definitions-in-headers clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/definitions-in-headers.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantUsingDirective.Global",
                "shortDescription": {
                  "text": "Redundant global using directive"
                },
                "fullDescription": {
                  "text": "Global using directive is not required by the code and can be safely removed",
                  "markdown": "Global using directive is not required by the code and can be safely removed"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseIndexedProperty",
                "shortDescription": {
                  "text": "Use indexed property"
                },
                "fullDescription": {
                  "text": "Use indexed property in COM import types instead of the accessor usage",
                  "markdown": "Use indexed property in COM import types instead of the accessor usage"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyMiscNewDeleteOverloads",
                "shortDescription": {
                  "text": "misc-new-delete-overloads clang-tidy check"
                },
                "fullDescription": {
                  "text": "misc-new-delete-overloads clang-tidy check. Learn more...",
                  "markdown": "misc-new-delete-overloads clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/new-delete-overloads.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedEnumFloatConversion",
                "shortDescription": {
                  "text": "deprecated-enum-float-conversion clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdeprecated-enum-float-conversion clang diagnostic. Learn more...",
                  "markdown": "-Wdeprecated-enum-float-conversion clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-enum-float-conversion)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantComplexityInComparison",
                "shortDescription": {
                  "text": "Expression can be simplified"
                },
                "fullDescription": {
                  "text": "Expression can be simplified",
                  "markdown": "Expression can be simplified"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticRangeLoopBindReference",
                "shortDescription": {
                  "text": "range-loop-bind-reference clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wrange-loop-bind-reference clang diagnostic. Learn more...",
                  "markdown": "-Wrange-loop-bind-reference clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wrange-loop-bind-reference)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.LoadSceneWrongIndex",
                "shortDescription": {
                  "text": "The index is missing in the build settings"
                },
                "fullDescription": {
                  "text": "There is no scene with the same index in the Unity build settings.",
                  "markdown": "There is no scene with the same index in the Unity build settings."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringCompareToIsCultureSpecific",
                "shortDescription": {
                  "text": "String.CompareTo is culture-specific"
                },
                "fullDescription": {
                  "text": "$s1$.CompareTo($s2$) Learn more...",
                  "markdown": "$s1$.CompareTo($s2$) [Learn more...](https://www.jetbrains.com/help/rider/StringCompareToIsCultureSpecific.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCocoaNSAutoreleasePool",
                "shortDescription": {
                  "text": "osx.cocoa.NSAutoreleasePool clang static analyzer check"
                },
                "fullDescription": {
                  "text": "osx.cocoa.NSAutoreleasePool clang static analyzer check. Learn more...",
                  "markdown": "osx.cocoa.NSAutoreleasePool clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EventNeverInvoked",
                "shortDescription": {
                  "text": "Event never invoked"
                },
                "fullDescription": {
                  "text": "Event never invoked. Note that in C# this warning is the compiler warning CS0067 and is not configured here.",
                  "markdown": "Event never invoked. Note that in C# this warning is the compiler warning CS0067 and is not configured here."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticOverridingMethodMismatch",
                "shortDescription": {
                  "text": "overriding-method-mismatch clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Woverriding-method-mismatch clang diagnostic. Learn more...",
                  "markdown": "-Woverriding-method-mismatch clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#woverriding-method-mismatch)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrangeObjectCreationWhenTypeNotEvident",
                "shortDescription": {
                  "text": "Use preferred style of 'new' expression when created type is not evident"
                },
                "fullDescription": {
                  "text": "Add or remove explicit type specification in 'new' expression when type is not evident from the usage",
                  "markdown": "Add or remove explicit type specification in 'new' expression when type is not evident from the usage"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyForStatement",
                "shortDescription": {
                  "text": "Empty 'for' loop is redundant"
                },
                "fullDescription": {
                  "text": "Empty 'for' loop is redundant Learn more...",
                  "markdown": "Empty 'for' loop is redundant [Learn more...](https://www.jetbrains.com/help/rider/EmptyForStatement.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Asp.NotResolved",
                "shortDescription": {
                  "text": "Unknown symbol"
                },
                "fullDescription": {
                  "text": "Unknown symbol in ASP.NET and related technologies",
                  "markdown": "Unknown symbol in ASP.NET and related technologies"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnsupportedFriend",
                "shortDescription": {
                  "text": "unsupported-friend clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunsupported-friend clang diagnostic. Learn more...",
                  "markdown": "-Wunsupported-friend clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunsupported-friend)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneSpuriouslyWakeUpFunctions",
                "shortDescription": {
                  "text": "bugprone-spuriously-wake-up-functions clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-spuriously-wake-up-functions clang-tidy check. Learn more...",
                  "markdown": "bugprone-spuriously-wake-up-functions clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/spuriously-wake-up-functions.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAndroidCloexecAccept4",
                "shortDescription": {
                  "text": "android-cloexec-accept4 clang-tidy check"
                },
                "fullDescription": {
                  "text": "android-cloexec-accept4 clang-tidy check. Learn more...",
                  "markdown": "android-cloexec-accept4 clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/android/cloexec-accept4.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCocoaDealloc",
                "shortDescription": {
                  "text": "osx.cocoa.Dealloc clang static analyzer check"
                },
                "fullDescription": {
                  "text": "osx.cocoa.Dealloc clang static analyzer check. Learn more...",
                  "markdown": "osx.cocoa.Dealloc clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IntDivisionByZero",
                "shortDescription": {
                  "text": "Division by zero in at least one execution path"
                },
                "fullDescription": {
                  "text": "Division by zero in at least one execution path",
                  "markdown": "Division by zero in at least one execution path"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticEnumTooLarge",
                "shortDescription": {
                  "text": "enum-too-large clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wenum-too-large clang diagnostic. Learn more...",
                  "markdown": "-Wenum-too-large clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wenum-too-large)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticProfileInstrUnprofiled",
                "shortDescription": {
                  "text": "profile-instr-unprofiled clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wprofile-instr-unprofiled clang diagnostic. Learn more...",
                  "markdown": "-Wprofile-instr-unprofiled clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wprofile-instr-unprofiled)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCoreUninitializedBranch",
                "shortDescription": {
                  "text": "core.uninitialized.Branch clang static analyzer check"
                },
                "fullDescription": {
                  "text": "core.uninitialized.Branch clang static analyzer check. Learn more...",
                  "markdown": "core.uninitialized.Branch clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCocoaVariadicMethodTypes",
                "shortDescription": {
                  "text": "osx.cocoa.VariadicMethodTypes clang static analyzer check"
                },
                "fullDescription": {
                  "text": "osx.cocoa.VariadicMethodTypes clang static analyzer check. Learn more...",
                  "markdown": "osx.cocoa.VariadicMethodTypes clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyLlvmlibcCalleeNamespace",
                "shortDescription": {
                  "text": "llvmlibc-callee-namespace clang-tidy check"
                },
                "fullDescription": {
                  "text": "llvmlibc-callee-namespace clang-tidy check. Learn more...",
                  "markdown": "llvmlibc-callee-namespace clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/llvmlibc/callee-namespace.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAbseilDurationComparison",
                "shortDescription": {
                  "text": "abseil-duration-comparison clang-tidy check"
                },
                "fullDescription": {
                  "text": "abseil-duration-comparison clang-tidy check. Learn more...",
                  "markdown": "abseil-duration-comparison clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/duration-comparison.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAutoVarId",
                "shortDescription": {
                  "text": "auto-var-id clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wauto-var-id clang diagnostic. Learn more...",
                  "markdown": "-Wauto-var-id clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wauto-var-id)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithSingleOrDefault.4",
                "shortDescription": {
                  "text": "Replace with SingleOrDefault($args$)"
                },
                "fullDescription": {
                  "text": "$expr$ && $seq$.Any($args$) ? $seq$.Single($args$) : default($T$)",
                  "markdown": "$expr$ \\&\\& $seq$.Any($args$) ? $seq$.Single($args$) : default($T$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithSingleOrDefault.2",
                "shortDescription": {
                  "text": "Replace with SingleOrDefault($args$)"
                },
                "fullDescription": {
                  "text": "$expr$ && $seq$.Any($args$) ? $seq$.Single($args$) : null",
                  "markdown": "$expr$ \\&\\& $seq$.Any($args$) ? $seq$.Single($args$) : null"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithSingleOrDefault.3",
                "shortDescription": {
                  "text": "Replace with SingleOrDefault($args$)"
                },
                "fullDescription": {
                  "text": "$seq$.Any($args$) ? $seq$.Single($args$) : default($T$)",
                  "markdown": "$seq$.Any($args$) ? $seq$.Single($args$) : default($T$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticModuleFileExtension",
                "shortDescription": {
                  "text": "module-file-extension clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmodule-file-extension clang diagnostic. Learn more...",
                  "markdown": "-Wmodule-file-extension clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmodule-file-extension)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.BurstLoadingManagedType",
                "shortDescription": {
                  "text": "Loading managed type is not supported"
                },
                "fullDescription": {
                  "text": "Loading managed type is not supported",
                  "markdown": "Loading managed type is not supported"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity Burst Compiler Warnings",
                      "index": 34,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppFunctionSize",
                "shortDescription": {
                  "text": "hicpp-function-size clang-tidy check"
                },
                "fullDescription": {
                  "text": "hicpp-function-size clang-tidy check. Learn more...",
                  "markdown": "hicpp-function-size clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/function-size.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReturnTypeCanBeEnumerable.Local",
                "shortDescription": {
                  "text": "Return type can be IEnumerable<T> (private accessibility)"
                },
                "fullDescription": {
                  "text": "All usages of a method (or read-only property/indexer) use returned value as IEnumerable, but it is declared with more specific type (e.g. List) Learn more...",
                  "markdown": "All usages of a method (or read-only property/indexer) use returned value as IEnumerable, but it is declared with more specific type (e.g. List) [Learn more...](https://www.jetbrains.com/help/rider/ReturnTypeCanBeEnumerable.Local.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnusedMemberFunction",
                "shortDescription": {
                  "text": "unused-member-function clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunused-member-function clang diagnostic. Learn more...",
                  "markdown": "-Wunused-member-function clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-member-function)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticExtraTokens",
                "shortDescription": {
                  "text": "extra-tokens clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wextra-tokens clang diagnostic. Learn more...",
                  "markdown": "-Wextra-tokens clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wextra-tokens)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithSingleOrDefault.1",
                "shortDescription": {
                  "text": "Replace with SingleOrDefault($args$)"
                },
                "fullDescription": {
                  "text": "$seq$.Any($args$) ? $seq$.Single($args$) : null",
                  "markdown": "$seq$.Any($args$) ? $seq$.Single($args$) : null"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StaticProblemInText",
                "shortDescription": {
                  "text": "Cannot access static symbol in text argument"
                },
                "fullDescription": {
                  "text": "Cannot access static symbol in text argument",
                  "markdown": "Cannot access static symbol in text argument"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RouteTemplates.ActionRoutePrefixCanBeExtractedToControllerRoute",
                "shortDescription": {
                  "text": "Action's route prefix can be extracted to controller's route"
                },
                "fullDescription": {
                  "text": "When all controller's actions' route templates have same prefixes, it's possible to extract their common prefix to controller's route template",
                  "markdown": "When all controller's actions' route templates have same prefixes, it's possible to extract their common prefix to controller's route template"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAixCompat",
                "shortDescription": {
                  "text": "aix-compat clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Waix-compat clang diagnostic. Learn more...",
                  "markdown": "-Waix-compat clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#waix-compat)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InterpolatedStringExpressionIsNotIFormattable",
                "shortDescription": {
                  "text": "Formatting is specified, but interpolated string expression is not IFormattable"
                },
                "fullDescription": {
                  "text": "Formatting is specified, but interpolated string expression is not IFormattable",
                  "markdown": "Formatting is specified, but interpolated string expression is not IFormattable"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticOverridingTOption",
                "shortDescription": {
                  "text": "overriding-t-option clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Woverriding-t-option clang diagnostic. Learn more...",
                  "markdown": "-Woverriding-t-option clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#woverriding-t-option)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InvertIf",
                "shortDescription": {
                  "text": "Invert 'if' statement to reduce nesting"
                },
                "fullDescription": {
                  "text": "Invert 'if' statement to reduce nesting Learn more...",
                  "markdown": "Invert 'if' statement to reduce nesting [Learn more...](https://www.jetbrains.com/help/rider/InvertIf.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedField.Compiler",
                "shortDescription": {
                  "text": "Field is never used"
                },
                "fullDescription": {
                  "text": "Field is never used (compiler warning)",
                  "markdown": "Field is never used (compiler warning)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyFuchsiaOverloadedOperator",
                "shortDescription": {
                  "text": "fuchsia-overloaded-operator clang-tidy check"
                },
                "fullDescription": {
                  "text": "fuchsia-overloaded-operator clang-tidy check. Learn more...",
                  "markdown": "fuchsia-overloaded-operator clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/fuchsia/overloaded-operator.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCastOfSelType",
                "shortDescription": {
                  "text": "cast-of-sel-type clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wcast-of-sel-type clang diagnostic. Learn more...",
                  "markdown": "-Wcast-of-sel-type clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wcast-of-sel-type)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ObjectCreationAsStatement",
                "shortDescription": {
                  "text": "Possible unassigned object created by 'new' expression"
                },
                "fullDescription": {
                  "text": "Object created by 'new' expression is possibly not assigned anywhere",
                  "markdown": "Object created by 'new' expression is possibly not assigned anywhere"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IntVariableOverflowInUncheckedContext",
                "shortDescription": {
                  "text": "Possible overflow in unchecked context"
                },
                "fullDescription": {
                  "text": "Possible overflow in unchecked context",
                  "markdown": "Possible overflow in unchecked context"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantNullnessAttributeWithNullableReferenceTypes",
                "shortDescription": {
                  "text": "[NotNull] or [CanBeNull] attribute is applied to a type that already has the same annotation from nullable reference types"
                },
                "fullDescription": {
                  "text": "[NotNull] or [CanBeNull] attribute has no effect because the target type already has the same annotation from nullable reference types",
                  "markdown": "\\[NotNull\\] or \\[CanBeNull\\] attribute has no effect because the target type already has the same annotation from nullable reference types"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.PathError",
                "shortDescription": {
                  "text": "Path error"
                },
                "fullDescription": {
                  "text": "Path error",
                  "markdown": "Path error"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyPerformanceFasterStringFind",
                "shortDescription": {
                  "text": "performance-faster-string-find clang-tidy check"
                },
                "fullDescription": {
                  "text": "performance-faster-string-find clang-tidy check. Learn more...",
                  "markdown": "performance-faster-string-find clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/faster-string-find.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConditionIsAlwaysTrueOrFalse",
                "shortDescription": {
                  "text": "Expression is always 'true' or always 'false'"
                },
                "fullDescription": {
                  "text": "Value of a boolean expression is always the same at this point Learn more...",
                  "markdown": "Value of a boolean expression is always the same at this point [Learn more...](https://www.jetbrains.com/help/rider/ConditionIsAlwaysTrueOrFalse.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticStringPlusInt",
                "shortDescription": {
                  "text": "string-plus-int clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wstring-plus-int clang diagnostic. Learn more...",
                  "markdown": "-Wstring-plus-int clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wstring-plus-int)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConstructorInitializerLoop",
                "shortDescription": {
                  "text": "Possible cyclic constructor call"
                },
                "fullDescription": {
                  "text": "Possible cyclic constructor call Learn more...",
                  "markdown": "Possible cyclic constructor call [Learn more...](https://www.jetbrains.com/help/rider/ConstructorInitializerLoop.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithFirstOrDefault",
                "shortDescription": {
                  "text": "Replace with FirstOrDefault($args$)"
                },
                "fullDescription": {
                  "text": "If ($seq$.Any($args$), $seq$.First($args$), Nothing)",
                  "markdown": "If ($seq$.Any($args$), $seq$.First($args$), Nothing)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUseAssociativeContains",
                "shortDescription": {
                  "text": "'contains' member function can be used"
                },
                "fullDescription": {
                  "text": "'contains' member function can be used",
                  "markdown": "'contains' member function can be used"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMultichar",
                "shortDescription": {
                  "text": "multichar clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmultichar clang diagnostic. Learn more...",
                  "markdown": "-Wmultichar clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmultichar)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppMemberInit",
                "shortDescription": {
                  "text": "hicpp-member-init clang-tidy check"
                },
                "fullDescription": {
                  "text": "hicpp-member-init clang-tidy check. Learn more...",
                  "markdown": "hicpp-member-init clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/member-init.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBSimplifyLinqExpression.9",
                "shortDescription": {
                  "text": "Simplify expression"
                },
                "fullDescription": {
                  "text": "!$seq$.All(Function ($x$) $expr$ Is $expr2$)",
                  "markdown": "!$seq$.All(Function ($x$) $expr$ Is $expr2$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityRedundantAccessSpecifiers",
                "shortDescription": {
                  "text": "readability-redundant-access-specifiers clang-tidy check"
                },
                "fullDescription": {
                  "text": "readability-redundant-access-specifiers clang-tidy check. Learn more...",
                  "markdown": "readability-redundant-access-specifiers clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/redundant-access-specifiers.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInvalidOffsetof",
                "shortDescription": {
                  "text": "invalid-offsetof clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Winvalid-offsetof clang diagnostic. Learn more...",
                  "markdown": "-Winvalid-offsetof clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#winvalid-offsetof)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPrivateExtern",
                "shortDescription": {
                  "text": "private-extern clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wprivate-extern clang diagnostic. Learn more...",
                  "markdown": "-Wprivate-extern clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wprivate-extern)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBSimplifyLinqExpression.1",
                "shortDescription": {
                  "text": "Simplify expression"
                },
                "fullDescription": {
                  "text": "!$seq$.Any(Function ($x$) Not $expr$)",
                  "markdown": "!$seq$.Any(Function ($x$) Not $expr$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBSimplifyLinqExpression.2",
                "shortDescription": {
                  "text": "Simplify expression"
                },
                "fullDescription": {
                  "text": "!$seq$.All(Function ($x$) Not $expr$)",
                  "markdown": "!$seq$.All(Function ($x$) Not $expr$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBSimplifyLinqExpression.3",
                "shortDescription": {
                  "text": "Simplify expression"
                },
                "fullDescription": {
                  "text": "!$seq$.Any(Function ($x$) $expr$ IsNot $expr2$)",
                  "markdown": "!$seq$.Any(Function ($x$) $expr$ IsNot $expr2$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBSimplifyLinqExpression.4",
                "shortDescription": {
                  "text": "Simplify expression"
                },
                "fullDescription": {
                  "text": "!$seq$.Any(Function ($x$) $expr$ <> $expr2$)",
                  "markdown": "!$seq$.Any(Function ($x$) $expr$ \\<\\> $expr2$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBSimplifyLinqExpression.5",
                "shortDescription": {
                  "text": "Simplify expression"
                },
                "fullDescription": {
                  "text": "!$seq$.All(Function ($x$) $expr$ IsNot $expr2$)",
                  "markdown": "!$seq$.All(Function ($x$) $expr$ IsNot $expr2$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticStaticLocalInInline",
                "shortDescription": {
                  "text": "static-local-in-inline clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wstatic-local-in-inline clang diagnostic. Learn more...",
                  "markdown": "-Wstatic-local-in-inline clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wstatic-local-in-inline)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBSimplifyLinqExpression.6",
                "shortDescription": {
                  "text": "Simplify expression"
                },
                "fullDescription": {
                  "text": "!$seq$.All(Function ($x$) $expr$ <> $expr2$)",
                  "markdown": "!$seq$.All(Function ($x$) $expr$ \\<\\> $expr2$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBSimplifyLinqExpression.7",
                "shortDescription": {
                  "text": "Simplify expression"
                },
                "fullDescription": {
                  "text": "!$seq$.Any(Function ($x$) $expr$ Is $expr2$)",
                  "markdown": "!$seq$.Any(Function ($x$) $expr$ Is $expr2$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBSimplifyLinqExpression.8",
                "shortDescription": {
                  "text": "Simplify expression"
                },
                "fullDescription": {
                  "text": "!$seq$.Any(Function ($x$) $expr$ = $expr2$)",
                  "markdown": "!$seq$.Any(Function ($x$) $expr$ = $expr2$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AccessRightsInText",
                "shortDescription": {
                  "text": "Cannot access symbol in text argument"
                },
                "fullDescription": {
                  "text": "Cannot access symbol in text argument",
                  "markdown": "Cannot access symbol in text argument"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticArcNonPodMemaccess",
                "shortDescription": {
                  "text": "arc-non-pod-memaccess clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Warc-non-pod-memaccess clang diagnostic. Learn more...",
                  "markdown": "-Warc-non-pod-memaccess clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#warc-non-pod-memaccess)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp11InlineNamespace",
                "shortDescription": {
                  "text": "c++11-inline-namespace clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wc++11-inline-namespace clang diagnostic. Learn more...",
                  "markdown": "-Wc++11-inline-namespace clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wc-11-inline-namespace)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WebConfig.RedundantAddNamespaceTag",
                "shortDescription": {
                  "text": "Redundant add namespace element"
                },
                "fullDescription": {
                  "text": "Add namespace element is redundant because it duplicates another element of is cleared later and can be safely removed",
                  "markdown": "Add namespace element is redundant because it duplicates another element of is cleared later and can be safely removed"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeMakeUnique",
                "shortDescription": {
                  "text": "modernize-make-unique clang-tidy check"
                },
                "fullDescription": {
                  "text": "modernize-make-unique clang-tidy check. Learn more...",
                  "markdown": "modernize-make-unique clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/make-unique.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppNonExplicitConvertingConstructor",
                "shortDescription": {
                  "text": "Non-explicit converting constructor"
                },
                "fullDescription": {
                  "text": "Non-explicit converting constructor",
                  "markdown": "Non-explicit converting constructor"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyGoogleBuildUsingNamespace",
                "shortDescription": {
                  "text": "google-build-using-namespace clang-tidy check"
                },
                "fullDescription": {
                  "text": "google-build-using-namespace clang-tidy check. Learn more...",
                  "markdown": "google-build-using-namespace clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/build-using-namespace.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyGoogleRuntimeInt",
                "shortDescription": {
                  "text": "google-runtime-int clang-tidy check"
                },
                "fullDescription": {
                  "text": "google-runtime-int clang-tidy check. Learn more...",
                  "markdown": "google-runtime-int clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/runtime-int.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ContractAnnotationNotParsed",
                "shortDescription": {
                  "text": "Problem in contract annotation definition"
                },
                "fullDescription": {
                  "text": "Input string in ContractAnnotation attribute could not be parsed Learn more...",
                  "markdown": "Input string in ContractAnnotation attribute could not be parsed [Learn more...](https://www.jetbrains.com/help/rider/ContractAnnotationNotParsed.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Constraints Violations",
                      "index": 43,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticTautologicalBitwiseCompare",
                "shortDescription": {
                  "text": "tautological-bitwise-compare clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wtautological-bitwise-compare clang diagnostic. Learn more...",
                  "markdown": "-Wtautological-bitwise-compare clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wtautological-bitwise-compare)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithLastOrDefault",
                "shortDescription": {
                  "text": "Replace with LastOrDefault($args$)"
                },
                "fullDescription": {
                  "text": "If ($seq$.Any($args$), $seq$.Last($args$), Nothing)",
                  "markdown": "If ($seq$.Any($args$), $seq$.Last($args$), Nothing)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WithExpressionInsteadOfInitializer",
                "shortDescription": {
                  "text": "'with' expression is used instead of object initializer"
                },
                "fullDescription": {
                  "text": "'with' expression applied to a newly created object instance results in unnecessary clone creation",
                  "markdown": "'with' expression applied to a newly created object instance results in unnecessary clone creation"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNullPointerSubtraction",
                "shortDescription": {
                  "text": "null-pointer-subtraction clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wnull-pointer-subtraction clang diagnostic. Learn more...",
                  "markdown": "-Wnull-pointer-subtraction clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wnull-pointer-subtraction)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceObjectPatternWithVarPattern",
                "shortDescription": {
                  "text": "Replace object pattern not performing any additional checks with 'var' pattern"
                },
                "fullDescription": {
                  "text": "Replace '{ } x' object pattern not performing any additional checks with 'var x' pattern",
                  "markdown": "Replace '{ } x' object pattern not performing any additional checks with 'var x' pattern"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantExplicitArrayCreation",
                "shortDescription": {
                  "text": "Redundant explicit type in array creation"
                },
                "fullDescription": {
                  "text": "When array type can be inferred from the initializer, you can use an implicitly-typed array Learn more...",
                  "markdown": "When array type can be inferred from the initializer, you can use an implicitly-typed array [Learn more...](https://www.jetbrains.com/help/rider/RedundantExplicitArrayCreation.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SimplifyIIf",
                "shortDescription": {
                  "text": "Simplify 'IIf'"
                },
                "fullDescription": {
                  "text": "'IIf' contains 'True' or 'False' in result branch, for example \r\n                IIf(condition, True, elseBranch)\r\n                IIf(condition, thenBranch : True)",
                  "markdown": "'IIf' contains 'True' or 'False' in result branch, for example\n\n```\n\r\n                IIf(condition, True, elseBranch)\r\n                IIf(condition, thenBranch : True)\r\n              \n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PartialTypeWithSinglePart",
                "shortDescription": {
                  "text": "Redundant 'partial' modifier on type declaration"
                },
                "fullDescription": {
                  "text": "Class is declared as 'partial', but has only one part Learn more...",
                  "markdown": "Class is declared as 'partial', but has only one part [Learn more...](https://www.jetbrains.com/help/rider/PartialTypeWithSinglePart.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnknownPragmas",
                "shortDescription": {
                  "text": "unknown-pragmas clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunknown-pragmas clang diagnostic. Learn more...",
                  "markdown": "-Wunknown-pragmas clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunknown-pragmas)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MemberCanBeInternal",
                "shortDescription": {
                  "text": "Member or type can be made internal (friend)"
                },
                "fullDescription": {
                  "text": "Member or type can be made internal (friend)",
                  "markdown": "Member or type can be made internal (friend)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDisabledMacroExpansion",
                "shortDescription": {
                  "text": "disabled-macro-expansion clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdisabled-macro-expansion clang diagnostic. Learn more...",
                  "markdown": "-Wdisabled-macro-expansion clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdisabled-macro-expansion)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneSharedPtrArrayMismatch",
                "shortDescription": {
                  "text": "bugprone-shared-ptr-array-mismatch clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-shared-ptr-array-mismatch clang-tidy check. Learn more...",
                  "markdown": "bugprone-shared-ptr-array-mismatch clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/shared-ptr-array-mismatch.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppNamedParameter",
                "shortDescription": {
                  "text": "hicpp-named-parameter clang-tidy check"
                },
                "fullDescription": {
                  "text": "hicpp-named-parameter clang-tidy check. Learn more...",
                  "markdown": "hicpp-named-parameter clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/named-parameter.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseFormatSpecifierInFormatString",
                "shortDescription": {
                  "text": "Use format specifier in format strings"
                },
                "fullDescription": {
                  "text": "'.ToString()' call can be replaced with format specifier",
                  "markdown": "'.ToString()' call can be replaced with format specifier"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MissingSpace",
                "shortDescription": {
                  "text": "Incorrect spacing (space is missing elsewhere)"
                },
                "fullDescription": {
                  "text": "Space is missing elsewhere Learn more...",
                  "markdown": "Space is missing elsewhere [Learn more...](https://www.jetbrains.com/help/rider/MissingSpace.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ForeachCanBeConvertedToQueryUsingAnotherGetEnumerator",
                "shortDescription": {
                  "text": "Foreach loop can be converted into LINQ-expression but another 'GetEnumerator' method will be used"
                },
                "fullDescription": {
                  "text": "A 'foreach' ('For Each' for VB.NET) can be converted into a LINQ-expression but another 'GetEnumerator' method will be used",
                  "markdown": "A 'foreach' ('For Each' for VB.NET) can be converted into a LINQ-expression but another 'GetEnumerator' method will be used"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCocoaMissingSuperCall",
                "shortDescription": {
                  "text": "osx.cocoa.MissingSuperCall clang static analyzer check"
                },
                "fullDescription": {
                  "text": "osx.cocoa.MissingSuperCall clang static analyzer check. Learn more...",
                  "markdown": "osx.cocoa.MissingSuperCall clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HeuristicUnreachableCode",
                "shortDescription": {
                  "text": "Heuristically unreachable code"
                },
                "fullDescription": {
                  "text": "Heuristically unreachable code detected",
                  "markdown": "Heuristically unreachable code detected"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantSuppressNullableWarningExpression",
                "shortDescription": {
                  "text": "Redundant nullable warning suppression expression"
                },
                "fullDescription": {
                  "text": "Nullable warning suppression expression does not suppress any warnings and is applied to an already non-nullable operand",
                  "markdown": "Nullable warning suppression expression does not suppress any warnings and is applied to an already non-nullable operand"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneParentVirtualCall",
                "shortDescription": {
                  "text": "bugprone-parent-virtual-call clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-parent-virtual-call clang-tidy check. Learn more...",
                  "markdown": "bugprone-parent-virtual-call clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/parent-virtual-call.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrangeAccessorOwnerBody",
                "shortDescription": {
                  "text": "Use preferred body style (convert into property, indexer, or event with preferred body style)"
                },
                "fullDescription": {
                  "text": "Use expression or block body Learn more...",
                  "markdown": "Use expression or block body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeAccessorOwnerBody.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NotAccessedPositionalProperty.Global",
                "shortDescription": {
                  "text": "Non-accessed positional property (non-private accessibility)"
                },
                "fullDescription": {
                  "text": "Positional property is never accessed for reading Learn more...",
                  "markdown": "Positional property is never accessed for reading [Learn more...](https://www.jetbrains.com/help/rider/NotAccessedPositionalProperty.Global.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIncompatiblePropertyType",
                "shortDescription": {
                  "text": "incompatible-property-type clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wincompatible-property-type clang diagnostic. Learn more...",
                  "markdown": "-Wincompatible-property-type clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wincompatible-property-type)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Mvc.ViewNotResolved",
                "shortDescription": {
                  "text": "MVC (unknown view)"
                },
                "fullDescription": {
                  "text": "Unknown ASP.NET MVC View Learn more...",
                  "markdown": "Unknown ASP.NET MVC View [Learn more...](https://www.jetbrains.com/help/rider/Mvc.ViewNotResolved.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyGoogleReadabilityAvoidUnderscoreInGoogletestName",
                "shortDescription": {
                  "text": "google-readability-avoid-underscore-in-googletest-name clang-tidy check"
                },
                "fullDescription": {
                  "text": "google-readability-avoid-underscore-in-googletest-name clang-tidy check. Learn more...",
                  "markdown": "google-readability-avoid-underscore-in-googletest-name clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/readability-avoid-underscore-in-googletest-name.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCplusplusPureVirtualCall",
                "shortDescription": {
                  "text": "cplusplus.PureVirtualCall clang static analyzer check"
                },
                "fullDescription": {
                  "text": "cplusplus.PureVirtualCall clang static analyzer check. Learn more...",
                  "markdown": "cplusplus.PureVirtualCall clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBadAngleBracketsSpaces",
                "shortDescription": {
                  "text": "Incorrect spacing (around angle brackets)"
                },
                "fullDescription": {
                  "text": "Around angle brackets",
                  "markdown": "Around angle brackets"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBoostFormatMixedArgs",
                "shortDescription": {
                  "text": "Positional and non-positional arguments in the same boost::format call"
                },
                "fullDescription": {
                  "text": "An argument of boost::format should contain either positional (%N%, %|N$...|) or serial (%|...|, %s) arguments, not both.",
                  "markdown": "An argument of boost::format should contain either positional (%N%, %\\|N$...\\|) or serial (%\\|...\\|, %s) arguments, not both."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppEnforceFunctionDeclarationStyle",
                "shortDescription": {
                  "text": "Use preferred declaration style (enforce function declaration style)"
                },
                "fullDescription": {
                  "text": "Enforce usage of the trailing return type or the regular return type syntax",
                  "markdown": "Enforce usage of the trailing return type or the regular return type syntax"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNullConversion",
                "shortDescription": {
                  "text": "null-conversion clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wnull-conversion clang diagnostic. Learn more...",
                  "markdown": "-Wnull-conversion clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wnull-conversion)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPedanticCoreFeatures",
                "shortDescription": {
                  "text": "pedantic-core-features clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wpedantic-core-features clang diagnostic. Learn more...",
                  "markdown": "-Wpedantic-core-features clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wpedantic-core-features)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyPerformanceNoAutomaticMove",
                "shortDescription": {
                  "text": "performance-no-automatic-move clang-tidy check"
                },
                "fullDescription": {
                  "text": "performance-no-automatic-move clang-tidy check. Learn more...",
                  "markdown": "performance-no-automatic-move clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/no-automatic-move.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticVexingParse",
                "shortDescription": {
                  "text": "vexing-parse clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wvexing-parse clang diagnostic. Learn more...",
                  "markdown": "-Wvexing-parse clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wvexing-parse)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBWarnings__BC42505",
                "shortDescription": {
                  "text": "The CallerArgumentExpressionAttribute applied to parameter will have no effect. It is applied with an invalid parameter name."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppMsExtReinterpretCastFromNullptr",
                "shortDescription": {
                  "text": "Casting from nullptr to pointer type with reinterpret_cast is non-standard Microsoft C++ extension"
                },
                "fullDescription": {
                  "text": "Casting from nullptr to pointer type with reinterpret_cast is non-standard Microsoft C++ extension",
                  "markdown": "Casting from nullptr to pointer type with reinterpret_cast is non-standard Microsoft C++ extension"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnreachableSwitchCaseDueToIntegerAnalysis",
                "shortDescription": {
                  "text": "Heuristically unreachable case according to integer analysis"
                },
                "fullDescription": {
                  "text": "Heuristically unreachable case label according to integer analysis Learn more...",
                  "markdown": "Heuristically unreachable case label according to integer analysis [Learn more...](https://www.jetbrains.com/help/rider/UnreachableSwitchCaseDueToIntegerAnalysis.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesInterfacesGlobalInit",
                "shortDescription": {
                  "text": "cppcoreguidelines-interfaces-global-init clang-tidy check"
                },
                "fullDescription": {
                  "text": "cppcoreguidelines-interfaces-global-init clang-tidy check. Learn more...",
                  "markdown": "cppcoreguidelines-interfaces-global-init clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/interfaces-global-init.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBWarnings__BC42504",
                "shortDescription": {
                  "text": "The CallerArgumentExpressionAttribute applied to parameter will have no effect because it's self-referential"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertToConstant.Local",
                "shortDescription": {
                  "text": "Convert local variable or field into constant (private accessibility)"
                },
                "fullDescription": {
                  "text": "Convert local variable or field into constant",
                  "markdown": "Convert local variable or field into constant"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticRangeLoopConstruct",
                "shortDescription": {
                  "text": "range-loop-construct clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wrange-loop-construct clang diagnostic. Learn more...",
                  "markdown": "-Wrange-loop-construct clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wrange-loop-construct)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OtherTagsInsideScript1",
                "shortDescription": {
                  "text": "Script tag errors (other tags inside <script> - possibly unclosed <script>)"
                },
                "fullDescription": {
                  "text": "<([)script(]) $a1$>$c1$",
                  "markdown": "\\<(\\[)script(\\]) $a1$\\>$c1$"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeParameterCanBeVariant",
                "shortDescription": {
                  "text": "Type parameter could be declared as covariant or contravariant"
                },
                "fullDescription": {
                  "text": "Type parameter could be declared as covariant or contravariant",
                  "markdown": "Type parameter could be declared as covariant or contravariant"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OtherTagsInsideScript2",
                "shortDescription": {
                  "text": "Script tag errors (other tags inside <script> - possibly unclosed <script>)"
                },
                "fullDescription": {
                  "text": "<([)script(]) type=\"$v1$\" $a1$>$c1$",
                  "markdown": "\\<(\\[)script(\\]) type=\"$v1$\" $a1$\\>$c1$"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneStringConstructor",
                "shortDescription": {
                  "text": "bugprone-string-constructor clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-string-constructor clang-tidy check. Learn more...",
                  "markdown": "bugprone-string-constructor clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/string-constructor.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedObjcIsaUsage",
                "shortDescription": {
                  "text": "deprecated-objc-isa-usage clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdeprecated-objc-isa-usage clang diagnostic. Learn more...",
                  "markdown": "-Wdeprecated-objc-isa-usage clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-objc-isa-usage)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticArgumentOutsideRange",
                "shortDescription": {
                  "text": "argument-outside-range clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wargument-outside-range clang diagnostic. Learn more...",
                  "markdown": "-Wargument-outside-range clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wargument-outside-range)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertToVbAutoProperty",
                "shortDescription": {
                  "text": "Convert property to auto-property"
                },
                "fullDescription": {
                  "text": "Converts property declaration to VB.NET auto-property syntax.",
                  "markdown": "Converts property declaration to VB.NET auto-property syntax."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertEnv33C",
                "shortDescription": {
                  "text": "cert-env33-c clang-tidy check"
                },
                "fullDescription": {
                  "text": "cert-env33-c clang-tidy check. Learn more...",
                  "markdown": "cert-env33-c clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/env33-c.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeUseEqualsDefault",
                "shortDescription": {
                  "text": "modernize-use-equals-default clang-tidy check"
                },
                "fullDescription": {
                  "text": "modernize-use-equals-default clang-tidy check. Learn more...",
                  "markdown": "modernize-use-equals-default clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-equals-default.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSentinel",
                "shortDescription": {
                  "text": "sentinel clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wsentinel clang diagnostic. Learn more...",
                  "markdown": "-Wsentinel clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wsentinel)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityNamedParameter",
                "shortDescription": {
                  "text": "readability-named-parameter clang-tidy check"
                },
                "fullDescription": {
                  "text": "readability-named-parameter clang-tidy check. Learn more...",
                  "markdown": "readability-named-parameter clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/named-parameter.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertErr58Cpp",
                "shortDescription": {
                  "text": "cert-err58-cpp clang-tidy check"
                },
                "fullDescription": {
                  "text": "cert-err58-cpp clang-tidy check. Learn more...",
                  "markdown": "cert-err58-cpp clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/err58-cpp.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSelfAssign",
                "shortDescription": {
                  "text": "self-assign clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wself-assign clang diagnostic. Learn more...",
                  "markdown": "-Wself-assign clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wself-assign)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MathAbsMethodIsRedundant",
                "shortDescription": {
                  "text": "Math.Abs() argument is always non-negative"
                },
                "fullDescription": {
                  "text": "Math.Abs() method invocation can be removed",
                  "markdown": "Math.Abs() method invocation can be removed"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuStatementExpression",
                "shortDescription": {
                  "text": "gnu-statement-expression clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wgnu-statement-expression clang diagnostic. Learn more...",
                  "markdown": "-Wgnu-statement-expression clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-statement-expression)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClassWithVirtualMembersNeverInherited.Global",
                "shortDescription": {
                  "text": "Class with virtual (overridable) members never inherited (non-private accessibility)"
                },
                "fullDescription": {
                  "text": "Non-abstract class has virtual (overridable) members but has no inheritors",
                  "markdown": "Non-abstract class has virtual (overridable) members but has no inheritors"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUninitializedNonStaticDataMember",
                "shortDescription": {
                  "text": "Non-static data member is uninitialized"
                },
                "fullDescription": {
                  "text": "Non-static data member is uninitialized",
                  "markdown": "Non-static data member is uninitialized"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSuperClassMethodMismatch",
                "shortDescription": {
                  "text": "super-class-method-mismatch clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wsuper-class-method-mismatch clang diagnostic. Learn more...",
                  "markdown": "-Wsuper-class-method-mismatch clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wsuper-class-method-mismatch)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCocoaClassRelease",
                "shortDescription": {
                  "text": "osx.cocoa.ClassRelease clang static analyzer check"
                },
                "fullDescription": {
                  "text": "osx.cocoa.ClassRelease clang static analyzer check. Learn more...",
                  "markdown": "osx.cocoa.ClassRelease clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAbseilDurationFactoryFloat",
                "shortDescription": {
                  "text": "abseil-duration-factory-float clang-tidy check"
                },
                "fullDescription": {
                  "text": "abseil-duration-factory-float clang-tidy check. Learn more...",
                  "markdown": "abseil-duration-factory-float clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/duration-factory-float.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyGoogleReadabilityCasting",
                "shortDescription": {
                  "text": "google-readability-casting clang-tidy check"
                },
                "fullDescription": {
                  "text": "google-readability-casting clang-tidy check. Learn more...",
                  "markdown": "google-readability-casting clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/readability-casting.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithOfType.Where",
                "shortDescription": {
                  "text": "Replace with OfType<T>().Where() (replace with OfType(Of ..)().Where(..))"
                },
                "fullDescription": {
                  "text": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).Where(Function ($y$) $y$ IsNot Nothing AndAlso $expr$)",
                  "markdown": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).Where(Function ($y$) $y$ IsNot Nothing AndAlso $expr$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithSingleCallToFirstOrDefault",
                "shortDescription": {
                  "text": "Replace with single call to FirstOrDefault(..)"
                },
                "fullDescription": {
                  "text": "$seq$.Where($x$ => $expr$).FirstOrDefault()",
                  "markdown": "$seq$.Where($x$ =\\> $expr$).FirstOrDefault()"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDanglingField",
                "shortDescription": {
                  "text": "dangling-field clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdangling-field clang diagnostic. Learn more...",
                  "markdown": "-Wdangling-field clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdangling-field)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__WME006",
                "shortDescription": {
                  "text": "Namespace should be default namespace of this project"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RequiredBaseTypesConflict",
                "shortDescription": {
                  "text": "Required base type conflicting another type"
                },
                "fullDescription": {
                  "text": "Type required by some attribute (marked with BaseTypeRequired) conflicting type from another attribute",
                  "markdown": "Type required by some attribute (marked with BaseTypeRequired) conflicting type from another attribute"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Constraints Violations",
                      "index": 43,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAvailability",
                "shortDescription": {
                  "text": "availability clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wavailability clang diagnostic. Learn more...",
                  "markdown": "-Wavailability clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wavailability)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticConversion",
                "shortDescription": {
                  "text": "conversion clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wconversion clang diagnostic. Learn more...",
                  "markdown": "-Wconversion clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wconversion)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuggestDiscardDeclarationVarStyle",
                "shortDescription": {
                  "text": "Use preferred style for discard declaration"
                },
                "fullDescription": {
                  "text": "Use preferred style for discard declaration Learn more...",
                  "markdown": "Use preferred style for discard declaration [Learn more...](https://www.jetbrains.com/help/rider/SuggestDiscardDeclarationVarStyle.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDocumentationPedantic",
                "shortDescription": {
                  "text": "documentation-pedantic clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdocumentation-pedantic clang diagnostic. Learn more...",
                  "markdown": "-Wdocumentation-pedantic clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdocumentation-pedantic)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIntConversion",
                "shortDescription": {
                  "text": "int-conversion clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wint-conversion clang diagnostic. Learn more...",
                  "markdown": "-Wint-conversion clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wint-conversion)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryWhitespace",
                "shortDescription": {
                  "text": "Unnecessary whitespace at the end of line"
                },
                "fullDescription": {
                  "text": "Remove unnecessary whitespace at the end of line",
                  "markdown": "Remove unnecessary whitespace at the end of line"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedParameter.Local",
                "shortDescription": {
                  "text": "Unused parameter (private accessibility)"
                },
                "fullDescription": {
                  "text": "Parameter is never used",
                  "markdown": "Parameter is never used"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseWithExpressionToCopyRecord",
                "shortDescription": {
                  "text": "Use 'with' expression to copy record"
                },
                "fullDescription": {
                  "text": "Use 'with' expression to create a modified instance of a record",
                  "markdown": "Use 'with' expression to create a modified instance of a record"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EnumUnderlyingTypeIsInt",
                "shortDescription": {
                  "text": "Underlying type of enum is 'int'"
                },
                "fullDescription": {
                  "text": "'int' is default underlying type of enum, so it is not necessary to specify it explicitly Learn more...",
                  "markdown": "'int' is default underlying type of enum, so it is not necessary to specify it explicitly [Learn more...](https://www.jetbrains.com/help/rider/EnumUnderlyingTypeIsInt.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PossibleMistakenArgument",
                "shortDescription": {
                  "text": "Possible mistaken argument"
                },
                "fullDescription": {
                  "text": "$type$.IsInstanceOfType($type$)",
                  "markdown": "$type$.IsInstanceOfType($type$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuDesignator",
                "shortDescription": {
                  "text": "gnu-designator clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wgnu-designator clang diagnostic. Learn more...",
                  "markdown": "-Wgnu-designator clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-designator)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticTautologicalOverlapCompare",
                "shortDescription": {
                  "text": "tautological-overlap-compare clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wtautological-overlap-compare clang diagnostic. Learn more...",
                  "markdown": "-Wtautological-overlap-compare clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wtautological-overlap-compare)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAbseilDurationConversionCast",
                "shortDescription": {
                  "text": "abseil-duration-conversion-cast clang-tidy check"
                },
                "fullDescription": {
                  "text": "abseil-duration-conversion-cast clang-tidy check. Learn more...",
                  "markdown": "abseil-duration-conversion-cast clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/duration-conversion-cast.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertOop54Cpp",
                "shortDescription": {
                  "text": "cert-oop54-cpp clang-tidy check"
                },
                "fullDescription": {
                  "text": "cert-oop54-cpp clang-tidy check. Learn more...",
                  "markdown": "cert-oop54-cpp clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/oop54-cpp.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityMakeMemberFunctionConst",
                "shortDescription": {
                  "text": "readability-make-member-function-const clang-tidy check"
                },
                "fullDescription": {
                  "text": "readability-make-member-function-const clang-tidy check. Learn more...",
                  "markdown": "readability-make-member-function-const clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/make-member-function-const.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticProtocolPropertySynthesisAmbiguity",
                "shortDescription": {
                  "text": "protocol-property-synthesis-ambiguity clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wprotocol-property-synthesis-ambiguity clang diagnostic. Learn more...",
                  "markdown": "-Wprotocol-property-synthesis-ambiguity clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wprotocol-property-synthesis-ambiguity)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnknownAttributes",
                "shortDescription": {
                  "text": "unknown-attributes clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunknown-attributes clang diagnostic. Learn more...",
                  "markdown": "-Wunknown-attributes clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunknown-attributes)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InvalidXmlDocComment",
                "shortDescription": {
                  "text": "Invalid XML documentation comment"
                },
                "fullDescription": {
                  "text": "Invalid XML documentation comment",
                  "markdown": "Invalid XML documentation comment"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8619",
                "shortDescription": {
                  "text": "Nullability of reference types in source type doesn't match target type."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8618",
                "shortDescription": {
                  "text": "Non-nullable member is uninitialized."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8617",
                "shortDescription": {
                  "text": "Nullability of reference types in type of parameter doesn't match implemented member."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8616",
                "shortDescription": {
                  "text": "Nullability of reference types in return type doesn't match implemented member."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8615",
                "shortDescription": {
                  "text": "Nullability of reference types in type doesn't match implemented member."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8614",
                "shortDescription": {
                  "text": "Nullability of reference types in type of parameter doesn't match implicitly implemented member."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8613",
                "shortDescription": {
                  "text": "Nullability of reference types in return type doesn't match implicitly implemented member."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFortifySource",
                "shortDescription": {
                  "text": "fortify-source clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wfortify-source clang diagnostic. Learn more...",
                  "markdown": "-Wfortify-source clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wfortify-source)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8612",
                "shortDescription": {
                  "text": "Nullability of reference types in type doesn't match implicitly implemented member."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8611",
                "shortDescription": {
                  "text": "Nullability of reference types in type of parameter doesn't match partial method declaration."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8610",
                "shortDescription": {
                  "text": "Nullability of reference types in type of parameter doesn't match overridden member."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TailRecursiveCall",
                "shortDescription": {
                  "text": "Tail recursive call can be replaced with loop"
                },
                "fullDescription": {
                  "text": "Tail recursive calls can be replaced with loop for better performance and protection from possible stack overflows",
                  "markdown": "Tail recursive calls can be replaced with loop for better performance and protection from possible stack overflows"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBUseTypeOfIsOperator.1",
                "shortDescription": {
                  "text": "Use 'TypeOf .. Is ..' operator"
                },
                "fullDescription": {
                  "text": "GetType($T$).IsAssignableFrom($expr$.GetType())",
                  "markdown": "GetType($T$).IsAssignableFrom($expr$.GetType())"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBUseTypeOfIsOperator.2",
                "shortDescription": {
                  "text": "Use 'TypeOf .. Is ..' operator"
                },
                "fullDescription": {
                  "text": "GetType($T$).IsInstanceOfType($expr$)",
                  "markdown": "GetType($T$).IsInstanceOfType($expr$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIncrementBool",
                "shortDescription": {
                  "text": "increment-bool clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wincrement-bool clang diagnostic. Learn more...",
                  "markdown": "-Wincrement-bool clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wincrement-bool)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8629",
                "shortDescription": {
                  "text": "Nullable value type may be null."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8625",
                "shortDescription": {
                  "text": "Cannot convert null literal to non-nullable reference type."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8624",
                "shortDescription": {
                  "text": "Argument cannot be used as an output for parameter due to differences in the nullability of reference types."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnrealHeaderToolWarning",
                "shortDescription": {
                  "text": "UnrealHeaderTool warnings"
                },
                "fullDescription": {
                  "text": "UnrealHeaderTool warnings",
                  "markdown": "UnrealHeaderTool warnings"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "UnrealHeaderTool",
                      "index": 58,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8622",
                "shortDescription": {
                  "text": "Nullability of reference types in type of a parameter doesn't match the target delegate (possibly because of nullability attributes)."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8621",
                "shortDescription": {
                  "text": "Nullability of reference types in return type doesn't match the target delegate (possibly because of nullability attributes)."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnusedComparison",
                "shortDescription": {
                  "text": "unused-comparison clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunused-comparison clang diagnostic. Learn more...",
                  "markdown": "-Wunused-comparison clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-comparison)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8620",
                "shortDescription": {
                  "text": "Argument cannot be used for corresponding parameter due to differences in the nullability of reference types."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBadExpressionBracesIndent",
                "shortDescription": {
                  "text": "Incorrect indent (around expression braces)"
                },
                "fullDescription": {
                  "text": "Around expression braces",
                  "markdown": "Around expression braces"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OptionalParameterRefOut",
                "shortDescription": {
                  "text": "'ref' or 'out' parameter with [Optional] attribute"
                },
                "fullDescription": {
                  "text": "C# does not support 'ref' or 'out' optional parameters",
                  "markdown": "C# does not support 'ref' or 'out' optional parameters"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.RedundantSerializeFieldAttribute",
                "shortDescription": {
                  "text": "Redundant attribute usage (redundant 'SerializeField' attribute)"
                },
                "fullDescription": {
                  "text": "Unity will ignore the 'SerializeField' attribute if a field is also marked with the 'NonSerialized' attribute Learn more...",
                  "markdown": "Unity will ignore the 'SerializeField' attribute if a field is also marked with the 'NonSerialized' attribute [Learn more...](https://github.com/JetBrains/resharper-unity/wiki/Redundant-SerializeField-attribute)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseWithExpressionToCopyAnonymousObject",
                "shortDescription": {
                  "text": "Use 'with' expression to copy anonymous object"
                },
                "fullDescription": {
                  "text": "Use 'with' expression to create a modified copy of an anonymous object",
                  "markdown": "Use 'with' expression to create a modified copy of an anonymous object"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithSingleCallToAny",
                "shortDescription": {
                  "text": "Replace with single call to Any(..)"
                },
                "fullDescription": {
                  "text": "$seq$.Where(Function ($x$) $expr$).Any()",
                  "markdown": "$seq$.Where(Function ($x$) $expr$).Any()"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityRedundantControlFlow",
                "shortDescription": {
                  "text": "readability-redundant-control-flow clang-tidy check"
                },
                "fullDescription": {
                  "text": "readability-redundant-control-flow clang-tidy check. Learn more...",
                  "markdown": "readability-redundant-control-flow clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/redundant-control-flow.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticReturnStdMove",
                "shortDescription": {
                  "text": "return-std-move clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wreturn-std-move clang diagnostic. Learn more...",
                  "markdown": "-Wreturn-std-move clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wreturn-std-move)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.NonPublicMethodWithTestAttribute",
                "shortDescription": {
                  "text": "NUnit. Non-public test method."
                },
                "fullDescription": {
                  "text": "NUnit test methods must have public visibility Learn more...",
                  "markdown": "NUnit test methods must have public visibility [Learn more...](https://www.jetbrains.com/help/rider/NUnit.NonPublicMethodWithTestAttribute.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppForLoopCanBeReplacedWithWhile",
                "shortDescription": {
                  "text": "For-loop can be replaced with while-loop"
                },
                "fullDescription": {
                  "text": "For-loop without init-statement and update expression is equivalent to a while-loop",
                  "markdown": "For-loop without init-statement and update expression is equivalent to a while-loop"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AnnotateNotNullTypeMember",
                "shortDescription": {
                  "text": "Declaration nullability inferred (type member is inferred to be not null)"
                },
                "fullDescription": {
                  "text": "Type member is inferred always not to be null: consider annotating it with [NotNull] or [ItemNotNull] attribute",
                  "markdown": "Type member is inferred always not to be null: consider annotating it with \\[NotNull\\] or \\[ItemNotNull\\] attribute"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseVerbatimString",
                "shortDescription": {
                  "text": "Literal length can be reduced by using verbatim string"
                },
                "fullDescription": {
                  "text": "String literal length can be reduced by using verbatim string",
                  "markdown": "String literal length can be reduced by using verbatim string"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUserDefinedWarnings",
                "shortDescription": {
                  "text": "user-defined-warnings clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wuser-defined-warnings clang diagnostic. Learn more...",
                  "markdown": "-Wuser-defined-warnings clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wuser-defined-warnings)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithOfType.SingleOrDefault.2",
                "shortDescription": {
                  "text": "Replace with OfType<T>().SingleOrDefault() (replace with OfType(Of ..)().SingleOrDefault(..))"
                },
                "fullDescription": {
                  "text": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).SingleOrDefault(Function ($y$) $y$ IsNot Nothing AndAlso $expr$)",
                  "markdown": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).SingleOrDefault(Function ($y$) $y$ IsNot Nothing AndAlso $expr$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp17Extensions",
                "shortDescription": {
                  "text": "c++17-extensions clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wc++17-extensions clang diagnostic. Learn more...",
                  "markdown": "-Wc++17-extensions clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wc-17-extensions)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithOfType.SingleOrDefault.1",
                "shortDescription": {
                  "text": "Replace with OfType<T>().SingleOrDefault() (replace with OfType(Of ..)().SingleOrDefault())"
                },
                "fullDescription": {
                  "text": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).SingleOrDefault(Function ($y$) $y$ IsNot Nothing)",
                  "markdown": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).SingleOrDefault(Function ($y$) $y$ IsNot Nothing)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8609",
                "shortDescription": {
                  "text": "Nullability of reference types in return type doesn't match overridden member."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8608",
                "shortDescription": {
                  "text": "Nullability of reference types in type doesn't match overridden member."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyObjcAvoidNserrorInit",
                "shortDescription": {
                  "text": "objc-avoid-nserror-init clang-tidy check"
                },
                "fullDescription": {
                  "text": "objc-avoid-nserror-init clang-tidy check. Learn more...",
                  "markdown": "objc-avoid-nserror-init clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/objc/avoid-nserror-init.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8607",
                "shortDescription": {
                  "text": "A possible null value may not be used for a type marked with [NotNull] or [DisallowNull]."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUnusedIncludeDirective",
                "shortDescription": {
                  "text": "Possibly unused #include directive"
                },
                "fullDescription": {
                  "text": "Possibly unused #include directive",
                  "markdown": "Possibly unused #include directive"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerSecurityInsecureAPIMktemp",
                "shortDescription": {
                  "text": "security.insecureAPI.mktemp clang static analyzer check"
                },
                "fullDescription": {
                  "text": "security.insecureAPI.mktemp clang static analyzer check. Learn more...",
                  "markdown": "security.insecureAPI.mktemp clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8605",
                "shortDescription": {
                  "text": "Unboxing a possibly null value."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticReturnTypeCLinkage",
                "shortDescription": {
                  "text": "return-type-c-linkage clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wreturn-type-c-linkage clang diagnostic. Learn more...",
                  "markdown": "-Wreturn-type-c-linkage clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wreturn-type-c-linkage)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8604",
                "shortDescription": {
                  "text": "Possible null reference argument for a parameter."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8603",
                "shortDescription": {
                  "text": "Possible null reference return."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8602",
                "shortDescription": {
                  "text": "Dereference of a possibly null reference."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8601",
                "shortDescription": {
                  "text": "Possible null reference assignment."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8600",
                "shortDescription": {
                  "text": "Converting null literal or possible null value to non-nullable type."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NotAccessedVariable.Compiler",
                "shortDescription": {
                  "text": "Non-accessed local variable"
                },
                "fullDescription": {
                  "text": "Local variable is assigned but its value is never used (compiler warning)",
                  "markdown": "Local variable is assigned but its value is never used (compiler warning)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp17Compat",
                "shortDescription": {
                  "text": "c++17-compat clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wc++17-compat clang diagnostic. Learn more...",
                  "markdown": "-Wc++17-compat clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wc-17-compat)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPreC2xCompatPedantic",
                "shortDescription": {
                  "text": "pre-c2x-compat-pedantic clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wpre-c2x-compat-pedantic clang diagnostic. Learn more...",
                  "markdown": "-Wpre-c2x-compat-pedantic clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wpre-c2x-compat-pedantic)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBooleanIncrementExpression",
                "shortDescription": {
                  "text": "Incrementing expression of type bool"
                },
                "fullDescription": {
                  "text": "Incrementing expression of type bool is deprecated in C++11 and removed in C++17",
                  "markdown": "Incrementing expression of type bool is deprecated in C++11 and removed in C++17"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticWeakTemplateVtables",
                "shortDescription": {
                  "text": "weak-template-vtables clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wweak-template-vtables clang diagnostic. Learn more...",
                  "markdown": "-Wweak-template-vtables clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wweak-template-vtables)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCallToPureVirtualFromCtorDtor",
                "shortDescription": {
                  "text": "call-to-pure-virtual-from-ctor-dtor clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wcall-to-pure-virtual-from-ctor-dtor clang diagnostic. Learn more...",
                  "markdown": "-Wcall-to-pure-virtual-from-ctor-dtor clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wcall-to-pure-virtual-from-ctor-dtor)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantEmptyFinallyBlock",
                "shortDescription": {
                  "text": "Redundant empty finally block"
                },
                "fullDescription": {
                  "text": "Empty 'finally' block is redundant",
                  "markdown": "Empty 'finally' block is redundant"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8656",
                "shortDescription": {
                  "text": "Call to a non-readonly member from a 'readonly' member results in an implicit copy of 'this'"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8655",
                "shortDescription": {
                  "text": "The switch expression does not handle some null inputs (it is not exhaustive)."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FunctionNeverReturns",
                "shortDescription": {
                  "text": "Function never returns"
                },
                "fullDescription": {
                  "text": "Function does not reach its end or a 'return' statement by any of possible execution paths Learn more...",
                  "markdown": "Function does not reach its end or a 'return' statement by any of possible execution paths [Learn more...](https://www.jetbrains.com/help/rider/FunctionNeverReturns.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneAssignmentInIfCondition",
                "shortDescription": {
                  "text": "bugprone-assignment-in-if-condition clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-assignment-in-if-condition clang-tidy check. Learn more...",
                  "markdown": "bugprone-assignment-in-if-condition clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/assignment-in-if-condition.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppCStyleCast",
                "shortDescription": {
                  "text": "C-style cast is used instead of a C++ cast"
                },
                "fullDescription": {
                  "text": "C-style cast is used instead of a C++ cast",
                  "markdown": "C-style cast is used instead of a C++ cast"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp14AttributeExtensions",
                "shortDescription": {
                  "text": "c++14-attribute-extensions clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wc++14-attribute-extensions clang diagnostic. Learn more...",
                  "markdown": "-Wc++14-attribute-extensions clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wc-14-attribute-extensions)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertErr09Cpp",
                "shortDescription": {
                  "text": "cert-err09-cpp clang-tidy check"
                },
                "fullDescription": {
                  "text": "cert-err09-cpp clang-tidy check. Learn more...",
                  "markdown": "cert-err09-cpp clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/err09-cpp.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8669",
                "shortDescription": {
                  "text": "The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppParameterNeverUsed",
                "shortDescription": {
                  "text": "Parameter is never used"
                },
                "fullDescription": {
                  "text": "Function parameter is never used",
                  "markdown": "Function parameter is never used"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8667",
                "shortDescription": {
                  "text": "Partial method declarations have inconsistent nullability for type parameter."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticShadowIvar",
                "shortDescription": {
                  "text": "shadow-ivar clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wshadow-ivar clang diagnostic. Learn more...",
                  "markdown": "-Wshadow-ivar clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wshadow-ivar)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFormatPedantic",
                "shortDescription": {
                  "text": "format-pedantic clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wformat-pedantic clang diagnostic. Learn more...",
                  "markdown": "-Wformat-pedantic clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wformat-pedantic)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneSuspiciousMissingComma",
                "shortDescription": {
                  "text": "bugprone-suspicious-missing-comma clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-suspicious-missing-comma clang-tidy check. Learn more...",
                  "markdown": "bugprone-suspicious-missing-comma clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/suspicious-missing-comma.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceSubstringWithRangeIndexer",
                "shortDescription": {
                  "text": "Replace 'Substring' with range indexer"
                },
                "fullDescription": {
                  "text": "Replace 'Substring' method call with range indexer access",
                  "markdown": "Replace 'Substring' method call with range indexer access"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyGoogleObjcAvoidThrowingException",
                "shortDescription": {
                  "text": "google-objc-avoid-throwing-exception clang-tidy check"
                },
                "fullDescription": {
                  "text": "google-objc-avoid-throwing-exception clang-tidy check. Learn more...",
                  "markdown": "google-objc-avoid-throwing-exception clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/objc-avoid-throwing-exception.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInconsistentMissingDestructorOverride",
                "shortDescription": {
                  "text": "inconsistent-missing-destructor-override clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Winconsistent-missing-destructor-override clang diagnostic. Learn more...",
                  "markdown": "-Winconsistent-missing-destructor-override clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#winconsistent-missing-destructor-override)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPragmas",
                "shortDescription": {
                  "text": "pragmas clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wpragmas clang diagnostic. Learn more...",
                  "markdown": "-Wpragmas clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wpragmas)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8634",
                "shortDescription": {
                  "text": "Nullability of type argument doesn't match 'class' constraint."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8633",
                "shortDescription": {
                  "text": "Nullability mismatch in constraints for type parameter."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8632",
                "shortDescription": {
                  "text": "The annotation for nullable reference types should only be used in code within a '#nullable' annotations context."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyMiscRedundantExpression",
                "shortDescription": {
                  "text": "misc-redundant-expression clang-tidy check"
                },
                "fullDescription": {
                  "text": "misc-redundant-expression clang-tidy check. Learn more...",
                  "markdown": "misc-redundant-expression clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/redundant-expression.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8631",
                "shortDescription": {
                  "text": "Nullability of type argument doesn't match constraint type."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticTypenameMissing",
                "shortDescription": {
                  "text": "typename-missing clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wtypename-missing clang diagnostic. Learn more...",
                  "markdown": "-Wtypename-missing clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wtypename-missing)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppLocalVariableMightNotBeInitialized",
                "shortDescription": {
                  "text": "Local variable might not be initialized"
                },
                "fullDescription": {
                  "text": "A local variable might not be initialized",
                  "markdown": "A local variable might not be initialized"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticThreadSafetyVerbose",
                "shortDescription": {
                  "text": "thread-safety-verbose clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wthread-safety-verbose clang diagnostic. Learn more...",
                  "markdown": "-Wthread-safety-verbose clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wthread-safety-verbose)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PrivateFieldCanBeConvertedToLocalVariable",
                "shortDescription": {
                  "text": "Private field can be converted into local variable"
                },
                "fullDescription": {
                  "text": "Private field is always assigned before being used and can be converted into a local variable Learn more...",
                  "markdown": "Private field is always assigned before being used and can be converted into a local variable [Learn more...](https://www.jetbrains.com/help/rider/PrivateFieldCanBeConvertedToLocalVariable.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnexpectedAttribute",
                "shortDescription": {
                  "text": "The attribute is unknown and will be ignored"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "T4",
                      "index": 62,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppLocalVariableMayBeConst",
                "shortDescription": {
                  "text": "Local variable can be made const"
                },
                "fullDescription": {
                  "text": "Local variable can be made const",
                  "markdown": "Local variable can be made const"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnrealHeaderToolError",
                "shortDescription": {
                  "text": "UnrealHeaderTool errors"
                },
                "fullDescription": {
                  "text": "UnrealHeaderTool errors",
                  "markdown": "UnrealHeaderTool errors"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "UnrealHeaderTool",
                      "index": 58,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppUseAuto",
                "shortDescription": {
                  "text": "hicpp-use-auto clang-tidy check"
                },
                "fullDescription": {
                  "text": "hicpp-use-auto clang-tidy check. Learn more...",
                  "markdown": "hicpp-use-auto clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/use-auto.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAbseilNoInternalDependencies",
                "shortDescription": {
                  "text": "abseil-no-internal-dependencies clang-tidy check"
                },
                "fullDescription": {
                  "text": "abseil-no-internal-dependencies clang-tidy check. Learn more...",
                  "markdown": "abseil-no-internal-dependencies clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/no-internal-dependencies.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneReservedIdentifier",
                "shortDescription": {
                  "text": "bugprone-reserved-identifier clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-reserved-identifier clang-tidy check. Learn more...",
                  "markdown": "bugprone-reserved-identifier clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/reserved-identifier.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUndeclaredSelector",
                "shortDescription": {
                  "text": "undeclared-selector clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wundeclared-selector clang diagnostic. Learn more...",
                  "markdown": "-Wundeclared-selector clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wundeclared-selector)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppInvalidLineContinuation",
                "shortDescription": {
                  "text": "Backslash and newline are separated by space"
                },
                "fullDescription": {
                  "text": "Backslash is not a line continuator because there is a space between it and the end of the line",
                  "markdown": "Backslash is not a line continuator because there is a space between it and the end of the line"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticStringCompare",
                "shortDescription": {
                  "text": "string-compare clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wstring-compare clang diagnostic. Learn more...",
                  "markdown": "-Wstring-compare clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wstring-compare)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPointerBoolConversion",
                "shortDescription": {
                  "text": "pointer-bool-conversion clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wpointer-bool-conversion clang diagnostic. Learn more...",
                  "markdown": "-Wpointer-bool-conversion clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wpointer-bool-conversion)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8645",
                "shortDescription": {
                  "text": "Type is already listed in the interface list with different nullability of reference types."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8644",
                "shortDescription": {
                  "text": "Nullability of reference types in interface implemented by the base type doesn't match."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8643",
                "shortDescription": {
                  "text": "Nullability of reference types in explicit interface specifier doesn't match interface implemented by the type."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedLocalFunctionReturnValue",
                "shortDescription": {
                  "text": "Local function return value is never used"
                },
                "fullDescription": {
                  "text": "Local function return value is never used",
                  "markdown": "Local function return value is never used"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppMsExtBindingRValueToLvalueReference",
                "shortDescription": {
                  "text": "Binding r-value to l-value reference is non-standard Microsoft C++ extension"
                },
                "fullDescription": {
                  "text": "Binding r-value to l-value reference is non-standard Microsoft C++ extension",
                  "markdown": "Binding r-value to l-value reference is non-standard Microsoft C++ extension"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.RedundantModifiersAttribute",
                "shortDescription": {
                  "text": "Redundant modifiers attribute"
                },
                "fullDescription": {
                  "text": "Accessibility set by attribute coincides with the default one, thus the attribute can be safely removed",
                  "markdown": "Accessibility set by attribute coincides with the default one, thus the attribute can be safely removed"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityContainerSizeEmpty",
                "shortDescription": {
                  "text": "readability-container-size-empty clang-tidy check"
                },
                "fullDescription": {
                  "text": "readability-container-size-empty clang-tidy check. Learn more...",
                  "markdown": "readability-container-size-empty clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/container-size-empty.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InconsistentlySynchronizedField",
                "shortDescription": {
                  "text": "Inconsistent synchronization on field"
                },
                "fullDescription": {
                  "text": "The field is sometimes used inside synchronized block and sometimes used without synchronization Learn more...",
                  "markdown": "The field is sometimes used inside synchronized block and sometimes used without synchronization [Learn more...](https://www.jetbrains.com/help/rider/InconsistentlySynchronizedField.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticArcRepeatedUseOfWeak",
                "shortDescription": {
                  "text": "arc-repeated-use-of-weak clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Warc-repeated-use-of-weak clang diagnostic. Learn more...",
                  "markdown": "-Warc-repeated-use-of-weak clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#warc-repeated-use-of-weak)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StructCanBeMadeReadOnly",
                "shortDescription": {
                  "text": "Struct can be made readonly"
                },
                "fullDescription": {
                  "text": "Struct has no mutable members and can be made readonly",
                  "markdown": "Struct has no mutable members and can be made readonly"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseConfigureAwaitFalse",
                "shortDescription": {
                  "text": "Missing '.ConfigureAwait(false)' in library code"
                },
                "fullDescription": {
                  "text": "It is recommended to use 'ConfigureAwait(false)' in your library code to prevent context capture in task continuations. This inspection is controlled by the 'ConfigureAwait analysis mode' project level property, which is set to 'Disabled' by default. Set 'ConfigureAwait analysis mode' project level property to 'Library' to analyze 'await' expressions and statements for missing 'ConfigureAwait(false)' calls. Learn more...",
                  "markdown": "It is recommended to use 'ConfigureAwait(false)' in your library code to prevent context capture in task continuations. This inspection is controlled by the 'ConfigureAwait analysis mode' project level property, which is set to 'Disabled' by default. Set 'ConfigureAwait analysis mode' project level property to 'Library' to analyze 'await' expressions and statements for missing 'ConfigureAwait(false)' calls. [Learn more...](https://www.jetbrains.com/help/rider/UseConfigureAwaitFalse.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyGoogleBuildExplicitMakePair",
                "shortDescription": {
                  "text": "google-build-explicit-make-pair clang-tidy check"
                },
                "fullDescription": {
                  "text": "google-build-explicit-make-pair clang-tidy check. Learn more...",
                  "markdown": "google-build-explicit-make-pair clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/build-explicit-make-pair.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCocoaRetainCount",
                "shortDescription": {
                  "text": "osx.cocoa.RetainCount clang static analyzer check"
                },
                "fullDescription": {
                  "text": "osx.cocoa.RetainCount clang static analyzer check. Learn more...",
                  "markdown": "osx.cocoa.RetainCount clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuggestBaseTypeForParameter",
                "shortDescription": {
                  "text": "Parameter can be declared with the base type"
                },
                "fullDescription": {
                  "text": "Parameter can be declared with the base type. Note that when the base type is IEnumerable, another inspection 'Parameter type can be IEnumerable' will be applied.",
                  "markdown": "Parameter can be declared with the base type. Note that when the base type is IEnumerable, another inspection 'Parameter type can be IEnumerable' will be applied."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppIncorrectBlankLinesNearBraces",
                "shortDescription": {
                  "text": "Incorrect blank lines (incorrect number of blank lines near braces)"
                },
                "fullDescription": {
                  "text": "Incorrect number of blank lines near braces",
                  "markdown": "Incorrect number of blank lines near braces"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticArrayParameter",
                "shortDescription": {
                  "text": "array-parameter clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Warray-parameter clang diagnostic. Learn more...",
                  "markdown": "-Warray-parameter clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#warray-parameter)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNullPointerArithmetic",
                "shortDescription": {
                  "text": "null-pointer-arithmetic clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wnull-pointer-arithmetic clang diagnostic. Learn more...",
                  "markdown": "-Wnull-pointer-arithmetic clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wnull-pointer-arithmetic)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RouteTemplates.RouteParameterConstraintNotResolved",
                "shortDescription": {
                  "text": "Route parameter constraint not resolved"
                },
                "fullDescription": {
                  "text": "Route parameter constraint not resolved",
                  "markdown": "Route parameter constraint not resolved"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneAssertSideEffect",
                "shortDescription": {
                  "text": "bugprone-assert-side-effect clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-assert-side-effect clang-tidy check. Learn more...",
                  "markdown": "bugprone-assert-side-effect clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/assert-side-effect.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppImplicitDefaultConstructorNotAvailable",
                "shortDescription": {
                  "text": "Implicit default constructor is not available"
                },
                "fullDescription": {
                  "text": "Implicit default constructor is not available because a base class or a class member does not have an accessible default constructor",
                  "markdown": "Implicit default constructor is not available because a base class or a class member does not have an accessible default constructor"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedMemberHierarchy.Global",
                "shortDescription": {
                  "text": "Type member is only used in overrides (non-private accessibility)"
                },
                "fullDescription": {
                  "text": "Type member is never used from outside of implementation hierarchy, it is only accessed from overrides through base call",
                  "markdown": "Type member is never used from outside of implementation hierarchy, it is only accessed from overrides through base call"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithOfType.FirstOrDefault.1",
                "shortDescription": {
                  "text": "Replace with OfType<T>().FirstOrDefault()"
                },
                "fullDescription": {
                  "text": "$seq$.Select($x$ => $x$ as $T$).FirstOrDefault($y$ => $y$ != null)",
                  "markdown": "$seq$.Select($x$ =\\> $x$ as $T$).FirstOrDefault($y$ =\\> $y$ != null)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithOfType.FirstOrDefault.2",
                "shortDescription": {
                  "text": "Replace with OfType<T>().FirstOrDefault() (replace with OfType<T>().FirstOrDefault(..))"
                },
                "fullDescription": {
                  "text": "$seq$.Select($x$ => $x$ as $T$).FirstOrDefault($y$ => $y$ != null && $expr$)",
                  "markdown": "$seq$.Select($x$ =\\> $x$ as $T$).FirstOrDefault($y$ =\\> $y$ != null \\&\\& $expr$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppDeprecatedHeaders",
                "shortDescription": {
                  "text": "hicpp-deprecated-headers clang-tidy check"
                },
                "fullDescription": {
                  "text": "hicpp-deprecated-headers clang-tidy check. Learn more...",
                  "markdown": "hicpp-deprecated-headers clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/deprecated-headers.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerSecurityInsecureAPIUncheckedReturn",
                "shortDescription": {
                  "text": "security.insecureAPI.UncheckedReturn clang static analyzer check"
                },
                "fullDescription": {
                  "text": "security.insecureAPI.UncheckedReturn clang static analyzer check. Learn more...",
                  "markdown": "security.insecureAPI.UncheckedReturn clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticTentativeDefinitionIncompleteType",
                "shortDescription": {
                  "text": "tentative-definition-incomplete-type clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wtentative-definition-incomplete-type clang diagnostic. Learn more...",
                  "markdown": "-Wtentative-definition-incomplete-type clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wtentative-definition-incomplete-type)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0252,CS0253",
                "shortDescription": {
                  "text": "Possible unintended reference comparison"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://www.jetbrains.com/help/rider/CSharpWarnings_CS0252_CS0253.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIncompatiblePointerTypesDiscardsQualifiers",
                "shortDescription": {
                  "text": "incompatible-pointer-types-discards-qualifiers clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wincompatible-pointer-types-discards-qualifiers clang diagnostic. Learn more...",
                  "markdown": "-Wincompatible-pointer-types-discards-qualifiers clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wincompatible-pointer-types-discards-qualifiers)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppMustBePublicVirtualToImplementInterface",
                "shortDescription": {
                  "text": "Method must be public and virtual to implement a C++/CLI interface member"
                },
                "fullDescription": {
                  "text": "Method must be public and virtual to implement a C++/CLI interface member",
                  "markdown": "Method must be public and virtual to implement a C++/CLI interface member"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticImplicitFloatConversion",
                "shortDescription": {
                  "text": "implicit-float-conversion clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wimplicit-float-conversion clang diagnostic. Learn more...",
                  "markdown": "-Wimplicit-float-conversion clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-float-conversion)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AspUnusedRegisterDirectiveHighlighting",
                "shortDescription": {
                  "text": "Unused register directive"
                },
                "fullDescription": {
                  "text": "Register directive is unused and can be safely removed",
                  "markdown": "Register directive is unused and can be safely removed"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticShiftCountNegative",
                "shortDescription": {
                  "text": "shift-count-negative clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wshift-count-negative clang diagnostic. Learn more...",
                  "markdown": "-Wshift-count-negative clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wshift-count-negative)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticThreadSafetyPrecise",
                "shortDescription": {
                  "text": "thread-safety-precise clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wthread-safety-precise clang diagnostic. Learn more...",
                  "markdown": "-Wthread-safety-precise clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wthread-safety-precise)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneSignalHandler",
                "shortDescription": {
                  "text": "bugprone-signal-handler clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-signal-handler clang-tidy check. Learn more...",
                  "markdown": "bugprone-signal-handler clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/signal-handler.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RouteTemplates.AmbiguousMatchingConstraintConstructor",
                "shortDescription": {
                  "text": "More than one parameter constraint's constructor matched"
                },
                "fullDescription": {
                  "text": "More than one parameter constraint's constructor matched",
                  "markdown": "More than one parameter constraint's constructor matched"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantNotNullConstraint",
                "shortDescription": {
                  "text": "Redundant 'notnull' constraint on type parameter constrained by non-nullable base type"
                },
                "fullDescription": {
                  "text": "The 'notnull' constraint is redundant because type parameter is constrained by non-nullable base type",
                  "markdown": "The 'notnull' constraint is redundant because type parameter is constrained by non-nullable base type"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnsupportedRequiredBaseType",
                "shortDescription": {
                  "text": "BaseTypeRequired attribute supports only classes and interfaces"
                },
                "fullDescription": {
                  "text": "Invalid type specified in '[BaseTypeRequired]' attribute usage. Only classes and interfaces are supported. Learn more...",
                  "markdown": "Invalid type specified in '\\[BaseTypeRequired\\]' attribute usage. Only classes and interfaces are supported. [Learn more...](https://www.jetbrains.com/help/rider/UnsupportedRequiredBaseType.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Constraints Violations",
                      "index": 43,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClassCanBeFinal",
                "shortDescription": {
                  "text": "Class can be made final"
                },
                "fullDescription": {
                  "text": "A class definition can be marked as final so it cannot be inherited from",
                  "markdown": "A class definition can be marked as final so it cannot be inherited from"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.InefficientPropertyAccess",
                "shortDescription": {
                  "text": "Repeated access of property on built in component is inefficient"
                },
                "fullDescription": {
                  "text": "Some Unity object properties result in native methods calls, and repeatedly accessing such properties is inefficient. Introduce a variable to locally cache the property value. Learn more...",
                  "markdown": "Some Unity object properties result in native methods calls, and repeatedly accessing such properties is inefficient. Introduce a variable to locally cache the property value. [Learn more...](https://github.com/JetBrains/resharper-unity/wiki/Avoid-multiple-unnecessary-property-accesses)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TabsAndSpacesMismatch",
                "shortDescription": {
                  "text": "Incorrect indent (tabs/spaces mismatch)"
                },
                "fullDescription": {
                  "text": "Tabs/spaces mismatch Learn more...",
                  "markdown": "Tabs/spaces mismatch [Learn more...](https://www.jetbrains.com/help/rider/TabsAndSpacesMismatch.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.DuplicateEventFunction",
                "shortDescription": {
                  "text": "Event function with the same name is already declared"
                },
                "fullDescription": {
                  "text": "Event function with the same name is already declared.",
                  "markdown": "Event function with the same name is already declared."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedVolatile",
                "shortDescription": {
                  "text": "deprecated-volatile clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdeprecated-volatile clang diagnostic. Learn more...",
                  "markdown": "-Wdeprecated-volatile clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-volatile)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp98CompatLocalTypeTemplateArgs",
                "shortDescription": {
                  "text": "c++98-compat-local-type-template-args clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wc++98-compat-local-type-template-args clang diagnostic. Learn more...",
                  "markdown": "-Wc++98-compat-local-type-template-args clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wc-98-compat-local-type-template-args)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceAutoPropertyWithComputedProperty",
                "shortDescription": {
                  "text": "Replace auto-property with computed property"
                },
                "fullDescription": {
                  "text": "Replace auto-property with computed property to avoid storing trivial state in every type instance",
                  "markdown": "Replace auto-property with computed property to avoid storing trivial state in every type instance"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EnforceLockStatementBraces",
                "shortDescription": {
                  "text": "Use preferred braces style (enforce braces in 'lock' statement)"
                },
                "fullDescription": {
                  "text": "Use braces to separate 'lock' statement body Learn more...",
                  "markdown": "Use braces to separate 'lock' statement body [Learn more...](https://www.jetbrains.com/help/rider/EnforceLockStatementBraces.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftPureDefinition",
                "shortDescription": {
                  "text": "microsoft-pure-definition clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmicrosoft-pure-definition clang diagnostic. Learn more...",
                  "markdown": "-Wmicrosoft-pure-definition clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-pure-definition)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUESourceFileWithoutPredefinedMacros",
                "shortDescription": {
                  "text": "Unreal Engine source file without predefined Unreal macros"
                },
                "fullDescription": {
                  "text": "There are no Unreal Engine predefined macros in the project model for the current source file. You might need to regenerate the project files.",
                  "markdown": "There are no Unreal Engine predefined macros in the project model for the current source file. You might need to regenerate the project files."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unreal Engine",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyPerformanceInefficientAlgorithm",
                "shortDescription": {
                  "text": "performance-inefficient-algorithm clang-tidy check"
                },
                "fullDescription": {
                  "text": "performance-inefficient-algorithm clang-tidy check. Learn more...",
                  "markdown": "performance-inefficient-algorithm clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/inefficient-algorithm.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FSharpRedundantUnionCaseFieldPatterns",
                "shortDescription": {
                  "text": "Redundant union case fields matching"
                },
                "fullDescription": {
                  "text": "Explicit fields matching is redundant and can be replaced with '_'.",
                  "markdown": "Explicit fields matching is redundant and can be replaced with '_'."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8670",
                "shortDescription": {
                  "text": "Object or collection initializer implicitly dereferences possibly null member."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCoreNonnilStringConstants",
                "shortDescription": {
                  "text": "core.NonnilStringConstants clang static analyzer check"
                },
                "fullDescription": {
                  "text": "core.NonnilStringConstants clang static analyzer check. Learn more...",
                  "markdown": "core.NonnilStringConstants clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesProTypeCstyleCast",
                "shortDescription": {
                  "text": "cppcoreguidelines-pro-type-cstyle-cast clang-tidy check"
                },
                "fullDescription": {
                  "text": "cppcoreguidelines-pro-type-cstyle-cast clang-tidy check. Learn more...",
                  "markdown": "cppcoreguidelines-pro-type-cstyle-cast clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/pro-type-cstyle-cast.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticProfileInstrMissing",
                "shortDescription": {
                  "text": "profile-instr-missing clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wprofile-instr-missing clang diagnostic. Learn more...",
                  "markdown": "-Wprofile-instr-missing clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wprofile-instr-missing)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.BurstBoxingNotSupported",
                "shortDescription": {
                  "text": "Boxing is not supported"
                },
                "fullDescription": {
                  "text": "Boxing is not supported",
                  "markdown": "Boxing is not supported"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity Burst Compiler Warnings",
                      "index": 34,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppDeclaratorNeverUsed",
                "shortDescription": {
                  "text": "Declarator is never used"
                },
                "fullDescription": {
                  "text": "A declarator is never used",
                  "markdown": "A declarator is never used"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantDiscardDesignation",
                "shortDescription": {
                  "text": "Redundant discard designation"
                },
                "fullDescription": {
                  "text": "Discard designation can be omitted in this context",
                  "markdown": "Discard designation can be omitted in this context"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticImplicitAtomicProperties",
                "shortDescription": {
                  "text": "implicit-atomic-properties clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wimplicit-atomic-properties clang diagnostic. Learn more...",
                  "markdown": "-Wimplicit-atomic-properties clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-atomic-properties)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticRequiresSuperAttribute",
                "shortDescription": {
                  "text": "requires-super-attribute clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wrequires-super-attribute clang diagnostic. Learn more...",
                  "markdown": "-Wrequires-super-attribute clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wrequires-super-attribute)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FSharpRedundantRequireQualifiedAccessAttribute",
                "shortDescription": {
                  "text": "Redundant RequireQualifiedAccess attribute"
                },
                "fullDescription": {
                  "text": "Enum type always requires qualified access.",
                  "markdown": "Enum type always requires qualified access."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedLocalFunction.Compiler",
                "shortDescription": {
                  "text": "Local function is never used"
                },
                "fullDescription": {
                  "text": "Local function is never used (compiler warning)",
                  "markdown": "Local function is never used (compiler warning)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0659",
                "shortDescription": {
                  "text": "Class overrides Object.Equals(object o) but not Object.GetHashCode()"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://msdn.microsoft.com/en-us/library/xxhbfytk.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantMemberInitializer",
                "shortDescription": {
                  "text": "Redundant member initializer in constructor initialization list"
                },
                "fullDescription": {
                  "text": "Redundant member initializer in constructor initialization list",
                  "markdown": "Redundant member initializer in constructor initialization list"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUEVersionFileDoesntExist",
                "shortDescription": {
                  "text": "Unreal Engine version file does not exist"
                },
                "fullDescription": {
                  "text": "Unreal Engine version file specified in UE4.vcxproj does not exist. You might need to regenerate the project files.",
                  "markdown": "Unreal Engine version file specified in UE4.vcxproj does not exist. You might need to regenerate the project files."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unreal Engine",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0657",
                "shortDescription": {
                  "text": "'attribute modifier' is not a valid attribute location for this declaration. All attributes in this block will be ignored"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://msdn.microsoft.com/en-us/library/c6hdfbk4.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0658",
                "shortDescription": {
                  "text": "'attribute modifier' is not a recognized attribute location. All attributes in this block will be ignored"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://msdn.microsoft.com/en-us/library/4ky08ezz.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0652",
                "shortDescription": {
                  "text": "Comparison to integral constant is useless; the constant is outside the range of type 'type'."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithSingleCallToFirst",
                "shortDescription": {
                  "text": "Replace with single call to First(..)"
                },
                "fullDescription": {
                  "text": "$seq$.Where(Function ($x$) $expr$).First()",
                  "markdown": "$seq$.Where(Function ($x$) $expr$).First()"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1981",
                "shortDescription": {
                  "text": "Using 'is' to test compatibility with 'dynamic' is essentially identical to testing compatibility with 'Object' and will succeed for all non-null values"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerSecurityInsecureAPIDeprecatedOrUnsafeBufferHandling",
                "shortDescription": {
                  "text": "security.insecureAPI.DeprecatedOrUnsafeBufferHandling clang static analyzer check"
                },
                "fullDescription": {
                  "text": "security.insecureAPI.DeprecatedOrUnsafeBufferHandling clang static analyzer check. Learn more...",
                  "markdown": "security.insecureAPI.DeprecatedOrUnsafeBufferHandling clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RemoveRedundantBraces",
                "shortDescription": {
                  "text": "Use preferred braces style (remove redundant braces)"
                },
                "fullDescription": {
                  "text": "Braces can be safely removed without changing code semantics Learn more...",
                  "markdown": "Braces can be safely removed without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/RemoveRedundantBraces.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrangeStaticMemberQualifier",
                "shortDescription": {
                  "text": "Add/remove qualifier for static members"
                },
                "fullDescription": {
                  "text": "Qualifier can be safely added/removed without changing code semantics Learn more...",
                  "markdown": "Qualifier can be safely added/removed without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeStaticMemberQualifier.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppPossiblyErroneousEmptyStatements",
                "shortDescription": {
                  "text": "Possibly erroneous empty statement"
                },
                "fullDescription": {
                  "text": "Possibly erroneous empty statement used in a control statement",
                  "markdown": "Possibly erroneous empty statement used in a control statement"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBStringCompareToIsCultureSpecific",
                "shortDescription": {
                  "text": "String.CompareTo is culture-specific"
                },
                "fullDescription": {
                  "text": "$s1$.CompareTo($s2$)",
                  "markdown": "$s1$.CompareTo($s2$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClassIsIncomplete",
                "shortDescription": {
                  "text": "Use of an incomplete type inside a template"
                },
                "fullDescription": {
                  "text": "An incomplete type is used inside a template declaration or definition",
                  "markdown": "An incomplete type is used inside a template declaration or definition"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertDcl58Cpp",
                "shortDescription": {
                  "text": "cert-dcl58-cpp clang-tidy check"
                },
                "fullDescription": {
                  "text": "cert-dcl58-cpp clang-tidy check. Learn more...",
                  "markdown": "cert-dcl58-cpp clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/dcl58-cpp.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EnforceUsingStatementBraces",
                "shortDescription": {
                  "text": "Use preferred braces style (enforce braces in 'using' statement)"
                },
                "fullDescription": {
                  "text": "Use braces to separate 'using' statement body Learn more...",
                  "markdown": "Use braces to separate 'using' statement body [Learn more...](https://www.jetbrains.com/help/rider/EnforceUsingStatementBraces.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticRedundantParens",
                "shortDescription": {
                  "text": "redundant-parens clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wredundant-parens clang diagnostic. Learn more...",
                  "markdown": "-Wredundant-parens clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wredundant-parens)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1998",
                "shortDescription": {
                  "text": "Async function without await expression"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneUndelegatedConstructor",
                "shortDescription": {
                  "text": "bugprone-undelegated-constructor clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-undelegated-constructor clang-tidy check. Learn more...",
                  "markdown": "bugprone-undelegated-constructor clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/undelegated-constructor.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantEmptyDeclaration",
                "shortDescription": {
                  "text": "Redundant empty declaration"
                },
                "fullDescription": {
                  "text": "Redundant empty declaration",
                  "markdown": "Redundant empty declaration"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0665",
                "shortDescription": {
                  "text": "Assignment in conditional expression"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://msdn.microsoft.com/en-us/library/c1sde1ax.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Asp.SkinNotResolved",
                "shortDescription": {
                  "text": "Unknown skin"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FSharpUseWildSelfId",
                "shortDescription": {
                  "text": "Use `_` self id"
                },
                "fullDescription": {
                  "text": "Use `_` self id.",
                  "markdown": "Use \\`_\\` self id."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConfusingCharAsIntegerInConstructor",
                "shortDescription": {
                  "text": "Char is possibly unintentionally used as integer"
                },
                "fullDescription": {
                  "text": "Char is possibly unintentionally used as integer",
                  "markdown": "Char is possibly unintentionally used as integer"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PossibleUnintendedQueryableAsEnumerable",
                "shortDescription": {
                  "text": "IQueryable is possibly unintentionally used as IEnumerable"
                },
                "fullDescription": {
                  "text": "IQueryable is possibly unintentionally used as IEnumerable Learn more...",
                  "markdown": "IQueryable is possibly unintentionally used as IEnumerable [Learn more...](https://www.jetbrains.com/help/rider/PossibleUnintendedQueryableAsEnumerable.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticHeaderGuard",
                "shortDescription": {
                  "text": "header-guard clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wheader-guard clang diagnostic. Learn more...",
                  "markdown": "-Wheader-guard clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wheader-guard)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnusedParameter",
                "shortDescription": {
                  "text": "unused-parameter clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunused-parameter clang diagnostic. Learn more...",
                  "markdown": "-Wunused-parameter clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-parameter)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Html.TagShouldBeSelfClosed",
                "shortDescription": {
                  "text": "Wrong closed tag"
                },
                "fullDescription": {
                  "text": "Wrong closed tag in HTML and related technologies",
                  "markdown": "Wrong closed tag in HTML and related technologies"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8597",
                "shortDescription": {
                  "text": "Thrown value may be null."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedCoroutine",
                "shortDescription": {
                  "text": "deprecated-coroutine clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdeprecated-coroutine clang diagnostic. Learn more...",
                  "markdown": "-Wdeprecated-coroutine clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-coroutine)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithSingleOrDefault",
                "shortDescription": {
                  "text": "Replace with SingleOrDefault($args$)"
                },
                "fullDescription": {
                  "text": "If ($seq$.Any($args$), $seq$.Single($args$), Nothing)",
                  "markdown": "If ($seq$.Any($args$), $seq$.Single($args$), Nothing)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticBlockCaptureAutoreleasing",
                "shortDescription": {
                  "text": "block-capture-autoreleasing clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wblock-capture-autoreleasing clang diagnostic. Learn more...",
                  "markdown": "-Wblock-capture-autoreleasing clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wblock-capture-autoreleasing)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SimilarAnonymousTypeNearby",
                "shortDescription": {
                  "text": "Similar anonymous type detected nearby"
                },
                "fullDescription": {
                  "text": "Anonymous type that differs only in property order is detected nearby",
                  "markdown": "Anonymous type that differs only in property order is detected nearby"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeLoopConvert",
                "shortDescription": {
                  "text": "modernize-loop-convert clang-tidy check"
                },
                "fullDescription": {
                  "text": "modernize-loop-convert clang-tidy check. Learn more...",
                  "markdown": "modernize-loop-convert clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/loop-convert.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NotAccessedField.Global",
                "shortDescription": {
                  "text": "Non-accessed field (non-private accessibility)"
                },
                "fullDescription": {
                  "text": "Field is assigned but its value is never used",
                  "markdown": "Field is assigned but its value is never used"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.RedundantHideInInspectorAttribute",
                "shortDescription": {
                  "text": "Redundant attribute usage (redundant 'HideInInspector' attribute)"
                },
                "fullDescription": {
                  "text": "The 'HideInInspector' attribute only applies to serialised fields. Learn more...",
                  "markdown": "The 'HideInInspector' attribute only applies to serialised fields. [Learn more...](https://github.com/JetBrains/resharper-unity/wiki/Redundant-HideInInspector-attribute)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUnnecessaryWhitespace",
                "shortDescription": {
                  "text": "Incorrect spacing (redundant whitespaces at the end of a line)"
                },
                "fullDescription": {
                  "text": "Redundant whitespace characters at the end of a line",
                  "markdown": "Redundant whitespace characters at the end of a line"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneMisplacedPointerArithmeticInAlloc",
                "shortDescription": {
                  "text": "bugprone-misplaced-pointer-arithmetic-in-alloc clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-misplaced-pointer-arithmetic-in-alloc clang-tidy check. Learn more...",
                  "markdown": "bugprone-misplaced-pointer-arithmetic-in-alloc clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/misplaced-pointer-arithmetic-in-alloc.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.LoadSceneUnknownSceneName",
                "shortDescription": {
                  "text": "There is no scene with the same name in the build settings"
                },
                "fullDescription": {
                  "text": "The scene is missing in the Unity build settings.",
                  "markdown": "The scene is missing in the Unity build settings."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithOfType.LastOrDefault.2",
                "shortDescription": {
                  "text": "Replace with OfType<T>().LastOrDefault() (replace with OfType<T>().LastOrDefault(..))"
                },
                "fullDescription": {
                  "text": "$seq$.Select($x$ => $x$ as $T$).LastOrDefault($y$ => $y$ != null && $expr$)",
                  "markdown": "$seq$.Select($x$ =\\> $x$ as $T$).LastOrDefault($y$ =\\> $y$ != null \\&\\& $expr$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithOfType.LastOrDefault.1",
                "shortDescription": {
                  "text": "Replace with OfType<T>().LastOrDefault()"
                },
                "fullDescription": {
                  "text": "$seq$.Select($x$ => $x$ as $T$).LastOrDefault($y$ => $y$ != null)",
                  "markdown": "$seq$.Select($x$ =\\> $x$ as $T$).LastOrDefault($y$ =\\> $y$ != null)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NotAccessedVariable",
                "shortDescription": {
                  "text": "Non-accessed local variable"
                },
                "fullDescription": {
                  "text": "Local variable is assigned but its value is never used",
                  "markdown": "Local variable is assigned but its value is never used"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OutParameterValueIsAlwaysDiscarded.Local",
                "shortDescription": {
                  "text": "Parameter output value is always discarded (private accessibility)"
                },
                "fullDescription": {
                  "text": "The resulting value of output parameter is always discarded Learn more...",
                  "markdown": "The resulting value of output parameter is always discarded [Learn more...](https://www.jetbrains.com/help/rider/OutParameterValueIsAlwaysDiscarded.Local.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0642",
                "shortDescription": {
                  "text": "Possible mistaken empty statement"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://msdn.microsoft.com/en-us/library/9x19t380.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneMoveForwardingReference",
                "shortDescription": {
                  "text": "bugprone-move-forwarding-reference clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-move-forwarding-reference clang-tidy check. Learn more...",
                  "markdown": "bugprone-move-forwarding-reference clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/move-forwarding-reference.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WebConfig.ModuleNotResolved",
                "shortDescription": {
                  "text": "Cannot resolve module"
                },
                "fullDescription": {
                  "text": "Cannot resolve module",
                  "markdown": "Cannot resolve module"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBStringEndsWithIsCultureSpecific",
                "shortDescription": {
                  "text": "String.EndsWith is culture-specific (string.EndsWith(string) is culture-specific)"
                },
                "fullDescription": {
                  "text": "$s$.EndsWith($sarg$)",
                  "markdown": "$s$.EndsWith($sarg$)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConditionalTernaryEqualBranch",
                "shortDescription": {
                  "text": "'?:' expression has identical true and false branches"
                },
                "fullDescription": {
                  "text": "'?:' expression has identical true and false branches Learn more...",
                  "markdown": "'?:' expression has identical true and false branches [Learn more...](https://www.jetbrains.com/help/rider/ConditionalTernaryEqualBranch.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppAvoidGoto",
                "shortDescription": {
                  "text": "hicpp-avoid-goto clang-tidy check"
                },
                "fullDescription": {
                  "text": "hicpp-avoid-goto clang-tidy check. Learn more...",
                  "markdown": "hicpp-avoid-goto clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/avoid-goto.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedObjcPointerIntrospection",
                "shortDescription": {
                  "text": "deprecated-objc-pointer-introspection clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdeprecated-objc-pointer-introspection clang diagnostic. Learn more...",
                  "markdown": "-Wdeprecated-objc-pointer-introspection clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-objc-pointer-introspection)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesOwningMemory",
                "shortDescription": {
                  "text": "cppcoreguidelines-owning-memory clang-tidy check"
                },
                "fullDescription": {
                  "text": "cppcoreguidelines-owning-memory clang-tidy check. Learn more...",
                  "markdown": "cppcoreguidelines-owning-memory clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/owning-memory.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSemicolonBeforeMethodBody",
                "shortDescription": {
                  "text": "semicolon-before-method-body clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wsemicolon-before-method-body clang diagnostic. Learn more...",
                  "markdown": "-Wsemicolon-before-method-body clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wsemicolon-before-method-body)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticEnumCompareSwitch",
                "shortDescription": {
                  "text": "enum-compare-switch clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wenum-compare-switch clang diagnostic. Learn more...",
                  "markdown": "-Wenum-compare-switch clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wenum-compare-switch)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppDeprecatedEntity",
                "shortDescription": {
                  "text": "Entity is deprecated"
                },
                "fullDescription": {
                  "text": "Entity is deprecated",
                  "markdown": "Entity is deprecated"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnusedPrivateField",
                "shortDescription": {
                  "text": "unused-private-field clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunused-private-field clang diagnostic. Learn more...",
                  "markdown": "-Wunused-private-field clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-private-field)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppBracesAroundStatements",
                "shortDescription": {
                  "text": "hicpp-braces-around-statements clang-tidy check"
                },
                "fullDescription": {
                  "text": "hicpp-braces-around-statements clang-tidy check. Learn more...",
                  "markdown": "hicpp-braces-around-statements clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/braces-around-statements.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0693",
                "shortDescription": {
                  "text": "Type parameter has the same name as a type parameter from the outer type"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://msdn.microsoft.com/en-us/library/0ah54ze5.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeReplaceDisallowCopyAndAssignMacro",
                "shortDescription": {
                  "text": "modernize-replace-disallow-copy-and-assign-macro clang-tidy check"
                },
                "fullDescription": {
                  "text": "modernize-replace-disallow-copy-and-assign-macro clang-tidy check. Learn more...",
                  "markdown": "modernize-replace-disallow-copy-and-assign-macro clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/replace-disallow-copy-and-assign-macro.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnicodeWhitespace",
                "shortDescription": {
                  "text": "unicode-whitespace clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunicode-whitespace clang diagnostic. Learn more...",
                  "markdown": "-Wunicode-whitespace clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunicode-whitespace)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Asp.InvalidControlType",
                "shortDescription": {
                  "text": "Invalid control type"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OutParameterValueIsAlwaysDiscarded.Global",
                "shortDescription": {
                  "text": "Parameter output value is always discarded (non-private accessibility)"
                },
                "fullDescription": {
                  "text": "The resulting value of output parameter is always discarded Learn more...",
                  "markdown": "The resulting value of output parameter is always discarded [Learn more...](https://www.jetbrains.com/help/rider/OutParameterValueIsAlwaysDiscarded.Global.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBWarnings__BC42353,BC42354,BC42355",
                "shortDescription": {
                  "text": "Function doesn't return a struct value on all code paths"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://www.jetbrains.com/help/rider/VBWarnings_BC42353_BC42354_BC42355.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrangeMethodOrOperatorBody",
                "shortDescription": {
                  "text": "Use preferred body style (convert into method or operator with preferred body style)"
                },
                "fullDescription": {
                  "text": "Use expression or block body Learn more...",
                  "markdown": "Use expression or block body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeMethodOrOperatorBody.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.TestCaseSourceMustBeFieldPropertyMethod",
                "shortDescription": {
                  "text": "NUnit. Test case source must be field, property, or method."
                },
                "fullDescription": {
                  "text": "NUnit test case source specified in [TestCaseSource] or [ValueSource] attributes must only refer to field, property, or method Learn more...",
                  "markdown": "NUnit test case source specified in \\[TestCaseSource\\] or \\[ValueSource\\] attributes must only refer to field, property, or method [Learn more...](https://www.jetbrains.com/help/rider/NUnit.TestCaseSourceMustBeFieldPropertyMethod.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPragmaPackSuspiciousInclude",
                "shortDescription": {
                  "text": "pragma-pack-suspicious-include clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wpragma-pack-suspicious-include clang diagnostic. Learn more...",
                  "markdown": "-Wpragma-pack-suspicious-include clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wpragma-pack-suspicious-include)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantOverload.Global",
                "shortDescription": {
                  "text": "Redundant method overload (non-private accessibility)"
                },
                "fullDescription": {
                  "text": "Redundant method overload. Use another method with optional parameters.",
                  "markdown": "Redundant method overload. Use another method with optional parameters."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp98Compat",
                "shortDescription": {
                  "text": "c++98-compat clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wc++98-compat clang diagnostic. Learn more...",
                  "markdown": "-Wc++98-compat clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wc-98-compat)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuCaseRange",
                "shortDescription": {
                  "text": "gnu-case-range clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wgnu-case-range clang diagnostic. Learn more...",
                  "markdown": "-Wgnu-case-range clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-case-range)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PossibleIntendedRethrow",
                "shortDescription": {
                  "text": "Exception rethrow possibly intended"
                },
                "fullDescription": {
                  "text": "A 'throw' statement inside a catch clause which throws the exception caught. In most of cases a 'throw' statement with no argument is to be used.",
                  "markdown": "A 'throw' statement inside a catch clause which throws the exception caught. In most of cases a 'throw' statement with no argument is to be used."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAtimportInFrameworkHeader",
                "shortDescription": {
                  "text": "atimport-in-framework-header clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Watimport-in-framework-header clang diagnostic. Learn more...",
                  "markdown": "-Watimport-in-framework-header clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#watimport-in-framework-header)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.IgnoredPathHighlighting",
                "shortDescription": {
                  "text": "Ignored path"
                },
                "fullDescription": {
                  "text": "Path is ignored in project settings",
                  "markdown": "Path is ignored in project settings"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppEnforceForStatementBraces",
                "shortDescription": {
                  "text": "Use preferred braces style (enforce braces in 'for' statement)"
                },
                "fullDescription": {
                  "text": "Use braces to separate 'for' statement body",
                  "markdown": "Use braces to separate 'for' statement body"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ForCanBeConvertedToForeach",
                "shortDescription": {
                  "text": "For-loop can be converted into foreach-loop"
                },
                "fullDescription": {
                  "text": "For-loop can be converted into foreach-loop Learn more...",
                  "markdown": "For-loop can be converted into foreach-loop [Learn more...](https://www.jetbrains.com/help/rider/ForCanBeConvertedToForeach.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMissingBraces",
                "shortDescription": {
                  "text": "missing-braces clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmissing-braces clang diagnostic. Learn more...",
                  "markdown": "-Wmissing-braces clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmissing-braces)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FSharpRedundantNameQualifier",
                "shortDescription": {
                  "text": "Redundant name qualifier"
                },
                "fullDescription": {
                  "text": "Redundant use of qualifier for name.",
                  "markdown": "Redundant use of qualifier for name."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Mvc.TemplateNotResolved",
                "shortDescription": {
                  "text": "MVC (unknown template)"
                },
                "fullDescription": {
                  "text": "Unknown ASP.NET MVC Template",
                  "markdown": "Unknown ASP.NET MVC Template"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.IndexOutOfGridDefinition",
                "shortDescription": {
                  "text": "Grid element column/row index is out of grid definition range"
                },
                "fullDescription": {
                  "text": "Grid element column/row index is out of grid definition range",
                  "markdown": "Grid element column/row index is out of grid definition range"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneStringviewNullptr",
                "shortDescription": {
                  "text": "bugprone-stringview-nullptr clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-stringview-nullptr clang-tidy check. Learn more...",
                  "markdown": "bugprone-stringview-nullptr clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/stringview-nullptr.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUndefinedBoolConversion",
                "shortDescription": {
                  "text": "undefined-bool-conversion clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wundefined-bool-conversion clang diagnostic. Learn more...",
                  "markdown": "-Wundefined-bool-conversion clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wundefined-bool-conversion)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUseRangeAlgorithm",
                "shortDescription": {
                  "text": "Algorithm operating on ranges can be used"
                },
                "fullDescription": {
                  "text": "Algorithm accepting iterators is used instead of the corresponding algorithm from std::ranges",
                  "markdown": "Algorithm accepting iterators is used instead of the corresponding algorithm from std::ranges"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticParentheses",
                "shortDescription": {
                  "text": "parentheses clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wparentheses clang diagnostic. Learn more...",
                  "markdown": "-Wparentheses clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wparentheses)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0675",
                "shortDescription": {
                  "text": "Bitwise-or operator used on a sign-extended operand."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerSecurityInsecureAPIMkstemp",
                "shortDescription": {
                  "text": "security.insecureAPI.mkstemp clang static analyzer check"
                },
                "fullDescription": {
                  "text": "security.insecureAPI.mkstemp clang static analyzer check. Learn more...",
                  "markdown": "security.insecureAPI.mkstemp clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MissingIndent",
                "shortDescription": {
                  "text": "Incorrect indent (line should be indented or outdented elsewhere)"
                },
                "fullDescription": {
                  "text": "Line should be indented or outdented elsewhere Learn more...",
                  "markdown": "Line should be indented or outdented elsewhere [Learn more...](https://www.jetbrains.com/help/rider/MissingIndent.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0672",
                "shortDescription": {
                  "text": "Member overrides obsolete member"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://msdn.microsoft.com/en-us/library/9dzeyth8.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Html.TagNotResolved",
                "shortDescription": {
                  "text": "Unknown tag"
                },
                "fullDescription": {
                  "text": "Unknown tag in HTML and related technologies",
                  "markdown": "Unknown tag in HTML and related technologies"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrangeAttributes",
                "shortDescription": {
                  "text": "Join or separate attributes in section"
                },
                "fullDescription": {
                  "text": "Attributes have to be declared in separate sections or in a single sections Learn more...",
                  "markdown": "Attributes have to be declared in separate sections or in a single sections [Learn more...](https://www.jetbrains.com/help/rider/ArrangeAttributes.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantDeclarationSemicolon",
                "shortDescription": {
                  "text": "Redundant semicolon after type or namespace declaration"
                },
                "fullDescription": {
                  "text": "Semicolon after class/struct/enum/interface/namespace declarations is redundant in C#",
                  "markdown": "Semicolon after class/struct/enum/interface/namespace declarations is redundant in C#"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyMiscThrowByValueCatchByReference",
                "shortDescription": {
                  "text": "misc-throw-by-value-catch-by-reference clang-tidy check"
                },
                "fullDescription": {
                  "text": "misc-throw-by-value-catch-by-reference clang-tidy check. Learn more...",
                  "markdown": "misc-throw-by-value-catch-by-reference clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/throw-by-value-catch-by-reference.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeUseEqualsDelete",
                "shortDescription": {
                  "text": "modernize-use-equals-delete clang-tidy check"
                },
                "fullDescription": {
                  "text": "modernize-use-equals-delete clang-tidy check. Learn more...",
                  "markdown": "modernize-use-equals-delete clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-equals-delete.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticBuiltinMacroRedefined",
                "shortDescription": {
                  "text": "builtin-macro-redefined clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wbuiltin-macro-redefined clang diagnostic. Learn more...",
                  "markdown": "-Wbuiltin-macro-redefined clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wbuiltin-macro-redefined)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithSingleAssignment.False",
                "shortDescription": {
                  "text": "Replace with single assignment"
                },
                "fullDescription": {
                  "text": "$T$ $x$ = false; if($bool1$) $x$ = true; Learn more...",
                  "markdown": "$T$ $x$ = false; if($bool1$) $x$ = true; [Learn more...](https://www.jetbrains.com/help/rider/ReplaceWithSingleAssignment.False.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MissingAltAttributeInImgTag",
                "shortDescription": {
                  "text": "Important tags or attributes missing (<img> should specify alternative text)"
                },
                "fullDescription": {
                  "text": "<([)img(]) $attrs$>",
                  "markdown": "\\<(\\[)img(\\]) $attrs$\\>"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerUnixDynamicMemoryModeling",
                "shortDescription": {
                  "text": "unix.DynamicMemoryModeling clang static analyzer check"
                },
                "fullDescription": {
                  "text": "unix.DynamicMemoryModeling clang static analyzer check. Learn more...",
                  "markdown": "unix.DynamicMemoryModeling clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InheritdocConsiderUsage",
                "shortDescription": {
                  "text": "Use <inheritdoc /> on root level to inherit documentation from base candidate"
                },
                "fullDescription": {
                  "text": "Use on root level to inherit documentation from base candidate",
                  "markdown": "Use on root level to inherit documentation from base candidate"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedParameterInPartialMethod",
                "shortDescription": {
                  "text": "Unused parameter in partial method"
                },
                "fullDescription": {
                  "text": "Parameter of partial method is never used Learn more...",
                  "markdown": "Parameter of partial method is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedParameterInPartialMethod.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyFuchsiaStaticallyConstructedObjects",
                "shortDescription": {
                  "text": "fuchsia-statically-constructed-objects clang-tidy check"
                },
                "fullDescription": {
                  "text": "fuchsia-statically-constructed-objects clang-tidy check. Learn more...",
                  "markdown": "fuchsia-statically-constructed-objects clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/fuchsia/statically-constructed-objects.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS9073",
                "shortDescription": {
                  "text": "The 'scoped' modifier of a parameter doesn't match target delegate."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS9074",
                "shortDescription": {
                  "text": "The 'scoped' modifier of parameter doesn't match overridden or implemented member."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BuiltInTypeReferenceStyle",
                "shortDescription": {
                  "text": "Replace built-in type reference with a CLR type name or a keyword"
                },
                "fullDescription": {
                  "text": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics Learn more...",
                  "markdown": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyle.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.Entities.NotUpdatedComponentLookup",
                "shortDescription": {
                  "text": "Field of 'ComponentLookup' type must be updated before being used."
                },
                "fullDescription": {
                  "text": "Field of 'ComponentLookup' type must be updated before being used.",
                  "markdown": "Field of 'ComponentLookup' type must be updated before being used."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PropertyFieldKeywordIsNeverAssigned",
                "shortDescription": {
                  "text": "Backing field is used but never assigned"
                },
                "fullDescription": {
                  "text": "Backing field of property with 'field' keyword is used but never assigned",
                  "markdown": "Backing field of property with 'field' keyword is used but never assigned"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StructMemberCanBeMadeReadOnly",
                "shortDescription": {
                  "text": "Struct member can be made readonly"
                },
                "fullDescription": {
                  "text": "Struct member has no mutable access to 'this' and can be made readonly",
                  "markdown": "Struct member has no mutable access to 'this' and can be made readonly"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeUseNoexcept",
                "shortDescription": {
                  "text": "modernize-use-noexcept clang-tidy check"
                },
                "fullDescription": {
                  "text": "modernize-use-noexcept clang-tidy check. Learn more...",
                  "markdown": "modernize-use-noexcept clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-noexcept.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AccessToDisposedClosure",
                "shortDescription": {
                  "text": "Access to disposed captured variable"
                },
                "fullDescription": {
                  "text": "Access to captured variable from anonymous method when the variable is disposed Learn more...",
                  "markdown": "Access to captured variable from anonymous method when the variable is disposed [Learn more...](https://www.jetbrains.com/help/rider/AccessToDisposedClosure.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCocoaAtSync",
                "shortDescription": {
                  "text": "osx.cocoa.AtSync clang static analyzer check"
                },
                "fullDescription": {
                  "text": "osx.cocoa.AtSync clang static analyzer check. Learn more...",
                  "markdown": "osx.cocoa.AtSync clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSpirCompat",
                "shortDescription": {
                  "text": "spir-compat clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wspir-compat clang diagnostic. Learn more...",
                  "markdown": "-Wspir-compat clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wspir-compat)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS9080",
                "shortDescription": {
                  "text": "Use of a variable in this context may expose referenced variables outside of their declaration scope."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS9081",
                "shortDescription": {
                  "text": "A result of a stackalloc expression in this context may be exposed outside of the containing method."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS9082",
                "shortDescription": {
                  "text": "A local variable is returned by reference but was initialized to a value that cannot be returned by reference."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSlhAsmGoto",
                "shortDescription": {
                  "text": "slh-asm-goto clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wslh-asm-goto clang diagnostic. Learn more...",
                  "markdown": "-Wslh-asm-goto clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wslh-asm-goto)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppMemberInitializersOrder",
                "shortDescription": {
                  "text": "Use preferred initialization style (order of member initializers does not match the initialization order)"
                },
                "fullDescription": {
                  "text": "Order of member initializers does not match the initialization order",
                  "markdown": "Order of member initializers does not match the initialization order"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIncompleteFrameworkModuleDeclaration",
                "shortDescription": {
                  "text": "incomplete-framework-module-declaration clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wincomplete-framework-module-declaration clang diagnostic. Learn more...",
                  "markdown": "-Wincomplete-framework-module-declaration clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wincomplete-framework-module-declaration)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppFunctionIsNotImplemented",
                "shortDescription": {
                  "text": "Function is not implemented"
                },
                "fullDescription": {
                  "text": "A function is not implemented",
                  "markdown": "A function is not implemented"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceConditionalExpressionWithNullCoalescing",
                "shortDescription": {
                  "text": "Conditional expression can be rewritten as null-coalescing"
                },
                "fullDescription": {
                  "text": "Conditonal expression with a null check ('expr is {} x') or a type pattern ('expr is T x') can be rewritten as a null-coalescing ('??') expression",
                  "markdown": "Conditonal expression with a null check ('expr is {} x') or a type pattern ('expr is T x') can be rewritten as a null-coalescing ('??') expression"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyPerformanceNoexceptMoveConstructor",
                "shortDescription": {
                  "text": "performance-noexcept-move-constructor clang-tidy check"
                },
                "fullDescription": {
                  "text": "performance-noexcept-move-constructor clang-tidy check. Learn more...",
                  "markdown": "performance-noexcept-move-constructor clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/noexcept-move-constructor.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantEmptyCaseElse",
                "shortDescription": {
                  "text": "Redundant empty 'Case Else' statement"
                },
                "fullDescription": {
                  "text": "Redundant empty 'Case Else' statement",
                  "markdown": "Redundant empty 'Case Else' statement"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneExceptionEscape",
                "shortDescription": {
                  "text": "bugprone-exception-escape clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-exception-escape clang-tidy check. Learn more...",
                  "markdown": "bugprone-exception-escape clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/exception-escape.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnqualifiedStdCastCall",
                "shortDescription": {
                  "text": "unqualified-std-cast-call clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunqualified-std-cast-call clang diagnostic. Learn more...",
                  "markdown": "-Wunqualified-std-cast-call clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunqualified-std-cast-call)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOptinMpiMPIChecker",
                "shortDescription": {
                  "text": "optin.mpi.MPI-Checker clang static analyzer check"
                },
                "fullDescription": {
                  "text": "optin.mpi.MPI-Checker clang static analyzer check. Learn more...",
                  "markdown": "optin.mpi.MPI-Checker clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticVoidPointerToEnumCast",
                "shortDescription": {
                  "text": "void-pointer-to-enum-cast clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wvoid-pointer-to-enum-cast clang diagnostic. Learn more...",
                  "markdown": "-Wvoid-pointer-to-enum-cast clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wvoid-pointer-to-enum-cast)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyPerformanceInefficientVectorOperation",
                "shortDescription": {
                  "text": "performance-inefficient-vector-operation clang-tidy check"
                },
                "fullDescription": {
                  "text": "performance-inefficient-vector-operation clang-tidy check. Learn more...",
                  "markdown": "performance-inefficient-vector-operation clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/inefficient-vector-operation.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCastCallingConvention",
                "shortDescription": {
                  "text": "cast-calling-convention clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wcast-calling-convention clang diagnostic. Learn more...",
                  "markdown": "-Wcast-calling-convention clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wcast-calling-convention)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.RedundantStyledValue",
                "shortDescription": {
                  "text": "Property value is equal to style-provided"
                },
                "fullDescription": {
                  "text": "Property value is equal to the value provided by explicit style and can be removed",
                  "markdown": "Property value is equal to the value provided by explicit style and can be removed"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantCheckBeforeAssignment",
                "shortDescription": {
                  "text": "Redundant condition check before assignments"
                },
                "fullDescription": {
                  "text": "Check for inequality before assignment is redundant \r\n  if (x != value)\r\n    x = value;",
                  "markdown": "Check for inequality before assignment is redundant\n\n```\n\r\n  if (x != value)\r\n    x = value;\r\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyLlvmPreferIsaOrDynCastInConditionals",
                "shortDescription": {
                  "text": "llvm-prefer-isa-or-dyn-cast-in-conditionals clang-tidy check"
                },
                "fullDescription": {
                  "text": "llvm-prefer-isa-or-dyn-cast-in-conditionals clang-tidy check. Learn more...",
                  "markdown": "llvm-prefer-isa-or-dyn-cast-in-conditionals clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/llvm/prefer-isa-or-dyn-cast-in-conditionals.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerNullabilityNullReturnedFromNonnull",
                "shortDescription": {
                  "text": "nullability.NullReturnedFromNonnull clang static analyzer check"
                },
                "fullDescription": {
                  "text": "nullability.NullReturnedFromNonnull clang static analyzer check. Learn more...",
                  "markdown": "nullability.NullReturnedFromNonnull clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantParentheses",
                "shortDescription": {
                  "text": "Redundant parentheses"
                },
                "fullDescription": {
                  "text": "Parentheses do not change the order of operations and can be deleted",
                  "markdown": "Parentheses do not change the order of operations and can be deleted"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerNullabilityNullabilityBase",
                "shortDescription": {
                  "text": "nullability.NullabilityBase clang static analyzer check"
                },
                "fullDescription": {
                  "text": "nullability.NullabilityBase clang static analyzer check. Learn more...",
                  "markdown": "nullability.NullabilityBase clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS9042",
                "shortDescription": {
                  "text": "Obsolete members should not be required."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerValistValistBase",
                "shortDescription": {
                  "text": "valist.ValistBase clang static analyzer check"
                },
                "fullDescription": {
                  "text": "valist.ValistBase clang static analyzer check. Learn more...",
                  "markdown": "valist.ValistBase clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityRedundantFunctionPtrDereference",
                "shortDescription": {
                  "text": "readability-redundant-function-ptr-dereference clang-tidy check"
                },
                "fullDescription": {
                  "text": "readability-redundant-function-ptr-dereference clang-tidy check. Learn more...",
                  "markdown": "readability-redundant-function-ptr-dereference clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/redundant-function-ptr-dereference.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RemoveRedundantOrStatement.False",
                "shortDescription": {
                  "text": "Remove redundant statement"
                },
                "fullDescription": {
                  "text": "$bool1$ |= false;",
                  "markdown": "$bool1$ \\|= false;"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseMethodAny.0",
                "shortDescription": {
                  "text": "Use method Any()"
                },
                "fullDescription": {
                  "text": "$seq$.Count() > 0 Learn more...",
                  "markdown": "$seq$.Count() \\> 0 [Learn more...](https://www.jetbrains.com/help/rider/UseMethodAny.0.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseMethodAny.1",
                "shortDescription": {
                  "text": "Use method Any()"
                },
                "fullDescription": {
                  "text": "$seq$.Count() >= 1",
                  "markdown": "$seq$.Count() \\>= 1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppDeclarationHidesLocal",
                "shortDescription": {
                  "text": "Hiding local declaration"
                },
                "fullDescription": {
                  "text": "A local declaration hides another local declaration",
                  "markdown": "A local declaration hides another local declaration"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseMethodAny.4",
                "shortDescription": {
                  "text": "Use method Any()"
                },
                "fullDescription": {
                  "text": "$seq$.Count() < 1",
                  "markdown": "$seq$.Count() \\< 1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticTrigraphs",
                "shortDescription": {
                  "text": "trigraphs clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wtrigraphs clang diagnostic. Learn more...",
                  "markdown": "-Wtrigraphs clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wtrigraphs)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseMethodAny.2",
                "shortDescription": {
                  "text": "Use method Any()"
                },
                "fullDescription": {
                  "text": "$seq$.Count() == 0",
                  "markdown": "$seq$.Count() == 0"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseMethodAny.3",
                "shortDescription": {
                  "text": "Use method Any()"
                },
                "fullDescription": {
                  "text": "$seq$.Count() <= 0",
                  "markdown": "$seq$.Count() \\<= 0"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUndefinedFuncTemplate",
                "shortDescription": {
                  "text": "undefined-func-template clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wundefined-func-template clang diagnostic. Learn more...",
                  "markdown": "-Wundefined-func-template clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wundefined-func-template)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FormatStringProblem",
                "shortDescription": {
                  "text": "String formatting method problems"
                },
                "fullDescription": {
                  "text": "Format string syntax errors (unescaped braces, invalid indices/alignments, unused arguments etc.) and other formatting method invocation problems",
                  "markdown": "Format string syntax errors (unescaped braces, invalid indices/alignments, unused arguments etc.) and other formatting method invocation problems"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFrameLargerThan",
                "shortDescription": {
                  "text": "frame-larger-than clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wframe-larger-than clang diagnostic. Learn more...",
                  "markdown": "-Wframe-larger-than clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wframe-larger-than)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithSingleCallToCount",
                "shortDescription": {
                  "text": "Replace with single call to Count(..)"
                },
                "fullDescription": {
                  "text": "$seq$.Where(Function ($x$) $expr$).Count()",
                  "markdown": "$seq$.Where(Function ($x$) $expr$).Count()"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.AutoFixture.IncorrectArgumentType",
                "shortDescription": {
                  "text": "NUnit.AutoFixture. Incompatible argument type or incorrect argument value."
                },
                "fullDescription": {
                  "text": "NUnit.AutoFixture. Argument value in the [InlineAutoData] attribute is incorrect or is not compatible with the test method parameter type.",
                  "markdown": "NUnit.AutoFixture. Argument value in the \\[InlineAutoData\\] attribute is incorrect or is not compatible with the test method parameter type."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeAvoidBind",
                "shortDescription": {
                  "text": "modernize-avoid-bind clang-tidy check"
                },
                "fullDescription": {
                  "text": "modernize-avoid-bind clang-tidy check. Learn more...",
                  "markdown": "modernize-avoid-bind clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/avoid-bind.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckForReferenceEqualityInstead.1",
                "shortDescription": {
                  "text": "Check for reference equality instead"
                },
                "fullDescription": {
                  "text": "$type$.Equals($type2$)",
                  "markdown": "$type$.Equals($type2$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckForReferenceEqualityInstead.3",
                "shortDescription": {
                  "text": "Check for reference equality instead"
                },
                "fullDescription": {
                  "text": "!$type$.Equals($type2$)",
                  "markdown": "!$type$.Equals($type2$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckForReferenceEqualityInstead.2",
                "shortDescription": {
                  "text": "Check for reference equality instead"
                },
                "fullDescription": {
                  "text": "Equals($type$,$type2$)",
                  "markdown": "Equals($type$,$type2$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckForReferenceEqualityInstead.4",
                "shortDescription": {
                  "text": "Check for reference equality instead"
                },
                "fullDescription": {
                  "text": "!Equals($type$,$type2$)",
                  "markdown": "!Equals($type$,$type2$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityStaticAccessedThroughInstance",
                "shortDescription": {
                  "text": "readability-static-accessed-through-instance clang-tidy check"
                },
                "fullDescription": {
                  "text": "readability-static-accessed-through-instance clang-tidy check. Learn more...",
                  "markdown": "readability-static-accessed-through-instance clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/static-accessed-through-instance.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftEndOfFile",
                "shortDescription": {
                  "text": "microsoft-end-of-file clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmicrosoft-end-of-file clang diagnostic. Learn more...",
                  "markdown": "-Wmicrosoft-end-of-file clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-end-of-file)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseNameofExpression",
                "shortDescription": {
                  "text": "Use 'nameof' expression to reference name"
                },
                "fullDescription": {
                  "text": "Replace string literal with statically typed 'nameof' expression Learn more...",
                  "markdown": "Replace string literal with statically typed 'nameof' expression [Learn more...](https://www.jetbrains.com/help/rider/UseNameofExpression.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticOpenmpLoopForm",
                "shortDescription": {
                  "text": "openmp-loop-form clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wopenmp-loop-form clang diagnostic. Learn more...",
                  "markdown": "-Wopenmp-loop-form clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wopenmp-loop-form)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCplusplusNewDelete",
                "shortDescription": {
                  "text": "cplusplus.NewDelete clang static analyzer check"
                },
                "fullDescription": {
                  "text": "cplusplus.NewDelete clang static analyzer check. Learn more...",
                  "markdown": "cplusplus.NewDelete clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedMember.Local",
                "shortDescription": {
                  "text": "Type member is never used (private accessibility)"
                },
                "fullDescription": {
                  "text": "Type member is never used Learn more...",
                  "markdown": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Local.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertMem57Cpp",
                "shortDescription": {
                  "text": "cert-mem57-cpp clang-tidy check"
                },
                "fullDescription": {
                  "text": "cert-mem57-cpp clang-tidy check. Learn more...",
                  "markdown": "cert-mem57-cpp clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/mem57-cpp.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppMismatchedClassTags",
                "shortDescription": {
                  "text": "Mismatched class tags"
                },
                "fullDescription": {
                  "text": "Tags of the declared class do not match previous declarations",
                  "markdown": "Tags of the declared class do not match previous declarations"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS9094",
                "shortDescription": {
                  "text": "This returns a parameter by reference through a ref parameter; but it can only safely be returned in a return statement."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS9095",
                "shortDescription": {
                  "text": "This returns by reference a member of parameter through a ref parameter; but it can only safely be returned in a return statement."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EnumerableSumInExplicitUncheckedContext",
                "shortDescription": {
                  "text": "'Enumerable.Sum' invocation in explicit unchecked context"
                },
                "fullDescription": {
                  "text": "'Enumerable.Sum' invocation in explicit unchecked context",
                  "markdown": "'Enumerable.Sum' invocation in explicit unchecked context"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS9097",
                "shortDescription": {
                  "text": "This ref-assigns a value that has a wider value escape scope than the target allowing assignment through the target of values with narrower escapes scopes."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPrivateModule",
                "shortDescription": {
                  "text": "private-module clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wprivate-module clang diagnostic. Learn more...",
                  "markdown": "-Wprivate-module clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wprivate-module)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MathClampMinGreaterThanMax",
                "shortDescription": {
                  "text": "Inconsistent arguments passed to 'Math.Clamp()' method"
                },
                "fullDescription": {
                  "text": "Argument 'min' is always greater than argument 'max'",
                  "markdown": "Argument 'min' is always greater than argument 'max'"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.IncorrectMonoBehaviourInstantiation",
                "shortDescription": {
                  "text": "'MonoBehaviour' instances must be instantiated with 'GameObject.AddComponent<T>()' instead of 'new'"
                },
                "fullDescription": {
                  "text": "Using 'new' to instantiate a class derived from 'MonoBehaviour' will not attach it to a 'GameObject' instance, and Unity will not call any event functions. Create a new instance using 'GameObject.AddComponent()'. Learn more...",
                  "markdown": "Using 'new' to instantiate a class derived from 'MonoBehaviour' will not attach it to a 'GameObject' instance, and Unity will not call any event functions. Create a new instance using 'GameObject.AddComponent()'. [Learn more...](https://github.com/JetBrains/resharper-unity/wiki/MonoBehaviors-must-be-instantiated-with-GameObject.AddComponent-instead-of-new)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS9083",
                "shortDescription": {
                  "text": "A member of a variable is returned by reference but was initialized to a value that cannot be returned by reference"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS9084",
                "shortDescription": {
                  "text": "Struct member returns 'this' or other instance members by reference."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MergeIntoNegatedPattern",
                "shortDescription": {
                  "text": "Merge negated null/pattern checks into complex pattern"
                },
                "fullDescription": {
                  "text": "Merge sequential negated null/pattern checks into single recursive/logical pattern check",
                  "markdown": "Merge sequential negated null/pattern checks into single recursive/logical pattern check"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS9085",
                "shortDescription": {
                  "text": "This ref-assigns an expression to a variable with a narrower escape scope."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS9086",
                "shortDescription": {
                  "text": "The branches of the ref conditional operator refer to variables with incompatible declaration scopes."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS9087",
                "shortDescription": {
                  "text": "This returns a parameter by reference but it is not a ref parameter."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityRedundantStringCstr",
                "shortDescription": {
                  "text": "readability-redundant-string-cstr clang-tidy check"
                },
                "fullDescription": {
                  "text": "readability-redundant-string-cstr clang-tidy check. Learn more...",
                  "markdown": "readability-redundant-string-cstr clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/redundant-string-cstr.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS9088",
                "shortDescription": {
                  "text": "This returns a parameter by reference but it is scoped to the current method."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS9089",
                "shortDescription": {
                  "text": "This returns by reference a member of parameter that is not a ref or out parameter."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticLocalTypeTemplateArgs",
                "shortDescription": {
                  "text": "local-type-template-args clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wlocal-type-template-args clang diagnostic. Learn more...",
                  "markdown": "-Wlocal-type-template-args clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wlocal-type-template-args)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LocalFunctionCanBeMadeStatic",
                "shortDescription": {
                  "text": "Local function can be made static"
                },
                "fullDescription": {
                  "text": "A local function does not use 'this' object (neither implicitly nor explicitly) or outside local variables and can be made static Learn more...",
                  "markdown": "A local function does not use 'this' object (neither implicitly nor explicitly) or outside local variables and can be made static [Learn more...](https://www.jetbrains.com/help/rider/LocalFunctionCanBeMadeStatic.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnassignedField.Global",
                "shortDescription": {
                  "text": "Unassigned field (non-private accessibility)"
                },
                "fullDescription": {
                  "text": "Field is never assigned",
                  "markdown": "Field is never assigned"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MarkupTextTypo",
                "shortDescription": {
                  "text": "Typo in markup text"
                },
                "fullDescription": {
                  "text": "Typo in markup text Learn more...",
                  "markdown": "Typo in markup text [Learn more...](https://www.jetbrains.com/help/rider/MarkupTextTypo.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spelling Issues",
                      "index": 49,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RouteTemplates.ConstraintArgumentCannotBeConverted",
                "shortDescription": {
                  "text": "Route parameter constraint argument cannot be converted to target type"
                },
                "fullDescription": {
                  "text": "Route parameter constraint argument cannot be converted to target type",
                  "markdown": "Route parameter constraint argument cannot be converted to target type"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerUnixCstringNullArg",
                "shortDescription": {
                  "text": "unix.cstring.NullArg clang static analyzer check"
                },
                "fullDescription": {
                  "text": "unix.cstring.NullArg clang static analyzer check. Learn more...",
                  "markdown": "unix.cstring.NullArg clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuAlignofExpression",
                "shortDescription": {
                  "text": "gnu-alignof-expression clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wgnu-alignof-expression clang diagnostic. Learn more...",
                  "markdown": "-Wgnu-alignof-expression clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-alignof-expression)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBRemoveToList.2",
                "shortDescription": {
                  "text": "Remove ToList()"
                },
                "fullDescription": {
                  "text": "$seq$.ToList().Count",
                  "markdown": "$seq$.ToList().Count"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBRemoveToList.1",
                "shortDescription": {
                  "text": "Remove ToList()"
                },
                "fullDescription": {
                  "text": "$seq$.ToList().ToArray()",
                  "markdown": "$seq$.ToList().ToArray()"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesPreferMemberInitializer",
                "shortDescription": {
                  "text": "cppcoreguidelines-prefer-member-initializer clang-tidy check"
                },
                "fullDescription": {
                  "text": "cppcoreguidelines-prefer-member-initializer clang-tidy check. Learn more...",
                  "markdown": "cppcoreguidelines-prefer-member-initializer clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/prefer-member-initializer.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftCast",
                "shortDescription": {
                  "text": "microsoft-cast clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmicrosoft-cast clang diagnostic. Learn more...",
                  "markdown": "-Wmicrosoft-cast clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-cast)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneMacroParentheses",
                "shortDescription": {
                  "text": "bugprone-macro-parentheses clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-macro-parentheses clang-tidy check. Learn more...",
                  "markdown": "bugprone-macro-parentheses clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/macro-parentheses.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS9090",
                "shortDescription": {
                  "text": "This returns by reference a member of parameter that is scoped to the current method."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS9091",
                "shortDescription": {
                  "text": "This returns local by reference but it is not a ref local."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS9092",
                "shortDescription": {
                  "text": "This returns a member of local by reference but it is not a ref local."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS9093",
                "shortDescription": {
                  "text": "This ref-assigns a value that can only escape the current method through a return statement."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithOfType.SingleOrDefault.2",
                "shortDescription": {
                  "text": "Replace with OfType<T>().SingleOrDefault() (replace with OfType<T>().SingleOrDefault(..))"
                },
                "fullDescription": {
                  "text": "$seq$.Select($x$ => $x$ as $T$).SingleOrDefault($y$ => $y$ != null && $expr$)",
                  "markdown": "$seq$.Select($x$ =\\> $x$ as $T$).SingleOrDefault($y$ =\\> $y$ != null \\&\\& $expr$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithOfType.SingleOrDefault.1",
                "shortDescription": {
                  "text": "Replace with OfType<T>().SingleOrDefault()"
                },
                "fullDescription": {
                  "text": "$seq$.Select($x$ => $x$ as $T$).SingleOrDefault($y$ => $y$ != null)",
                  "markdown": "$seq$.Select($x$ =\\> $x$ as $T$).SingleOrDefault($y$ =\\> $y$ != null)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNsreturnsMismatch",
                "shortDescription": {
                  "text": "nsreturns-mismatch clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wnsreturns-mismatch clang diagnostic. Learn more...",
                  "markdown": "-Wnsreturns-mismatch clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wnsreturns-mismatch)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAtomicMemoryOrdering",
                "shortDescription": {
                  "text": "atomic-memory-ordering clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Watomic-memory-ordering clang diagnostic. Learn more...",
                  "markdown": "-Watomic-memory-ordering clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#watomic-memory-ordering)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecated",
                "shortDescription": {
                  "text": "deprecated clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdeprecated clang diagnostic. Learn more...",
                  "markdown": "-Wdeprecated clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftGoto",
                "shortDescription": {
                  "text": "microsoft-goto clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmicrosoft-goto clang diagnostic. Learn more...",
                  "markdown": "-Wmicrosoft-goto clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-goto)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantBlankLines",
                "shortDescription": {
                  "text": "Incorrect blank lines (blank lines are redundant elsewhere)"
                },
                "fullDescription": {
                  "text": "Blank lines are redundant elsewhere Learn more...",
                  "markdown": "Blank lines are redundant elsewhere [Learn more...](https://www.jetbrains.com/help/rider/RedundantBlankLines.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticComplexComponentInit",
                "shortDescription": {
                  "text": "complex-component-init clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wcomplex-component-init clang diagnostic. Learn more...",
                  "markdown": "-Wcomplex-component-init clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wcomplex-component-init)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrangeTrailingCommaInSinglelineLists",
                "shortDescription": {
                  "text": "Use preferred style for trailing comma when the last element is not followed by a new line"
                },
                "fullDescription": {
                  "text": "Add or remove trailing comma when the last element is not followed by a new line according to code style settings Learn more...",
                  "markdown": "Add or remove trailing comma when the last element is not followed by a new line according to code style settings [Learn more...](https://www.jetbrains.com/help/rider/ArrangeTrailingCommaInSinglelineLists.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1066",
                "shortDescription": {
                  "text": "Default value specified for parameter will have no effect because it applies to a member that is used in contexts that do not allow optional arguments"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOptinPerformanceGCDAntipattern",
                "shortDescription": {
                  "text": "optin.performance.GCDAntipattern clang static analyzer check"
                },
                "fullDescription": {
                  "text": "optin.performance.GCDAntipattern clang static analyzer check. Learn more...",
                  "markdown": "optin.performance.GCDAntipattern clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyGoogleReadabilityFunctionSize",
                "shortDescription": {
                  "text": "google-readability-function-size clang-tidy check"
                },
                "fullDescription": {
                  "text": "google-readability-function-size clang-tidy check. Learn more...",
                  "markdown": "google-readability-function-size clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/readability-function-size.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticStrlcpyStrlcatSize",
                "shortDescription": {
                  "text": "strlcpy-strlcat-size clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wstrlcpy-strlcat-size clang diagnostic. Learn more...",
                  "markdown": "-Wstrlcpy-strlcat-size clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wstrlcpy-strlcat-size)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBWarnings__BC400005",
                "shortDescription": {
                  "text": "Member shadows an overriable member"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://msdn.microsoft.com/en-us/library/fs06ef5d.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DuplicateResource",
                "shortDescription": {
                  "text": "Duplicate resource name"
                },
                "fullDescription": {
                  "text": "Resource file contains two or more items with identical names Learn more...",
                  "markdown": "Resource file contains two or more items with identical names [Learn more...](https://www.jetbrains.com/help/rider/DuplicateResource.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAbseilTimeComparison",
                "shortDescription": {
                  "text": "abseil-time-comparison clang-tidy check"
                },
                "fullDescription": {
                  "text": "abseil-time-comparison clang-tidy check. Learn more...",
                  "markdown": "abseil-time-comparison clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/time-comparison.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCocoaNonNilReturnValue",
                "shortDescription": {
                  "text": "osx.cocoa.NonNilReturnValue clang static analyzer check"
                },
                "fullDescription": {
                  "text": "osx.cocoa.NonNilReturnValue clang static analyzer check. Learn more...",
                  "markdown": "osx.cocoa.NonNilReturnValue clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSometimesUninitialized",
                "shortDescription": {
                  "text": "sometimes-uninitialized clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wsometimes-uninitialized clang diagnostic. Learn more...",
                  "markdown": "-Wsometimes-uninitialized clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wsometimes-uninitialized)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMsvcNotFound",
                "shortDescription": {
                  "text": "msvc-not-found clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmsvc-not-found clang diagnostic. Learn more...",
                  "markdown": "-Wmsvc-not-found clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmsvc-not-found)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EventNeverSubscribedTo.Local",
                "shortDescription": {
                  "text": "Event is never subscribed to (private accessibility)"
                },
                "fullDescription": {
                  "text": "Event is never subscribed to",
                  "markdown": "Event is never subscribed to"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.ExpectedScriptableObject",
                "shortDescription": {
                  "text": "Expected type derived from 'ScriptableObject'"
                },
                "fullDescription": {
                  "text": "Expected type derived from 'ScriptableObject'",
                  "markdown": "Expected type derived from 'ScriptableObject'"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyConcurrencyMtUnsafe",
                "shortDescription": {
                  "text": "concurrency-mt-unsafe clang-tidy check"
                },
                "fullDescription": {
                  "text": "concurrency-mt-unsafe clang-tidy check. Learn more...",
                  "markdown": "concurrency-mt-unsafe clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/concurrency/mt-unsafe.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NegationOfRelationalPattern",
                "shortDescription": {
                  "text": "Simplify negated relational pattern"
                },
                "fullDescription": {
                  "text": "Suggest to replace `x is not > 42` to ` x is <= 42`",
                  "markdown": "Suggest to replace \\`x is not \\> 42\\` to \\` x is \\<= 42\\`"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TryStatementsCanBeMerged",
                "shortDescription": {
                  "text": "try-catch and try-finally statements can be merged"
                },
                "fullDescription": {
                  "text": "try-catch and try-finally statements can be merged",
                  "markdown": "try-catch and try-finally statements can be merged"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnusedTemplate",
                "shortDescription": {
                  "text": "unused-template clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunused-template clang diagnostic. Learn more...",
                  "markdown": "-Wunused-template clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-template)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyTitleTag",
                "shortDescription": {
                  "text": "Important tags or attributes missing (empty <title>)"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantEmptyStatement",
                "shortDescription": {
                  "text": "Redundant empty statement"
                },
                "fullDescription": {
                  "text": "Redundant empty statement",
                  "markdown": "Redundant empty statement"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1058",
                "shortDescription": {
                  "text": "A previous catch clause already catches all exceptions"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://msdn.microsoft.com/en-us/library/ms228623.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAbseilStringFindStrContains",
                "shortDescription": {
                  "text": "abseil-string-find-str-contains clang-tidy check"
                },
                "fullDescription": {
                  "text": "abseil-string-find-str-contains clang-tidy check. Learn more...",
                  "markdown": "abseil-string-find-str-contains clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/string-find-str-contains.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticError",
                "shortDescription": {
                  "text": "Clang compiler error"
                },
                "fullDescription": {
                  "text": "Clang compiler error.",
                  "markdown": "Clang compiler error."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PossiblyMissingIndexerInitializerComma",
                "shortDescription": {
                  "text": "Possibly missing comma before indexer initializer"
                },
                "fullDescription": {
                  "text": "Assignment expression inside member initializer value looks suspicious. Comma is probably missing.",
                  "markdown": "Assignment expression inside member initializer value looks suspicious. Comma is probably missing."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxSecKeychainAPI",
                "shortDescription": {
                  "text": "osx.SecKeychainAPI clang static analyzer check"
                },
                "fullDescription": {
                  "text": "osx.SecKeychainAPI clang static analyzer check. Learn more...",
                  "markdown": "osx.SecKeychainAPI clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MultipleTypeMembersOnOneLine",
                "shortDescription": {
                  "text": "Incorrect line breaks (multiple type members on one line)"
                },
                "fullDescription": {
                  "text": "Multiple type members on one line Learn more...",
                  "markdown": "Multiple type members on one line [Learn more...](https://www.jetbrains.com/help/rider/MultipleTypeMembersOnOneLine.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticModulesImportNestedRedundant",
                "shortDescription": {
                  "text": "modules-import-nested-redundant clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmodules-import-nested-redundant clang diagnostic. Learn more...",
                  "markdown": "-Wmodules-import-nested-redundant clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmodules-import-nested-redundant)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAttributePackedForBitfield",
                "shortDescription": {
                  "text": "attribute-packed-for-bitfield clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wattribute-packed-for-bitfield clang diagnostic. Learn more...",
                  "markdown": "-Wattribute-packed-for-bitfield clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wattribute-packed-for-bitfield)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnusedLocalTypedef",
                "shortDescription": {
                  "text": "unused-local-typedef clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunused-local-typedef clang diagnostic. Learn more...",
                  "markdown": "-Wunused-local-typedef clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-local-typedef)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OverriddenWithEmptyValue",
                "shortDescription": {
                  "text": "Resource overrides base resource with empty value"
                },
                "fullDescription": {
                  "text": "Base resource contains a non-empty value while this resource is empty",
                  "markdown": "Base resource contains a non-empty value while this resource is empty"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBadSquareBracketsSpaces",
                "shortDescription": {
                  "text": "Incorrect spacing (around square brackets within a statement)"
                },
                "fullDescription": {
                  "text": "Around square brackets within a statement",
                  "markdown": "Around square brackets within a statement"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.RedundantPropertyTypeQualifier",
                "shortDescription": {
                  "text": "Redundant property type qualifier"
                },
                "fullDescription": {
                  "text": "Property owner type qualifier is redundant and can be safely removed",
                  "markdown": "Property owner type qualifier is redundant and can be safely removed"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp11CompatReservedUserDefinedLiteral",
                "shortDescription": {
                  "text": "c++11-compat-reserved-user-defined-literal clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wc++11-compat-reserved-user-defined-literal clang diagnostic. Learn more...",
                  "markdown": "-Wc++11-compat-reserved-user-defined-literal clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wc-11-compat-reserved-user-defined-literal)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NotDeclaredInParentCulture",
                "shortDescription": {
                  "text": "Resource is not declared in base culture"
                },
                "fullDescription": {
                  "text": "Resource is not declared in base culture Learn more...",
                  "markdown": "Resource is not declared in base culture [Learn more...](https://www.jetbrains.com/help/rider/NotDeclaredInParentCulture.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertIfStatementToSwitchStatement",
                "shortDescription": {
                  "text": "Convert 'if' statement into 'switch'"
                },
                "fullDescription": {
                  "text": "Convert series of 'if' statements into single 'switch'",
                  "markdown": "Convert series of 'if' statements into single 'switch'"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticProtocol",
                "shortDescription": {
                  "text": "protocol clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wprotocol clang diagnostic. Learn more...",
                  "markdown": "-Wprotocol clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wprotocol)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPchDateTime",
                "shortDescription": {
                  "text": "pch-date-time clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wpch-date-time clang diagnostic. Learn more...",
                  "markdown": "-Wpch-date-time clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wpch-date-time)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.BurstWriteStaticField",
                "shortDescription": {
                  "text": "Writing to a static field is not supported"
                },
                "fullDescription": {
                  "text": "Writing to a static field is not supported",
                  "markdown": "Writing to a static field is not supported"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity Burst Compiler Warnings",
                      "index": 34,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticRedundantConstevalIf",
                "shortDescription": {
                  "text": "redundant-consteval-if clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wredundant-consteval-if clang diagnostic. Learn more...",
                  "markdown": "-Wredundant-consteval-if clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wredundant-consteval-if)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantScopedParameterModifier",
                "shortDescription": {
                  "text": "Redundant 'scoped' parameter modifier"
                },
                "fullDescription": {
                  "text": "'scoped' parameter modifier is redundant because the target parameter is already implicitly 'scoped' by the language rules",
                  "markdown": "'scoped' parameter modifier is redundant because the target parameter is already implicitly 'scoped' by the language rules"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantNullableAnnotationOnTypeConstraintHasNonNullableBaseType",
                "shortDescription": {
                  "text": "Redundant nullable annotation on base type constraint of type parameter constrained by another non-nullable base type"
                },
                "fullDescription": {
                  "text": "The nullable annotation on base type constraint is redundant because type parameter is constrained by another non-nullable base type",
                  "markdown": "The nullable annotation on base type constraint is redundant because type parameter is constrained by another non-nullable base type"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNonCTypedefForLinkage",
                "shortDescription": {
                  "text": "non-c-typedef-for-linkage clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wnon-c-typedef-for-linkage clang diagnostic. Learn more...",
                  "markdown": "-Wnon-c-typedef-for-linkage clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wnon-c-typedef-for-linkage)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuRedeclaredEnum",
                "shortDescription": {
                  "text": "gnu-redeclared-enum clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wgnu-redeclared-enum clang diagnostic. Learn more...",
                  "markdown": "-Wgnu-redeclared-enum clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-redeclared-enum)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.RedundantResource",
                "shortDescription": {
                  "text": "Redundant resource"
                },
                "fullDescription": {
                  "text": "Resource is not used and can be safely removed",
                  "markdown": "Resource is not used and can be safely removed"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppVolatileParameterInDeclaration",
                "shortDescription": {
                  "text": "Volatile-qualified parameter in a function declaration"
                },
                "fullDescription": {
                  "text": "Volatile-qualification of parameters has an effect only in function definitions",
                  "markdown": "Volatile-qualification of parameters has an effect only in function definitions"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCxxAttributeExtension",
                "shortDescription": {
                  "text": "cxx-attribute-extension clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wcxx-attribute-extension clang diagnostic. Learn more...",
                  "markdown": "-Wcxx-attribute-extension clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wcxx-attribute-extension)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyPerformanceMoveConstArg",
                "shortDescription": {
                  "text": "performance-move-const-arg clang-tidy check"
                },
                "fullDescription": {
                  "text": "performance-move-const-arg clang-tidy check. Learn more...",
                  "markdown": "performance-move-const-arg clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/move-const-arg.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Mvc.MasterpageNotResolved",
                "shortDescription": {
                  "text": "MVC (unknown masterpage)"
                },
                "fullDescription": {
                  "text": "Unknown ASP.NET MVC Masterpage",
                  "markdown": "Unknown ASP.NET MVC Masterpage"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxMIG",
                "shortDescription": {
                  "text": "osx.MIG clang static analyzer check"
                },
                "fullDescription": {
                  "text": "osx.MIG clang static analyzer check. Learn more...",
                  "markdown": "osx.MIG clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8509",
                "shortDescription": {
                  "text": "The switch expression does not handle all possible inputs (it is not exhaustive)."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBPossibleMistakenArgument",
                "shortDescription": {
                  "text": "Possible mistaken argument"
                },
                "fullDescription": {
                  "text": "$type$.IsInstanceOfType($type$)",
                  "markdown": "$type$.IsInstanceOfType($type$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8500",
                "shortDescription": {
                  "text": "This takes the address of, gets the size of, or declares a pointer to a managed type."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RouteTemplates.MatchingConstraintConstructorNotResolved",
                "shortDescription": {
                  "text": "Matching parameter constraint's constructor not found"
                },
                "fullDescription": {
                  "text": "Matching parameter constraint's constructor not found",
                  "markdown": "Matching parameter constraint's constructor not found"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantNullableFlowAttribute",
                "shortDescription": {
                  "text": "Redundant nullable attribute"
                },
                "fullDescription": {
                  "text": "Nullable attribute has no effect and can be safely removed. This can be caused by the target element already having the desired nullable annotation.",
                  "markdown": "Nullable attribute has no effect and can be safely removed. This can be caused by the target element already having the desired nullable annotation."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppEnforceIfStatementBraces",
                "shortDescription": {
                  "text": "Use preferred braces style (enforce braces in 'if' statement)"
                },
                "fullDescription": {
                  "text": "Use braces to separate 'if' statement body",
                  "markdown": "Use braces to separate 'if' statement body"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ServiceContractWithoutOperations",
                "shortDescription": {
                  "text": "Interfaces marked as ServiceContract should declare at least one OperationContract"
                },
                "fullDescription": {
                  "text": "Interfaces marked as ServiceContract should declare at least one OperationContract",
                  "markdown": "Interfaces marked as ServiceContract should declare at least one OperationContract"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedEnumEnumConversion",
                "shortDescription": {
                  "text": "deprecated-enum-enum-conversion clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdeprecated-enum-enum-conversion clang diagnostic. Learn more...",
                  "markdown": "-Wdeprecated-enum-enum-conversion clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-enum-enum-conversion)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppEnforceCVQualifiersOrder",
                "shortDescription": {
                  "text": "Use preferred cv-qualifiers style (enforce the order of cv-qualifiers)"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadListLineBreaks",
                "shortDescription": {
                  "text": "Incorrect line breaks (around comma in lists)"
                },
                "fullDescription": {
                  "text": "Around comma in lists Learn more...",
                  "markdown": "Around comma in lists [Learn more...](https://www.jetbrains.com/help/rider/BadListLineBreaks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticRedundantMove",
                "shortDescription": {
                  "text": "redundant-move clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wredundant-move clang diagnostic. Learn more...",
                  "markdown": "-Wredundant-move clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wredundant-move)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerSecurityInsecureAPIStrcpy",
                "shortDescription": {
                  "text": "security.insecureAPI.strcpy clang static analyzer check"
                },
                "fullDescription": {
                  "text": "security.insecureAPI.strcpy clang static analyzer check. Learn more...",
                  "markdown": "security.insecureAPI.strcpy clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNestedAnonTypes",
                "shortDescription": {
                  "text": "nested-anon-types clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wnested-anon-types clang diagnostic. Learn more...",
                  "markdown": "-Wnested-anon-types clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wnested-anon-types)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuggestVarOrType_Elsewhere",
                "shortDescription": {
                  "text": "Use preferred 'var' style (elsewhere)"
                },
                "fullDescription": {
                  "text": "Convert if declaration is not of a built-in or simple type and is not evident from the usage Learn more...",
                  "markdown": "Convert if declaration is not of a built-in or simple type and is not evident from the usage [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_Elsewhere.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCoreFoundationContainersPointerSizedValues",
                "shortDescription": {
                  "text": "osx.coreFoundation.containers.PointerSizedValues clang static analyzer check"
                },
                "fullDescription": {
                  "text": "osx.coreFoundation.containers.PointerSizedValues clang static analyzer check. Learn more...",
                  "markdown": "osx.coreFoundation.containers.PointerSizedValues clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp98CompatPedantic",
                "shortDescription": {
                  "text": "c++98-compat-pedantic clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wc++98-compat-pedantic clang diagnostic. Learn more...",
                  "markdown": "-Wc++98-compat-pedantic clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wc-98-compat-pedantic)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticImplicitIntConversion",
                "shortDescription": {
                  "text": "implicit-int-conversion clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wimplicit-int-conversion clang diagnostic. Learn more...",
                  "markdown": "-Wimplicit-int-conversion clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-int-conversion)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuAnonymousStruct",
                "shortDescription": {
                  "text": "gnu-anonymous-struct clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wgnu-anonymous-struct clang diagnostic. Learn more...",
                  "markdown": "-Wgnu-anonymous-struct clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-anonymous-struct)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerSecurityInsecureAPIBzero",
                "shortDescription": {
                  "text": "security.insecureAPI.bzero clang static analyzer check"
                },
                "fullDescription": {
                  "text": "security.insecureAPI.bzero clang static analyzer check. Learn more...",
                  "markdown": "security.insecureAPI.bzero clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftConstInit",
                "shortDescription": {
                  "text": "microsoft-const-init clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmicrosoft-const-init clang diagnostic. Learn more...",
                  "markdown": "-Wmicrosoft-const-init clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-const-init)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertIfStatementToConditionalTernaryExpression",
                "shortDescription": {
                  "text": "'if' statement can be rewritten as '?:' expression"
                },
                "fullDescription": {
                  "text": "Convert the following code: \r\n  if (condition) x = expr1;\r\n  else x = expr2;\r\n To: \r\n  x = condition ? expr1 : expr2;\r\n Learn more...",
                  "markdown": "Convert the following code:\n\n```\n\r\n  if (condition) x = expr1;\r\n  else x = expr2;\r\n```\n\nTo:\n\n```\n\r\n  x = condition ? expr1 : expr2;\r\n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/ConvertIfStatementToConditionalTernaryExpression.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCoreDynamicTypePropagation",
                "shortDescription": {
                  "text": "core.DynamicTypePropagation clang static analyzer check"
                },
                "fullDescription": {
                  "text": "core.DynamicTypePropagation clang static analyzer check. Learn more...",
                  "markdown": "core.DynamicTypePropagation clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantSpace",
                "shortDescription": {
                  "text": "Incorrect spacing (space is redundant elsewhere)"
                },
                "fullDescription": {
                  "text": "Space is redundant elsewhere Learn more...",
                  "markdown": "Space is redundant elsewhere [Learn more...](https://www.jetbrains.com/help/rider/RedundantSpace.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseEventArgsEmptyField",
                "shortDescription": {
                  "text": "Use 'EventArgs.Empty'"
                },
                "fullDescription": {
                  "text": "Replace an empty 'EventArgs' allocation with a use of the predefined 'EventArgs.Empty' field",
                  "markdown": "Replace an empty 'EventArgs' allocation with a use of the predefined 'EventArgs.Empty' field"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PropertyNotResolved",
                "shortDescription": {
                  "text": "Cannot resolve property"
                },
                "fullDescription": {
                  "text": "Cannot resolve property",
                  "markdown": "Cannot resolve property"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticVoidPointerToIntCast",
                "shortDescription": {
                  "text": "void-pointer-to-int-cast clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wvoid-pointer-to-int-cast clang diagnostic. Learn more...",
                  "markdown": "-Wvoid-pointer-to-int-cast clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wvoid-pointer-to-int-cast)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RequiredBaseTypesIsNotInherited",
                "shortDescription": {
                  "text": "Base type is required"
                },
                "fullDescription": {
                  "text": "Concrete base type is required by '[BaseTypeRequired]' attribute Learn more...",
                  "markdown": "Concrete base type is required by '\\[BaseTypeRequired\\]' attribute [Learn more...](https://www.jetbrains.com/help/rider/RequiredBaseTypesIsNotInherited.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Constraints Violations",
                      "index": 43,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSelectorTypeMismatch",
                "shortDescription": {
                  "text": "selector-type-mismatch clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wselector-type-mismatch clang diagnostic. Learn more...",
                  "markdown": "-Wselector-type-mismatch clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wselector-type-mismatch)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppDeclaratorUsedBeforeInitialization",
                "shortDescription": {
                  "text": "Local variable is used without being initialized"
                },
                "fullDescription": {
                  "text": "Local variable is used without being initialized",
                  "markdown": "Local variable is used without being initialized"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCoreFoundationContainersOutOfBounds",
                "shortDescription": {
                  "text": "osx.coreFoundation.containers.OutOfBounds clang static analyzer check"
                },
                "fullDescription": {
                  "text": "osx.coreFoundation.containers.OutOfBounds clang static analyzer check. Learn more...",
                  "markdown": "osx.coreFoundation.containers.OutOfBounds clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ParameterOnlyUsedForPreconditionCheck.Global",
                "shortDescription": {
                  "text": "Parameter is only used for precondition check (non-private accessibility)"
                },
                "fullDescription": {
                  "text": "Parameter is only used for precondition check",
                  "markdown": "Parameter is only used for precondition check"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuEmptyInitializer",
                "shortDescription": {
                  "text": "gnu-empty-initializer clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wgnu-empty-initializer clang diagnostic. Learn more...",
                  "markdown": "-Wgnu-empty-initializer clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-empty-initializer)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftEnumForwardReference",
                "shortDescription": {
                  "text": "microsoft-enum-forward-reference clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmicrosoft-enum-forward-reference clang diagnostic. Learn more...",
                  "markdown": "-Wmicrosoft-enum-forward-reference clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-enum-forward-reference)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.StyleInvalidTargetType",
                "shortDescription": {
                  "text": "Style target type is not convertible to base type"
                },
                "fullDescription": {
                  "text": "Style declaration target type is not convertible to style base type",
                  "markdown": "Style declaration target type is not convertible to style base type"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyMiscMisplacedConst",
                "shortDescription": {
                  "text": "misc-misplaced-const clang-tidy check"
                },
                "fullDescription": {
                  "text": "misc-misplaced-const clang-tidy check. Learn more...",
                  "markdown": "misc-misplaced-const clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/misplaced-const.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyLlvmHeaderGuard",
                "shortDescription": {
                  "text": "llvm-header-guard clang-tidy check"
                },
                "fullDescription": {
                  "text": "llvm-header-guard clang-tidy check. Learn more...",
                  "markdown": "llvm-header-guard clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/llvm/header-guard.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppTabsAreDisallowed",
                "shortDescription": {
                  "text": "Incorrect spacing (tabs are prohibited)"
                },
                "fullDescription": {
                  "text": "Prohibits the use of tabulation character everywhere in file",
                  "markdown": "Prohibits the use of tabulation character everywhere in file"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneIntegerDivision",
                "shortDescription": {
                  "text": "bugprone-integer-division clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-integer-division clang-tidy check. Learn more...",
                  "markdown": "bugprone-integer-division clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/integer-division.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticBadFunctionCast",
                "shortDescription": {
                  "text": "bad-function-cast clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wbad-function-cast clang diagnostic. Learn more...",
                  "markdown": "-Wbad-function-cast clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wbad-function-cast)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInvalidSourceEncoding",
                "shortDescription": {
                  "text": "invalid-source-encoding clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Winvalid-source-encoding clang diagnostic. Learn more...",
                  "markdown": "-Winvalid-source-encoding clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#winvalid-source-encoding)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.PossibleMisapplicationOfAttributeToMultipleFields",
                "shortDescription": {
                  "text": "Possible incorrect application of attribute to multiple fields"
                },
                "fullDescription": {
                  "text": "Applying an attribute to a single declaration containing multiple fields will apply the attribute to each field. The highlighted attribute (e.g. 'FormerlySerializedAs') is intended to be applied only to a single field. Prefer an explicit application to a single field in a single declaration. Learn more...",
                  "markdown": "Applying an attribute to a single declaration containing multiple fields will apply the attribute to each field. The highlighted attribute (e.g. 'FormerlySerializedAs') is intended to be applied only to a single field. Prefer an explicit application to a single field in a single declaration. [Learn more...](https://github.com/JetBrains/resharper-unity/wiki/Possible-mis-application-of-FormerlySerializedAs-attribute-to-multiple-fields)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesProBoundsConstantArrayIndex",
                "shortDescription": {
                  "text": "cppcoreguidelines-pro-bounds-constant-array-index clang-tidy check"
                },
                "fullDescription": {
                  "text": "cppcoreguidelines-pro-bounds-constant-array-index clang-tidy check. Learn more...",
                  "markdown": "cppcoreguidelines-pro-bounds-constant-array-index clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/pro-bounds-constant-array-index.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerWebkitRefCntblBaseVirtualDtor",
                "shortDescription": {
                  "text": "webkit.RefCntblBaseVirtualDtor clang static analyzer check"
                },
                "fullDescription": {
                  "text": "webkit.RefCntblBaseVirtualDtor clang static analyzer check. Learn more...",
                  "markdown": "webkit.RefCntblBaseVirtualDtor clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppEnforceCVQualifiersPlacement",
                "shortDescription": {
                  "text": "Use preferred cv-qualifiers style (enforce the placement of cv-qualifiers)"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGpuMaybeWrongSide",
                "shortDescription": {
                  "text": "gpu-maybe-wrong-side clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wgpu-maybe-wrong-side clang diagnostic. Learn more...",
                  "markdown": "-Wgpu-maybe-wrong-side clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wgpu-maybe-wrong-side)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticClassConversion",
                "shortDescription": {
                  "text": "class-conversion clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wclass-conversion clang diagnostic. Learn more...",
                  "markdown": "-Wclass-conversion clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wclass-conversion)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.RedundantArgumentInsteadOfExpectedResult",
                "shortDescription": {
                  "text": "NUnit. Redundant argument instead of ExpectedResult."
                },
                "fullDescription": {
                  "text": "Redundant argument is found instead of 'ExpectedResult' Learn more...",
                  "markdown": "Redundant argument is found instead of 'ExpectedResult' [Learn more...](https://www.jetbrains.com/help/rider/NUnit.RedundantArgumentInsteadOfExpectedResult.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSlashUFilename",
                "shortDescription": {
                  "text": "slash-u-filename clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wslash-u-filename clang diagnostic. Learn more...",
                  "markdown": "-Wslash-u-filename clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wslash-u-filename)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SafeCastIsUsedAsTypeCheck",
                "shortDescription": {
                  "text": "Try cast and check for null can be replaced with a type check"
                },
                "fullDescription": {
                  "text": "Try cast and check for null can be replaced with a type check",
                  "markdown": "Try cast and check for null can be replaced with a type check"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyLlvmlibcImplementationInNamespace",
                "shortDescription": {
                  "text": "llvmlibc-implementation-in-namespace clang-tidy check"
                },
                "fullDescription": {
                  "text": "llvmlibc-implementation-in-namespace clang-tidy check. Learn more...",
                  "markdown": "llvmlibc-implementation-in-namespace clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/llvmlibc/implementation-in-namespace.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSection",
                "shortDescription": {
                  "text": "section clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wsection clang diagnostic. Learn more...",
                  "markdown": "-Wsection clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wsection)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1911",
                "shortDescription": {
                  "text": "Access to a member through 'base' keyword from anonymous method, lambda expression, query expression or iterator results in unverifiable code"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://msdn.microsoft.com/en-us/library/ms228459.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerApiModelingTrustNonnull",
                "shortDescription": {
                  "text": "apiModeling.TrustNonnull clang static analyzer check"
                },
                "fullDescription": {
                  "text": "apiModeling.TrustNonnull clang static analyzer check. Learn more...",
                  "markdown": "apiModeling.TrustNonnull clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.BurstLoadingStaticNotReadonly",
                "shortDescription": {
                  "text": "Loading from a non-readonly static field is not supported"
                },
                "fullDescription": {
                  "text": "Loading from a non-readonly static field is not supported",
                  "markdown": "Loading from a non-readonly static field is not supported"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity Burst Compiler Warnings",
                      "index": 34,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerValistUninitialized",
                "shortDescription": {
                  "text": "valist.Uninitialized clang static analyzer check"
                },
                "fullDescription": {
                  "text": "valist.Uninitialized clang static analyzer check. Learn more...",
                  "markdown": "valist.Uninitialized clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPreCpp20Compat",
                "shortDescription": {
                  "text": "pre-c++20-compat clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wpre-c++20-compat clang diagnostic. Learn more...",
                  "markdown": "-Wpre-c++20-compat clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wpre-c-20-compat)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPreCpp17Compat",
                "shortDescription": {
                  "text": "pre-c++17-compat clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wpre-c++17-compat clang diagnostic. Learn more...",
                  "markdown": "-Wpre-c++17-compat clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wpre-c-17-compat)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.RedundantInitializeOnLoadAttribute",
                "shortDescription": {
                  "text": "Redundant attribute usage (redundant 'InitializeOnLoad' attribute)"
                },
                "fullDescription": {
                  "text": "The 'InitializeOnLoad' attribute is redundant when the static constructor is missing Learn more...",
                  "markdown": "The 'InitializeOnLoad' attribute is redundant when the static constructor is missing [Learn more...](https://github.com/JetBrains/resharper-unity/wiki/Redundant-InitializeOnLoad-attribute)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InvertCondition.1",
                "shortDescription": {
                  "text": "Invert condition"
                },
                "fullDescription": {
                  "text": "!$seq$.Any($args$) ? $expr$ : $expr2$",
                  "markdown": "!$seq$.Any($args$) ? $expr$ : $expr2$"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftDefaultArgRedefinition",
                "shortDescription": {
                  "text": "microsoft-default-arg-redefinition clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmicrosoft-default-arg-redefinition clang diagnostic. Learn more...",
                  "markdown": "-Wmicrosoft-default-arg-redefinition clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-default-arg-redefinition)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticRedeclaredClassMember",
                "shortDescription": {
                  "text": "redeclared-class-member clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wredeclared-class-member clang diagnostic. Learn more...",
                  "markdown": "-Wredeclared-class-member clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wredeclared-class-member)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseMethodIsInstanceOfType",
                "shortDescription": {
                  "text": "Use method IsInstanceOfType(..)"
                },
                "fullDescription": {
                  "text": "$type$.IsAssignableFrom($expr$.GetType())",
                  "markdown": "$type$.IsAssignableFrom($expr$.GetType())"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneBranchClone",
                "shortDescription": {
                  "text": "bugprone-branch-clone clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-branch-clone clang-tidy check. Learn more...",
                  "markdown": "bugprone-branch-clone clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/branch-clone.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCplusplusInnerPointer",
                "shortDescription": {
                  "text": "cplusplus.InnerPointer clang static analyzer check"
                },
                "fullDescription": {
                  "text": "cplusplus.InnerPointer clang static analyzer check. Learn more...",
                  "markdown": "cplusplus.InnerPointer clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCoreUninitializedUndefReturn",
                "shortDescription": {
                  "text": "core.uninitialized.UndefReturn clang static analyzer check"
                },
                "fullDescription": {
                  "text": "core.uninitialized.UndefReturn clang static analyzer check. Learn more...",
                  "markdown": "core.uninitialized.UndefReturn clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticReinterpretBaseClass",
                "shortDescription": {
                  "text": "reinterpret-base-class clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wreinterpret-base-class clang diagnostic. Learn more...",
                  "markdown": "-Wreinterpret-base-class clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wreinterpret-base-class)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.PerformanceCriticalCodeInvocation",
                "shortDescription": {
                  "text": "Expensive method invocation"
                },
                "fullDescription": {
                  "text": "This method call is inefficient when called inside a performance critical context. Learn more...",
                  "markdown": "This method call is inefficient when called inside a performance critical context. [Learn more...](https://github.com/JetBrains/resharper-unity/wiki/Performance-critical-context-and-costly-methods)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity Performance Inspections",
                      "index": 67,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInvalidIosDeploymentTarget",
                "shortDescription": {
                  "text": "invalid-ios-deployment-target clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Winvalid-ios-deployment-target clang diagnostic. Learn more...",
                  "markdown": "-Winvalid-ios-deployment-target clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#winvalid-ios-deployment-target)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InconsistentOrderOfLocks",
                "shortDescription": {
                  "text": "Inconsistent order of taken locks"
                },
                "fullDescription": {
                  "text": "The expression is used in several lock statements with inconsistent execution order, forming a cycle. This might lead to a possible deadlock in a multi-threaded execution. Learn more...",
                  "markdown": "The expression is used in several lock statements with inconsistent execution order, forming a cycle. This might lead to a possible deadlock in a multi-threaded execution. [Learn more...](https://www.jetbrains.com/help/rider/InconsistentOrderOfLocks.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneEasilySwappableParameters",
                "shortDescription": {
                  "text": "bugprone-easily-swappable-parameters clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-easily-swappable-parameters clang-tidy check. Learn more...",
                  "markdown": "bugprone-easily-swappable-parameters clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/easily-swappable-parameters.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticOpenmpMapping",
                "shortDescription": {
                  "text": "openmp-mapping clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wopenmp-mapping clang diagnostic. Learn more...",
                  "markdown": "-Wopenmp-mapping clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wopenmp-mapping)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8524",
                "shortDescription": {
                  "text": "The switch expression does not handle some values of its input type (it is not exhaustive) involving an unnamed enum value."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArgumentsStyleLiteral",
                "shortDescription": {
                  "text": "Use preferred argument style for literal values"
                },
                "fullDescription": {
                  "text": "Prefer using named/positional argument when boolean, numeric, 'byte', or 'char' literal value is passed Learn more...",
                  "markdown": "Prefer using named/positional argument when boolean, numeric, 'byte', or 'char' literal value is passed [Learn more...](https://www.jetbrains.com/help/rider/ArgumentsStyleLiteral.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyMpiTypeMismatch",
                "shortDescription": {
                  "text": "mpi-type-mismatch clang-tidy check"
                },
                "fullDescription": {
                  "text": "mpi-type-mismatch clang-tidy check. Learn more...",
                  "markdown": "mpi-type-mismatch clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/mpi/type-mismatch.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FSharpRedundantParens",
                "shortDescription": {
                  "text": "Remove redundant parentheses"
                },
                "fullDescription": {
                  "text": "Parentheses can be safely removed without changing code semantics.",
                  "markdown": "Parentheses can be safely removed without changing code semantics."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertPos47C",
                "shortDescription": {
                  "text": "cert-pos47-c clang-tidy check"
                },
                "fullDescription": {
                  "text": "cert-pos47-c clang-tidy check. Learn more...",
                  "markdown": "cert-pos47-c clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/pos47-c.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MemberCanBeMadeStatic.Local",
                "shortDescription": {
                  "text": "Member can be made static (shared) (private accessibility)"
                },
                "fullDescription": {
                  "text": "A non-virtual instance member does not use 'this' object (neither implicitly nor explicitly) and can be made static (shared) Learn more...",
                  "markdown": "A non-virtual instance member does not use 'this' object (neither implicitly nor explicitly) and can be made static (shared) [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBeMadeStatic.Local.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RouteTemplates.OptionalParameterCanBePrecededOnlyBySinglePeriod",
                "shortDescription": {
                  "text": "Optional parameter can be preceded only by single period ('.') in the segment"
                },
                "fullDescription": {
                  "text": "Optional parameter can be preceded only by single period ('.') in the segment",
                  "markdown": "Optional parameter can be preceded only by single period ('.') in the segment"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInconsistentDllimport",
                "shortDescription": {
                  "text": "inconsistent-dllimport clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Winconsistent-dllimport clang diagnostic. Learn more...",
                  "markdown": "-Winconsistent-dllimport clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#winconsistent-dllimport)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppEnumeratorNeverUsed",
                "shortDescription": {
                  "text": "Enumerator is never used"
                },
                "fullDescription": {
                  "text": "An enumerator is never used",
                  "markdown": "An enumerator is never used"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCharSubscripts",
                "shortDescription": {
                  "text": "char-subscripts clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wchar-subscripts clang diagnostic. Learn more...",
                  "markdown": "-Wchar-subscripts clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wchar-subscripts)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseCancellationTokenForIAsyncEnumerable",
                "shortDescription": {
                  "text": "Use cancellation token"
                },
                "fullDescription": {
                  "text": "IAsyncEnumerable supports cancellation via 'WithCancellation' extension method",
                  "markdown": "IAsyncEnumerable supports cancellation via 'WithCancellation' extension method"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MemberCanBeFileLocal",
                "shortDescription": {
                  "text": "Type can be made file-local"
                },
                "fullDescription": {
                  "text": "Type can be made file-local",
                  "markdown": "Type can be made file-local"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0618",
                "shortDescription": {
                  "text": "Use of obsolete symbol"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://msdn.microsoft.com/en-us/library/x5ye6x1e.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0612",
                "shortDescription": {
                  "text": "Use of obsolete symbol (without message)"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://msdn.microsoft.com/en-us/library/h0h063ka.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RouteTemplates.MethodMissingRouteParameters",
                "shortDescription": {
                  "text": "Not all route parameters are passed to method"
                },
                "fullDescription": {
                  "text": "Not all route parameters are passed to method",
                  "markdown": "Not all route parameters are passed to method"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantUnsafeContext",
                "shortDescription": {
                  "text": "Unsafe context declaration is redundant"
                },
                "fullDescription": {
                  "text": "Unsafe context declaration is redundant because it is declared in unsafe context, or it does not contain unsafe constructs",
                  "markdown": "Unsafe context declaration is redundant because it is declared in unsafe context, or it does not contain unsafe constructs"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUndefinedInline",
                "shortDescription": {
                  "text": "undefined-inline clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wundefined-inline clang diagnostic. Learn more...",
                  "markdown": "-Wundefined-inline clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wundefined-inline)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNonportableIncludePath",
                "shortDescription": {
                  "text": "nonportable-include-path clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wnonportable-include-path clang diagnostic. Learn more...",
                  "markdown": "-Wnonportable-include-path clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wnonportable-include-path)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MoveToExistingPositionalDeconstructionPattern",
                "shortDescription": {
                  "text": "Move to existing positional deconstruction pattern"
                },
                "fullDescription": {
                  "text": "Replace property pattern member(s) of recursive pattern with positional deconstruction patterns in existing positional deconstruction",
                  "markdown": "Replace property pattern member(s) of recursive pattern with positional deconstruction patterns in existing positional deconstruction"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticOverrideInit",
                "shortDescription": {
                  "text": "override-init clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Woverride-init clang diagnostic. Learn more...",
                  "markdown": "-Woverride-init clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#woverride-init)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertPos44C",
                "shortDescription": {
                  "text": "cert-pos44-c clang-tidy check"
                },
                "fullDescription": {
                  "text": "cert-pos44-c clang-tidy check. Learn more...",
                  "markdown": "cert-pos44-c clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/pos44-c.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1957",
                "shortDescription": {
                  "text": "Multiple override candidates at run-time"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://msdn.microsoft.com/en-us/library/bb882562.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0628",
                "shortDescription": {
                  "text": "Declaring new protected member in sealed class is the same as declaring it as private"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://msdn.microsoft.com/en-us/library/7x8ekes3.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppSomeObjectMembersMightNotBeInitialized",
                "shortDescription": {
                  "text": "Some object members might not be initialized"
                },
                "fullDescription": {
                  "text": "Some object members might not be initialized",
                  "markdown": "Some object members might not be initialized"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithOfType.Count.1",
                "shortDescription": {
                  "text": "Replace with OfType<T>().Count()"
                },
                "fullDescription": {
                  "text": "$seq$.Select($x$ => $x$ as $T$).Count($y$ => $y$ != null)",
                  "markdown": "$seq$.Select($x$ =\\> $x$ as $T$).Count($y$ =\\> $y$ != null)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppHiddenFunction",
                "shortDescription": {
                  "text": "Non-virtual class member function hidden in a derived class"
                },
                "fullDescription": {
                  "text": "Non-virtual class member function is hidden in a derived class",
                  "markdown": "Non-virtual class member function is hidden in a derived class"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerApiModelingGoogleGTest",
                "shortDescription": {
                  "text": "apiModeling.google.GTest clang static analyzer check"
                },
                "fullDescription": {
                  "text": "apiModeling.google.GTest clang static analyzer check. Learn more...",
                  "markdown": "apiModeling.google.GTest clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAllocaWithAlignAlignof",
                "shortDescription": {
                  "text": "alloca-with-align-alignof clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Walloca-with-align-alignof clang diagnostic. Learn more...",
                  "markdown": "-Walloca-with-align-alignof clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#walloca-with-align-alignof)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithOfType.Count.2",
                "shortDescription": {
                  "text": "Replace with OfType<T>().Count() (replace with OfType<T>().Count(..))"
                },
                "fullDescription": {
                  "text": "$seq$.Select($x$ => $x$ as $T$).Count($y$ => $y$ != null && $expr$)",
                  "markdown": "$seq$.Select($x$ =\\> $x$ as $T$).Count($y$ =\\> $y$ != null \\&\\& $expr$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MemberHidesStaticFromOuterClass",
                "shortDescription": {
                  "text": "Member hides static member from outer class"
                },
                "fullDescription": {
                  "text": "Member hides static member from outer class Learn more...",
                  "markdown": "Member hides static member from outer class [Learn more...](https://www.jetbrains.com/help/rider/MemberHidesStaticFromOuterClass.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppEnforceTypeAliasCodeStyle",
                "shortDescription": {
                  "text": "Use preferred declaration style (enforce type alias code style)"
                },
                "fullDescription": {
                  "text": "Enforce usage of typedefs or type aliases depending on the syntax style setting",
                  "markdown": "Enforce usage of typedefs or type aliases depending on the syntax style setting"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertOop11Cpp",
                "shortDescription": {
                  "text": "cert-oop11-cpp clang-tidy check"
                },
                "fullDescription": {
                  "text": "cert-oop11-cpp clang-tidy check. Learn more...",
                  "markdown": "cert-oop11-cpp clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/oop11-cpp.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyObjcNsinvocationArgumentLifetime",
                "shortDescription": {
                  "text": "objc-nsinvocation-argument-lifetime clang-tidy check"
                },
                "fullDescription": {
                  "text": "objc-nsinvocation-argument-lifetime clang-tidy check. Learn more...",
                  "markdown": "objc-nsinvocation-argument-lifetime clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/objc/nsinvocation-argument-lifetime.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppMemberFunctionMayBeStatic",
                "shortDescription": {
                  "text": "Member function can be made static"
                },
                "fullDescription": {
                  "text": "Member function can be made static",
                  "markdown": "Member function can be made static"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerSecurityInsecureAPIGets",
                "shortDescription": {
                  "text": "security.insecureAPI.gets clang static analyzer check"
                },
                "fullDescription": {
                  "text": "security.insecureAPI.gets clang static analyzer check. Learn more...",
                  "markdown": "security.insecureAPI.gets clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WebConfig.WrongModule",
                "shortDescription": {
                  "text": "Wrong module"
                },
                "fullDescription": {
                  "text": "Wrong module",
                  "markdown": "Wrong module"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityDeleteNullPointer",
                "shortDescription": {
                  "text": "readability-delete-null-pointer clang-tidy check"
                },
                "fullDescription": {
                  "text": "readability-delete-null-pointer clang-tidy check. Learn more...",
                  "markdown": "readability-delete-null-pointer clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/delete-null-pointer.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseSwitchCasePatternVariable",
                "shortDescription": {
                  "text": "Type pattern and casts can be merged"
                },
                "fullDescription": {
                  "text": "Type pattern in switch case label can be merged with direct cast(s) in switch section",
                  "markdown": "Type pattern in switch case label can be merged with direct cast(s) in switch section"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesNarrowingConversions",
                "shortDescription": {
                  "text": "cppcoreguidelines-narrowing-conversions clang-tidy check"
                },
                "fullDescription": {
                  "text": "cppcoreguidelines-narrowing-conversions clang-tidy check. Learn more...",
                  "markdown": "cppcoreguidelines-narrowing-conversions clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/narrowing-conversions.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantVirtualModifier",
                "shortDescription": {
                  "text": "Redundant 'virtual' modifier"
                },
                "fullDescription": {
                  "text": "Redundant 'virtual' modifier in interface declaration",
                  "markdown": "Redundant 'virtual' modifier in interface declaration"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerNullabilityNullablePassedToNonnull",
                "shortDescription": {
                  "text": "nullability.NullablePassedToNonnull clang static analyzer check"
                },
                "fullDescription": {
                  "text": "nullability.NullablePassedToNonnull clang static analyzer check. Learn more...",
                  "markdown": "nullability.NullablePassedToNonnull clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuInlineCppWithoutExtern",
                "shortDescription": {
                  "text": "gnu-inline-cpp-without-extern clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wgnu-inline-cpp-without-extern clang diagnostic. Learn more...",
                  "markdown": "-Wgnu-inline-cpp-without-extern clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-inline-cpp-without-extern)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnalignedQualifierImplicitCast",
                "shortDescription": {
                  "text": "unaligned-qualifier-implicit-cast clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunaligned-qualifier-implicit-cast clang diagnostic. Learn more...",
                  "markdown": "-Wunaligned-qualifier-implicit-cast clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunaligned-qualifier-implicit-cast)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.UnknownResource",
                "shortDescription": {
                  "text": "The resource is not defined in the project"
                },
                "fullDescription": {
                  "text": "The resource is not defined in the project. Expression will return 'null'.",
                  "markdown": "The resource is not defined in the project. Expression will return 'null'."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithOfType.First.2",
                "shortDescription": {
                  "text": "Replace with OfType<T>().First() (replace with OfType(Of ..)().First(..))"
                },
                "fullDescription": {
                  "text": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).First(Function ($y$) $y$ IsNot Nothing AndAlso $expr$)",
                  "markdown": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).First(Function ($y$) $y$ IsNot Nothing AndAlso $expr$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithOfType.First.1",
                "shortDescription": {
                  "text": "Replace with OfType<T>().First() (replace with OfType(Of ..)().First())"
                },
                "fullDescription": {
                  "text": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).First(Function ($y$) $y$ IsNot Nothing)",
                  "markdown": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).First(Function ($y$) $y$ IsNot Nothing)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.RedundantArgumentInTestCaseAttribute",
                "shortDescription": {
                  "text": "NUnit. Redundant argument in TestCase attribute."
                },
                "fullDescription": {
                  "text": "According to the test method signature, the argument in the [TestCase] attribute is redundant Learn more...",
                  "markdown": "According to the test method signature, the argument in the \\[TestCase\\] attribute is redundant [Learn more...](https://www.jetbrains.com/help/rider/NUnit.RedundantArgumentInTestCaseAttribute.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FormatStringPlaceholdersMismatch",
                "shortDescription": {
                  "text": "Format string placeholders mismatch"
                },
                "fullDescription": {
                  "text": "Format string placeholders do not match between cultures",
                  "markdown": "Format string placeholders do not match between cultures"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticVariadicMacros",
                "shortDescription": {
                  "text": "variadic-macros clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wvariadic-macros clang diagnostic. Learn more...",
                  "markdown": "-Wvariadic-macros clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wvariadic-macros)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerSecurityInsecureAPIDecodeValueOfObjCType",
                "shortDescription": {
                  "text": "security.insecureAPI.decodeValueOfObjCType clang static analyzer check"
                },
                "fullDescription": {
                  "text": "security.insecureAPI.decodeValueOfObjCType clang static analyzer check. Learn more...",
                  "markdown": "security.insecureAPI.decodeValueOfObjCType clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyLlvmIncludeOrder",
                "shortDescription": {
                  "text": "llvm-include-order clang-tidy check"
                },
                "fullDescription": {
                  "text": "llvm-include-order clang-tidy check. Learn more...",
                  "markdown": "llvm-include-order clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/llvm/include-order.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppDoxygenUnresolvedReference",
                "shortDescription": {
                  "text": "Unresolved reference in doxygen comment"
                },
                "fullDescription": {
                  "text": "Unresolved reference in a doxygen comment",
                  "markdown": "Unresolved reference in a doxygen comment"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBWarnings__BC42356",
                "shortDescription": {
                  "text": "Async method lacks 'Await' operators"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAlloca",
                "shortDescription": {
                  "text": "alloca clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Walloca clang diagnostic. Learn more...",
                  "markdown": "-Walloca clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#walloca)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBWarnings__BC42358",
                "shortDescription": {
                  "text": "Because this call is not awaited, execution of the current method continues before the call is completed. Consider applying the 'Await' operator to the result of the call."
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://msdn.microsoft.com/en-us/library/hh965065.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantCastExpression",
                "shortDescription": {
                  "text": "Redundant cast expression"
                },
                "fullDescription": {
                  "text": "Cast is redundant and can be deleted",
                  "markdown": "Cast is redundant and can be deleted"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantIfStatementThenKeyword",
                "shortDescription": {
                  "text": "Keyword 'Then' is redundant in multiline 'If' statement"
                },
                "fullDescription": {
                  "text": "Keyword 'Then' is redundant in multiline 'If' statement",
                  "markdown": "Keyword 'Then' is redundant in multiline 'If' statement"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithSingleCallToLastOrDefault",
                "shortDescription": {
                  "text": "Replace with single call to LastOrDefault(..)"
                },
                "fullDescription": {
                  "text": "$seq$.Where(Function ($x$) $expr$).LastOrDefault()",
                  "markdown": "$seq$.Where(Function ($x$) $expr$).LastOrDefault()"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PartialMethodWithSinglePart",
                "shortDescription": {
                  "text": "Redundant 'partial' modifier on method declaration"
                },
                "fullDescription": {
                  "text": "Method is declared as 'partial' but has only single part Learn more...",
                  "markdown": "Method is declared as 'partial' but has only single part [Learn more...](https://www.jetbrains.com/help/rider/PartialMethodWithSinglePart.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnsupportedNan",
                "shortDescription": {
                  "text": "unsupported-nan clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunsupported-nan clang diagnostic. Learn more...",
                  "markdown": "-Wunsupported-nan clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunsupported-nan)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppParameterValueIsReassigned",
                "shortDescription": {
                  "text": "Parameter is always rewritten in function body before being read"
                },
                "fullDescription": {
                  "text": "A parameter is always rewritten in function body before being read",
                  "markdown": "A parameter is always rewritten in function body before being read"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppZeroValuedExpressionUsedAsNullPointer",
                "shortDescription": {
                  "text": "Expression that evaluates to zero is used as a null pointer constant"
                },
                "fullDescription": {
                  "text": "Expression that evaluates to zero is used as a null pointer constant",
                  "markdown": "Expression that evaluates to zero is used as a null pointer constant"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FSharpRedundantDotInIndexer",
                "shortDescription": {
                  "text": "Redundant '.' in indexer"
                },
                "fullDescription": {
                  "text": "'.' can be removed in indexers.",
                  "markdown": "'.' can be removed in indexers."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticQuotedIncludeInFrameworkHeader",
                "shortDescription": {
                  "text": "quoted-include-in-framework-header clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wquoted-include-in-framework-header clang diagnostic. Learn more...",
                  "markdown": "-Wquoted-include-in-framework-header clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wquoted-include-in-framework-header)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NotAccessedField.Compiler",
                "shortDescription": {
                  "text": "Non-accessed field"
                },
                "fullDescription": {
                  "text": "Field is assigned but its value is never used (compiler warning)",
                  "markdown": "Field is assigned but its value is never used (compiler warning)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuLabelAsValue",
                "shortDescription": {
                  "text": "gnu-label-as-value clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wgnu-label-as-value clang diagnostic. Learn more...",
                  "markdown": "-Wgnu-label-as-value clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-label-as-value)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuggestVarOrType_DeconstructionDeclarations",
                "shortDescription": {
                  "text": "Use preferred 'var' style (in deconstruction declarations)"
                },
                "fullDescription": {
                  "text": "Convert if declaration is a part of a deconstruction Learn more...",
                  "markdown": "Convert if declaration is a part of a deconstruction [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_DeconstructionDeclarations.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnassignedField.Compiler",
                "shortDescription": {
                  "text": "Unassigned field"
                },
                "fullDescription": {
                  "text": "Field is never assigned (compiler warning)",
                  "markdown": "Field is never assigned (compiler warning)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppObjectMemberMightNotBeInitialized",
                "shortDescription": {
                  "text": "Object member might not be initialized"
                },
                "fullDescription": {
                  "text": "An object member might not be initialized",
                  "markdown": "An object member might not be initialized"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.ParameterNotDerivedFromComponent",
                "shortDescription": {
                  "text": "Parameter should be derived from 'Component'"
                },
                "fullDescription": {
                  "text": "Parameter should be derived from 'Component'.",
                  "markdown": "Parameter should be derived from 'Component'."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNonPodVarargs",
                "shortDescription": {
                  "text": "non-pod-varargs clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wnon-pod-varargs clang diagnostic. Learn more...",
                  "markdown": "-Wnon-pod-varargs clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wnon-pod-varargs)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseArrayCreationExpression.2",
                "shortDescription": {
                  "text": "Use array creation expression"
                },
                "fullDescription": {
                  "text": "Array.CreateInstance(typeof($T$), $long$, $long2$)",
                  "markdown": "Array.CreateInstance(typeof($T$), $long$, $long2$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticManyBracesAroundScalarInit",
                "shortDescription": {
                  "text": "many-braces-around-scalar-init clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmany-braces-around-scalar-init clang diagnostic. Learn more...",
                  "markdown": "-Wmany-braces-around-scalar-init clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmany-braces-around-scalar-init)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseArrayCreationExpression.1",
                "shortDescription": {
                  "text": "Use array creation expression"
                },
                "fullDescription": {
                  "text": "Array.CreateInstance(typeof($T$), $long$)",
                  "markdown": "Array.CreateInstance(typeof($T$), $long$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Html.IdDuplication",
                "shortDescription": {
                  "text": "Ids duplication"
                },
                "fullDescription": {
                  "text": "Duplication of id on page",
                  "markdown": "Duplication of id on page"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.UnknownAnimatorStateName",
                "shortDescription": {
                  "text": "There is no animator state with the same name in the project."
                },
                "fullDescription": {
                  "text": "There is no animator state with the same name in the project.",
                  "markdown": "There is no animator state with the same name in the project."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedCopyWithUserProvidedDtor",
                "shortDescription": {
                  "text": "deprecated-copy-with-user-provided-dtor clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdeprecated-copy-with-user-provided-dtor clang diagnostic. Learn more...",
                  "markdown": "-Wdeprecated-copy-with-user-provided-dtor clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-copy-with-user-provided-dtor)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseImplicitlyTypedVariableEvident",
                "shortDescription": {
                  "text": "Use implicitly typed variable declaration (evident)"
                },
                "fullDescription": {
                  "text": "Use implicitly typed variable declaration when variable type is evident from initializer expression",
                  "markdown": "Use implicitly typed variable declaration when variable type is evident from initializer expression"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FSharpRedundantApplication",
                "shortDescription": {
                  "text": "Redundant application"
                },
                "fullDescription": {
                  "text": "Application is redundant and can be replaced with its argument.",
                  "markdown": "Application is redundant and can be replaced with its argument."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuEmptyStruct",
                "shortDescription": {
                  "text": "gnu-empty-struct clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wgnu-empty-struct clang diagnostic. Learn more...",
                  "markdown": "-Wgnu-empty-struct clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-empty-struct)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AccessToStaticMemberViaDerivedType",
                "shortDescription": {
                  "text": "Access to a static member of a type via a derived type"
                },
                "fullDescription": {
                  "text": "Access to a static member of a type via a derived type Learn more...",
                  "markdown": "Access to a static member of a type via a derived type [Learn more...](https://www.jetbrains.com/help/rider/AccessToStaticMemberViaDerivedType.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticTautologicalConstantOutOfRangeCompare",
                "shortDescription": {
                  "text": "tautological-constant-out-of-range-compare clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wtautological-constant-out-of-range-compare clang diagnostic. Learn more...",
                  "markdown": "-Wtautological-constant-out-of-range-compare clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wtautological-constant-out-of-range-compare)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIncludeNextAbsolutePath",
                "shortDescription": {
                  "text": "include-next-absolute-path clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Winclude-next-absolute-path clang diagnostic. Learn more...",
                  "markdown": "-Winclude-next-absolute-path clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#winclude-next-absolute-path)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerApiModelingLlvmReturnValue",
                "shortDescription": {
                  "text": "apiModeling.llvm.ReturnValue clang static analyzer check"
                },
                "fullDescription": {
                  "text": "apiModeling.llvm.ReturnValue clang static analyzer check. Learn more...",
                  "markdown": "apiModeling.llvm.ReturnValue clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp98Cpp11Cpp14Cpp17CompatPedantic",
                "shortDescription": {
                  "text": "c++98-c++11-c++14-c++17-compat-pedantic clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wc++98-c++11-c++14-c++17-compat-pedantic clang diagnostic. Learn more...",
                  "markdown": "-Wc++98-c++11-c++14-c++17-compat-pedantic clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wc-98-c-11-c-14-c-17-compat-pedantic)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPragmaMessages",
                "shortDescription": {
                  "text": "#pragma-messages clang diagnostic"
                },
                "fullDescription": {
                  "text": "-W#pragma-messages clang diagnostic. Learn more...",
                  "markdown": "-W#pragma-messages clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#w-pragma-messages)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBoostFormatTooFewArgs",
                "shortDescription": {
                  "text": "Not enough arguments in a call to boost::format"
                },
                "fullDescription": {
                  "text": "Not enough arguments in a call to boost::format",
                  "markdown": "Not enough arguments in a call to boost::format"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIgnoredAvailabilityWithoutSdkSettings",
                "shortDescription": {
                  "text": "ignored-availability-without-sdk-settings clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wignored-availability-without-sdk-settings clang diagnostic. Learn more...",
                  "markdown": "-Wignored-availability-without-sdk-settings clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wignored-availability-without-sdk-settings)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseUtf8StringLiteral",
                "shortDescription": {
                  "text": "Use UTF-8 string literal"
                },
                "fullDescription": {
                  "text": "Byte array can be converted to a UTF-8 string literal",
                  "markdown": "Byte array can be converted to a UTF-8 string literal"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.UnknownInputAxes",
                "shortDescription": {
                  "text": "The input name is not defined in the Input manager"
                },
                "fullDescription": {
                  "text": "The name is not defined in the Input manager. The call is likely to fail at runtime.",
                  "markdown": "The name is not defined in the Input manager. The call is likely to fail at runtime."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.ElementNameReferenceNotResolved",
                "shortDescription": {
                  "text": "Element name reference is not resolved"
                },
                "fullDescription": {
                  "text": "Element name reference is not resolved to any of the named elements in scope",
                  "markdown": "Element name reference is not resolved to any of the named elements in scope"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCplusplusStringChecker",
                "shortDescription": {
                  "text": "cplusplus.StringChecker clang static analyzer check"
                },
                "fullDescription": {
                  "text": "cplusplus.StringChecker clang static analyzer check. Learn more...",
                  "markdown": "cplusplus.StringChecker clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAbseilDurationFactoryScale",
                "shortDescription": {
                  "text": "abseil-duration-factory-scale clang-tidy check"
                },
                "fullDescription": {
                  "text": "abseil-duration-factory-scale clang-tidy check. Learn more...",
                  "markdown": "abseil-duration-factory-scale clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/duration-factory-scale.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpecifyACultureInStringConversionExplicitly",
                "shortDescription": {
                  "text": "Specify string culture explicitly"
                },
                "fullDescription": {
                  "text": "Specify a culture in string conversion explicitly Learn more...",
                  "markdown": "Specify a culture in string conversion explicitly [Learn more...](https://www.jetbrains.com/help/rider/SpecifyACultureInStringConversionExplicitly.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyGoogleUpgradeGoogletestCase",
                "shortDescription": {
                  "text": "google-upgrade-googletest-case clang-tidy check"
                },
                "fullDescription": {
                  "text": "google-upgrade-googletest-case clang-tidy check. Learn more...",
                  "markdown": "google-upgrade-googletest-case clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/upgrade-googletest-case.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.ParameterTypeIsNotCompatibleWithAttribute",
                "shortDescription": {
                  "text": "NUnit. Specified values are not compatible with the test parameter type."
                },
                "fullDescription": {
                  "text": "NUnit. Values specified in the attribute are not compatible with the corresponding test parameter type. Learn more...",
                  "markdown": "NUnit. Values specified in the attribute are not compatible with the corresponding test parameter type. [Learn more...](https://www.jetbrains.com/help/rider/NUnit.ParameterTypeIsNotCompatibleWithAttribute.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneStringLiteralWithEmbeddedNul",
                "shortDescription": {
                  "text": "bugprone-string-literal-with-embedded-nul clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-string-literal-with-embedded-nul clang-tidy check. Learn more...",
                  "markdown": "bugprone-string-literal-with-embedded-nul clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/string-literal-with-embedded-nul.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NotAccessedField.Local",
                "shortDescription": {
                  "text": "Non-accessed field (private accessibility)"
                },
                "fullDescription": {
                  "text": "Field is assigned but its value is never used Learn more...",
                  "markdown": "Field is assigned but its value is never used [Learn more...](https://www.jetbrains.com/help/rider/NotAccessedField.Local.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.RedundantAttachedProperty",
                "shortDescription": {
                  "text": "Remove redundant attached property setter"
                },
                "fullDescription": {
                  "text": "Attached property setter has no effect in the current context and can be removed",
                  "markdown": "Attached property setter has no effect in the current context and can be removed"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNoderef",
                "shortDescription": {
                  "text": "noderef clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wnoderef clang diagnostic. Learn more...",
                  "markdown": "-Wnoderef clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wnoderef)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCoreVLASize",
                "shortDescription": {
                  "text": "core.VLASize clang static analyzer check"
                },
                "fullDescription": {
                  "text": "core.VLASize clang static analyzer check. Learn more...",
                  "markdown": "core.VLASize clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp20Designator",
                "shortDescription": {
                  "text": "c++20-designator clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wc++20-designator clang diagnostic. Learn more...",
                  "markdown": "-Wc++20-designator clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wc-20-designator)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LambdaExpressionCanBeMadeStatic",
                "shortDescription": {
                  "text": "Lambda expression/anonymous method can be made 'static'"
                },
                "fullDescription": {
                  "text": "Lambda expression/anonymous method can be made 'static'",
                  "markdown": "Lambda expression/anonymous method can be made 'static'"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBWarnings__BC42322",
                "shortDescription": {
                  "text": "Runtime errors are likely to occur when converting X to Y"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringEndsWithIsCultureSpecific",
                "shortDescription": {
                  "text": "String.EndsWith is culture-specific (string.EndsWith(string) is culture-specific)"
                },
                "fullDescription": {
                  "text": "$s$.EndsWith($sarg$) Learn more...",
                  "markdown": "$s$.EndsWith($sarg$) [Learn more...](https://www.jetbrains.com/help/rider/StringEndsWithIsCultureSpecific.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAtomicPropertyWithUserDefinedAccessor",
                "shortDescription": {
                  "text": "atomic-property-with-user-defined-accessor clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Watomic-property-with-user-defined-accessor clang diagnostic. Learn more...",
                  "markdown": "-Watomic-property-with-user-defined-accessor clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#watomic-property-with-user-defined-accessor)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIntInBoolContext",
                "shortDescription": {
                  "text": "int-in-bool-context clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wint-in-bool-context clang diagnostic. Learn more...",
                  "markdown": "-Wint-in-bool-context clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wint-in-bool-context)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCoreBuiltinBuiltinFunctions",
                "shortDescription": {
                  "text": "core.builtin.BuiltinFunctions clang static analyzer check"
                },
                "fullDescription": {
                  "text": "core.builtin.BuiltinFunctions clang static analyzer check. Learn more...",
                  "markdown": "core.builtin.BuiltinFunctions clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesAvoidCArrays",
                "shortDescription": {
                  "text": "cppcoreguidelines-avoid-c-arrays clang-tidy check"
                },
                "fullDescription": {
                  "text": "cppcoreguidelines-avoid-c-arrays clang-tidy check. Learn more...",
                  "markdown": "cppcoreguidelines-avoid-c-arrays clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/avoid-c-arrays.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneBadSignalToKillThread",
                "shortDescription": {
                  "text": "bugprone-bad-signal-to-kill-thread clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-bad-signal-to-kill-thread clang-tidy check. Learn more...",
                  "markdown": "bugprone-bad-signal-to-kill-thread clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/bad-signal-to-kill-thread.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneBoolPointerImplicitConversion",
                "shortDescription": {
                  "text": "bugprone-bool-pointer-implicit-conversion clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-bool-pointer-implicit-conversion clang-tidy check. Learn more...",
                  "markdown": "bugprone-bool-pointer-implicit-conversion clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/bool-pointer-implicit-conversion.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WebConfig.TagPrefixRedundand",
                "shortDescription": {
                  "text": "Redundant tagPrefix declaration"
                },
                "fullDescription": {
                  "text": "Tag prefix does not declare any new alias and can be removed safely",
                  "markdown": "Tag prefix does not declare any new alias and can be removed safely"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticWritableStrings",
                "shortDescription": {
                  "text": "writable-strings clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wwritable-strings clang diagnostic. Learn more...",
                  "markdown": "-Wwritable-strings clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wwritable-strings)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticConditionalUninitialized",
                "shortDescription": {
                  "text": "conditional-uninitialized clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wconditional-uninitialized clang diagnostic. Learn more...",
                  "markdown": "-Wconditional-uninitialized clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wconditional-uninitialized)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedCommaSubscript",
                "shortDescription": {
                  "text": "deprecated-comma-subscript clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdeprecated-comma-subscript clang diagnostic. Learn more...",
                  "markdown": "-Wdeprecated-comma-subscript clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-comma-subscript)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantOverflowCheckingContext",
                "shortDescription": {
                  "text": "Redundant arithmetic overflow checking context"
                },
                "fullDescription": {
                  "text": "Arithmetic overflow checking context contains no operators or conversions with overflow checks",
                  "markdown": "Arithmetic overflow checking context contains no operators or conversions with overflow checks"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WrongIndentSize",
                "shortDescription": {
                  "text": "Incorrect indent (incorrect indent size)"
                },
                "fullDescription": {
                  "text": "Incorrect indent size Learn more...",
                  "markdown": "Incorrect indent size [Learn more...](https://www.jetbrains.com/help/rider/WrongIndentSize.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticStaticInInline",
                "shortDescription": {
                  "text": "static-in-inline clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wstatic-in-inline clang diagnostic. Learn more...",
                  "markdown": "-Wstatic-in-inline clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wstatic-in-inline)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EventNeverInvoked.Global",
                "shortDescription": {
                  "text": "Abstract or virtual (overridable) event is never invoked"
                },
                "fullDescription": {
                  "text": "An abstract or virtual (overridable) event is never invoked in its class or its inheritors",
                  "markdown": "An abstract or virtual (overridable) event is never invoked in its class or its inheritors"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.TestCaseAttributeRequiresExpectedResult",
                "shortDescription": {
                  "text": "NUnit. Missing expected result for non-void test method."
                },
                "fullDescription": {
                  "text": "Expected result of a compatible type must be provided for non-void NUnit test methods through the [TestCase] attribute Learn more...",
                  "markdown": "Expected result of a compatible type must be provided for non-void NUnit test methods through the \\[TestCase\\] attribute [Learn more...](https://www.jetbrains.com/help/rider/NUnit.TestCaseAttributeRequiresExpectedResult.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CollectionNeverQueried.Local",
                "shortDescription": {
                  "text": "Collection content is never queried (private accessibility)"
                },
                "fullDescription": {
                  "text": "Elements are only added to the collection but never used Learn more...",
                  "markdown": "Elements are only added to the collection but never used [Learn more...](https://www.jetbrains.com/help/rider/CollectionNeverQueried.Local.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.IncorrectMethodSignature",
                "shortDescription": {
                  "text": "Incorrect method signature"
                },
                "fullDescription": {
                  "text": "Method does not match expected signature.",
                  "markdown": "Method does not match expected signature."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInvalidNoBuiltinNames",
                "shortDescription": {
                  "text": "invalid-no-builtin-names clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Winvalid-no-builtin-names clang diagnostic. Learn more...",
                  "markdown": "-Winvalid-no-builtin-names clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#winvalid-no-builtin-names)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFormatTypeConfusion",
                "shortDescription": {
                  "text": "format-type-confusion clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wformat-type-confusion clang diagnostic. Learn more...",
                  "markdown": "-Wformat-type-confusion clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wformat-type-confusion)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.MissingArgumentsInTestCaseAttribute",
                "shortDescription": {
                  "text": "NUnit. Missing arguments in TestCase attribute."
                },
                "fullDescription": {
                  "text": "According to the test method signature, there are missing arguments in the [TestCase] attribute Learn more...",
                  "markdown": "According to the test method signature, there are missing arguments in the \\[TestCase\\] attribute [Learn more...](https://www.jetbrains.com/help/rider/NUnit.MissingArgumentsInTestCaseAttribute.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RemoveRedundantOrStatement.True",
                "shortDescription": {
                  "text": "Remove redundant statement"
                },
                "fullDescription": {
                  "text": "$bool1$ &= true;",
                  "markdown": "$bool1$ \\&= true;"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticBitfieldWidth",
                "shortDescription": {
                  "text": "bitfield-width clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wbitfield-width clang diagnostic. Learn more...",
                  "markdown": "-Wbitfield-width clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wbitfield-width)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBWarnings__BC42349",
                "shortDescription": {
                  "text": "Redundant DirectCast to the equals value type"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIncompatibleSysroot",
                "shortDescription": {
                  "text": "incompatible-sysroot clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wincompatible-sysroot clang diagnostic. Learn more...",
                  "markdown": "-Wincompatible-sysroot clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wincompatible-sysroot)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticShiftOpParentheses",
                "shortDescription": {
                  "text": "shift-op-parentheses clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wshift-op-parentheses clang diagnostic. Learn more...",
                  "markdown": "-Wshift-op-parentheses clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wshift-op-parentheses)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp11LongLong",
                "shortDescription": {
                  "text": "c++11-long-long clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wc++11-long-long clang diagnostic. Learn more...",
                  "markdown": "-Wc++11-long-long clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wc-11-long-long)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuspiciousTypeConversion.Global",
                "shortDescription": {
                  "text": "Suspicious type conversion or check"
                },
                "fullDescription": {
                  "text": "A type is converted into another one but there is no type in the solution which is inherited from both. This also applies to 'is' operator and '==' and '!=' comparisons.",
                  "markdown": "A type is converted into another one but there is no type in the solution which is inherited from both. This also applies to 'is' operator and '==' and '!=' comparisons."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyConcurrencyThreadCanceltypeAsynchronous",
                "shortDescription": {
                  "text": "concurrency-thread-canceltype-asynchronous clang-tidy check"
                },
                "fullDescription": {
                  "text": "concurrency-thread-canceltype-asynchronous clang-tidy check. Learn more...",
                  "markdown": "concurrency-thread-canceltype-asynchronous clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/concurrency/thread-canceltype-asynchronous.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInconsistentMissingOverride",
                "shortDescription": {
                  "text": "inconsistent-missing-override clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Winconsistent-missing-override clang diagnostic. Learn more...",
                  "markdown": "-Winconsistent-missing-override clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#winconsistent-missing-override)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDuplicateProtocol",
                "shortDescription": {
                  "text": "duplicate-protocol clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wduplicate-protocol clang diagnostic. Learn more...",
                  "markdown": "-Wduplicate-protocol clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wduplicate-protocol)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMismatchedTags",
                "shortDescription": {
                  "text": "mismatched-tags clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmismatched-tags clang diagnostic. Learn more...",
                  "markdown": "-Wmismatched-tags clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmismatched-tags)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppDependentTemplateWithoutTemplateKeyword",
                "shortDescription": {
                  "text": "Dependent template without 'template' keyword"
                },
                "fullDescription": {
                  "text": "Dependent template without 'template' keyword",
                  "markdown": "Dependent template without 'template' keyword"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInvalidPartialSpecialization",
                "shortDescription": {
                  "text": "invalid-partial-specialization clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Winvalid-partial-specialization clang diagnostic. Learn more...",
                  "markdown": "-Winvalid-partial-specialization clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#winvalid-partial-specialization)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyObjcPropertyDeclaration",
                "shortDescription": {
                  "text": "objc-property-declaration clang-tidy check"
                },
                "fullDescription": {
                  "text": "objc-property-declaration clang-tidy check. Learn more...",
                  "markdown": "objc-property-declaration clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/objc/property-declaration.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnassignedReadonlyField.Compiler",
                "shortDescription": {
                  "text": "Unassigned readonly field"
                },
                "fullDescription": {
                  "text": "Readonly field is never assigned (compiler warning)",
                  "markdown": "Readonly field is never assigned (compiler warning)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUEIncorrectEngineDirectory",
                "shortDescription": {
                  "text": "Specified version of the engine project is not found"
                },
                "fullDescription": {
                  "text": "Location of engine project does not correspond to the version of engine targeted by uproject. You might need to regenerate the project files.",
                  "markdown": "Location of engine project does not correspond to the version of engine targeted by uproject. You might need to regenerate the project files."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unreal Engine",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticReservedIdentifier",
                "shortDescription": {
                  "text": "reserved-identifier clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wreserved-identifier clang diagnostic. Learn more...",
                  "markdown": "-Wreserved-identifier clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wreserved-identifier)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFrameAddress",
                "shortDescription": {
                  "text": "frame-address clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wframe-address clang diagnostic. Learn more...",
                  "markdown": "-Wframe-address clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wframe-address)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.DuplicateValues",
                "shortDescription": {
                  "text": "NUnit. Duplicate values."
                },
                "fullDescription": {
                  "text": "NUnit. Duplicate values produce unnecessary duplicate tests.",
                  "markdown": "NUnit. Duplicate values produce unnecessary duplicate tests."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseDeconstruction",
                "shortDescription": {
                  "text": "Use deconstruction"
                },
                "fullDescription": {
                  "text": "Decompose variable into positional components and replace variable usages with corresponding component variables",
                  "markdown": "Decompose variable into positional components and replace variable usages with corresponding component variables"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticProfileInstrOutOfDate",
                "shortDescription": {
                  "text": "profile-instr-out-of-date clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wprofile-instr-out-of-date clang diagnostic. Learn more...",
                  "markdown": "-Wprofile-instr-out-of-date clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wprofile-instr-out-of-date)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftInaccessibleBase",
                "shortDescription": {
                  "text": "microsoft-inaccessible-base clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmicrosoft-inaccessible-base clang diagnostic. Learn more...",
                  "markdown": "-Wmicrosoft-inaccessible-base clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-inaccessible-base)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOptinOsxCocoaLocalizabilityEmptyLocalizationContextChecker",
                "shortDescription": {
                  "text": "optin.osx.cocoa.localizability.EmptyLocalizationContextChecker clang static analyzer check"
                },
                "fullDescription": {
                  "text": "optin.osx.cocoa.localizability.EmptyLocalizationContextChecker clang static analyzer check. Learn more...",
                  "markdown": "optin.osx.cocoa.localizability.EmptyLocalizationContextChecker clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilitySuspiciousCallArgument",
                "shortDescription": {
                  "text": "readability-suspicious-call-argument clang-tidy check"
                },
                "fullDescription": {
                  "text": "readability-suspicious-call-argument clang-tidy check. Learn more...",
                  "markdown": "readability-suspicious-call-argument clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/suspicious-call-argument.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyMiscUnusedAliasDecls",
                "shortDescription": {
                  "text": "misc-unused-alias-decls clang-tidy check"
                },
                "fullDescription": {
                  "text": "misc-unused-alias-decls clang-tidy check. Learn more...",
                  "markdown": "misc-unused-alias-decls clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/unused-alias-decls.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticBracedScalarInit",
                "shortDescription": {
                  "text": "braced-scalar-init clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wbraced-scalar-init clang diagnostic. Learn more...",
                  "markdown": "-Wbraced-scalar-init clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wbraced-scalar-init)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RouteTemplates.RouteParameterIsNotPassedToMethod",
                "shortDescription": {
                  "text": "Route parameter can be passed to method"
                },
                "fullDescription": {
                  "text": "Route parameter can be passed to method",
                  "markdown": "Route parameter can be passed to method"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDanglingElse",
                "shortDescription": {
                  "text": "dangling-else clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdangling-else clang diagnostic. Learn more...",
                  "markdown": "-Wdangling-else clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdangling-else)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticTautologicalUnsignedCharZeroCompare",
                "shortDescription": {
                  "text": "tautological-unsigned-char-zero-compare clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wtautological-unsigned-char-zero-compare clang diagnostic. Learn more...",
                  "markdown": "-Wtautological-unsigned-char-zero-compare clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wtautological-unsigned-char-zero-compare)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadSwitchBracesIndent",
                "shortDescription": {
                  "text": "Incorrect indent (around switch statement)"
                },
                "fullDescription": {
                  "text": "Around switch statement Learn more...",
                  "markdown": "Around switch statement [Learn more...](https://www.jetbrains.com/help/rider/BadSwitchBracesIndent.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAtProtocol",
                "shortDescription": {
                  "text": "at-protocol clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wat-protocol clang diagnostic. Learn more...",
                  "markdown": "-Wat-protocol clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wat-protocol)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0660,CS0661",
                "shortDescription": {
                  "text": "Operator '==' or operator '!=' with 'Object.Equals(object o)' and 'Object.GetHashCode()' not overridden"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://www.jetbrains.com/help/rider/CSharpWarnings_CS0660_CS0661.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticOutOfLineDeclaration",
                "shortDescription": {
                  "text": "out-of-line-declaration clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wout-of-line-declaration clang diagnostic. Learn more...",
                  "markdown": "-Wout-of-line-declaration clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wout-of-line-declaration)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedMethodReturnValue.Local",
                "shortDescription": {
                  "text": "Method return value is never used (private accessibility)"
                },
                "fullDescription": {
                  "text": "Method return value is never used",
                  "markdown": "Method return value is never used"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Asp.Image",
                "shortDescription": {
                  "text": "Wrong image size"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp17AttributeExtensions",
                "shortDescription": {
                  "text": "c++17-attribute-extensions clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wc++17-attribute-extensions clang diagnostic. Learn more...",
                  "markdown": "-Wc++17-attribute-extensions clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wc-17-attribute-extensions)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticThreadSafetyBeta",
                "shortDescription": {
                  "text": "thread-safety-beta clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wthread-safety-beta clang diagnostic. Learn more...",
                  "markdown": "-Wthread-safety-beta clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wthread-safety-beta)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NullableWarningSuppressionIsUsed",
                "shortDescription": {
                  "text": "A suppressed nullable warning might hide an underlying problem"
                },
                "fullDescription": {
                  "text": "A suppressed nullable warning might hide an underlying problem such as a nullable value that was thought to be already handled. This might be a result of a refactoring introducing nullable values on execution paths where they were not allowed.",
                  "markdown": "A suppressed nullable warning might hide an underlying problem such as a nullable value that was thought to be already handled. This might be a result of a refactoring introducing nullable values on execution paths where they were not allowed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFormatInvalidSpecifier",
                "shortDescription": {
                  "text": "format-invalid-specifier clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wformat-invalid-specifier clang diagnostic. Learn more...",
                  "markdown": "-Wformat-invalid-specifier clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wformat-invalid-specifier)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticOverlengthStrings",
                "shortDescription": {
                  "text": "overlength-strings clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Woverlength-strings clang diagnostic. Learn more...",
                  "markdown": "-Woverlength-strings clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#woverlength-strings)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticArrayBoundsPointerArithmetic",
                "shortDescription": {
                  "text": "array-bounds-pointer-arithmetic clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Warray-bounds-pointer-arithmetic clang diagnostic. Learn more...",
                  "markdown": "-Warray-bounds-pointer-arithmetic clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#warray-bounds-pointer-arithmetic)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppNoMalloc",
                "shortDescription": {
                  "text": "hicpp-no-malloc clang-tidy check"
                },
                "fullDescription": {
                  "text": "hicpp-no-malloc clang-tidy check. Learn more...",
                  "markdown": "hicpp-no-malloc clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/no-malloc.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.ConstructorWarning",
                "shortDescription": {
                  "text": "Constructor not resolved"
                },
                "fullDescription": {
                  "text": "Constructor not resolved",
                  "markdown": "Constructor not resolved"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBWarnings__BC42309",
                "shortDescription": {
                  "text": "XML comment has a tag with a 'cref' attribute that could not be resolved"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuFlexibleArrayUnionMember",
                "shortDescription": {
                  "text": "gnu-flexible-array-union-member clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wgnu-flexible-array-union-member clang diagnostic. Learn more...",
                  "markdown": "-Wgnu-flexible-array-union-member clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-flexible-array-union-member)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMissingMethodReturnType",
                "shortDescription": {
                  "text": "missing-method-return-type clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmissing-method-return-type clang diagnostic. Learn more...",
                  "markdown": "-Wmissing-method-return-type clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmissing-method-return-type)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.AutoFixture.MissedTestOrTestFixtureAttribute",
                "shortDescription": {
                  "text": "NUnit.AutoFixture. Missing Test or TestFixture attribute."
                },
                "fullDescription": {
                  "text": "NUnit.AutoFixture. Missing [Test] or [TestFixture] attribute, test method will not be run.",
                  "markdown": "NUnit.AutoFixture. Missing \\[Test\\] or \\[TestFixture\\] attribute, test method will not be run."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFlagEnum",
                "shortDescription": {
                  "text": "flag-enum clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wflag-enum clang diagnostic. Learn more...",
                  "markdown": "-Wflag-enum clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wflag-enum)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseNameofForDependencyProperty",
                "shortDescription": {
                  "text": "Use 'nameof' expression when registering a DependencyProperty"
                },
                "fullDescription": {
                  "text": "Use 'nameof(ClrProperty)' when registering a DependencyProperty instead of a hardcoded name.",
                  "markdown": "Use 'nameof(ClrProperty)' when registering a DependencyProperty instead of a hardcoded name."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAlteraKernelNameRestriction",
                "shortDescription": {
                  "text": "altera-kernel-name-restriction clang-tidy check"
                },
                "fullDescription": {
                  "text": "altera-kernel-name-restriction clang-tidy check. Learn more...",
                  "markdown": "altera-kernel-name-restriction clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/altera/kernel-name-restriction.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.InvalidResourceTargetType",
                "shortDescription": {
                  "text": "XAML style of invalid target type"
                },
                "fullDescription": {
                  "text": "XAML style of invalid target type",
                  "markdown": "XAML style of invalid target type"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBWarnings__BC42304",
                "shortDescription": {
                  "text": "Syntax error in XML comment"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantCallerArgumentExpressionDefaultValue",
                "shortDescription": {
                  "text": "Redundant argument passed to caller argument expression parameter"
                },
                "fullDescription": {
                  "text": "Corresponding parameter has 'CallerArgumentExpression' attribute applied, so argument could be omitted",
                  "markdown": "Corresponding parameter has 'CallerArgumentExpression' attribute applied, so argument could be omitted"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNullabilityDeclspec",
                "shortDescription": {
                  "text": "nullability-declspec clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wnullability-declspec clang diagnostic. Learn more...",
                  "markdown": "-Wnullability-declspec clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wnullability-declspec)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantVoidArgumentList",
                "shortDescription": {
                  "text": "Redundant void argument list"
                },
                "fullDescription": {
                  "text": "Redundant void argument list",
                  "markdown": "Redundant void argument list"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppInconsistentNaming",
                "shortDescription": {
                  "text": "Inconsistent Naming"
                },
                "fullDescription": {
                  "text": "Name doesn't match naming style defined for this kind of symbol",
                  "markdown": "Name doesn't match naming style defined for this kind of symbol"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Constraints Violations",
                      "index": 43,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftExplicitConstructorCall",
                "shortDescription": {
                  "text": "microsoft-explicit-constructor-call clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmicrosoft-explicit-constructor-call clang diagnostic. Learn more...",
                  "markdown": "-Wmicrosoft-explicit-constructor-call clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-explicit-constructor-call)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticOldStyleCast",
                "shortDescription": {
                  "text": "old-style-cast clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wold-style-cast clang diagnostic. Learn more...",
                  "markdown": "-Wold-style-cast clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wold-style-cast)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUserDefinedLiterals",
                "shortDescription": {
                  "text": "user-defined-literals clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wuser-defined-literals clang diagnostic. Learn more...",
                  "markdown": "-Wuser-defined-literals clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wuser-defined-literals)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertIfStatementToNullCoalescingAssignment",
                "shortDescription": {
                  "text": "'if' statement can be rewritten as '??=' assignment"
                },
                "fullDescription": {
                  "text": "Convert the following code: \r\n  if (x = null) x = expr;\r\n To: \r\n   x ??= expr;",
                  "markdown": "Convert the following code:\n\n```\n\r\n  if (x = null) x = expr;\r\n```\n\nTo:\n\n```\n\r\n   x ??= expr;\r\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MergeConditionalExpression",
                "shortDescription": {
                  "text": "Merge conditional ?: expression into conditional access"
                },
                "fullDescription": {
                  "text": "Merge conditional expression (?: ternary operator) into conditional access expression Learn more...",
                  "markdown": "Merge conditional expression (?: ternary operator) into conditional access expression [Learn more...](https://www.jetbrains.com/help/rider/MergeConditionalExpression.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithOfType.2",
                "shortDescription": {
                  "text": "Replace with OfType<T>()"
                },
                "fullDescription": {
                  "text": "$seq$.Where($x$ => $x$ is $T$).Select($y$ => $y$ as $T$)",
                  "markdown": "$seq$.Where($x$ =\\> $x$ is $T$).Select($y$ =\\> $y$ as $T$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithOfType.1",
                "shortDescription": {
                  "text": "Replace with OfType<T>()"
                },
                "fullDescription": {
                  "text": "$seq$.SelectNotNull($x$ => $x$ as $T$)",
                  "markdown": "$seq$.SelectNotNull($x$ =\\> $x$ as $T$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnsupportedDllBaseClassTemplate",
                "shortDescription": {
                  "text": "unsupported-dll-base-class-template clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunsupported-dll-base-class-template clang diagnostic. Learn more...",
                  "markdown": "-Wunsupported-dll-base-class-template clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunsupported-dll-base-class-template)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUndefinedReinterpretCast",
                "shortDescription": {
                  "text": "undefined-reinterpret-cast clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wundefined-reinterpret-cast clang diagnostic. Learn more...",
                  "markdown": "-Wundefined-reinterpret-cast clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wundefined-reinterpret-cast)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantNameQualifier",
                "shortDescription": {
                  "text": "Redundant name qualifier"
                },
                "fullDescription": {
                  "text": "Redundant use of qualifier for a type name or static member usage",
                  "markdown": "Redundant use of qualifier for a type name or static member usage"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithOfType.3",
                "shortDescription": {
                  "text": "Replace with OfType<T>()"
                },
                "fullDescription": {
                  "text": "$seq$.Where($x$ => $x$ is $T$).Select($y$ => ($T$)$y$)",
                  "markdown": "$seq$.Where($x$ =\\> $x$ is $T$).Select($y$ =\\> ($T$)$y$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnicodeHomoglyph",
                "shortDescription": {
                  "text": "unicode-homoglyph clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunicode-homoglyph clang diagnostic. Learn more...",
                  "markdown": "-Wunicode-homoglyph clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunicode-homoglyph)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.RangeStepValueMustNotBeZero",
                "shortDescription": {
                  "text": "NUnit. Range 'step' parameter value must be non-zero."
                },
                "fullDescription": {
                  "text": "NUnit. 'step' parameter value of [Range] is incorrect, it must be non-zero. Learn more...",
                  "markdown": "NUnit. 'step' parameter value of \\[Range\\] is incorrect, it must be non-zero. [Learn more...](https://www.jetbrains.com/help/rider/NUnit.RangeStepValueMustNotBeZero.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppExplicitConversions",
                "shortDescription": {
                  "text": "hicpp-explicit-conversions clang-tidy check"
                },
                "fullDescription": {
                  "text": "hicpp-explicit-conversions clang-tidy check. Learn more...",
                  "markdown": "hicpp-explicit-conversions clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/explicit-conversions.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneMacroRepeatedSideEffects",
                "shortDescription": {
                  "text": "bugprone-macro-repeated-side-effects clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-macro-repeated-side-effects clang-tidy check. Learn more...",
                  "markdown": "bugprone-macro-repeated-side-effects clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/macro-repeated-side-effects.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityMisleadingIndentation",
                "shortDescription": {
                  "text": "readability-misleading-indentation clang-tidy check"
                },
                "fullDescription": {
                  "text": "readability-misleading-indentation clang-tidy check. Learn more...",
                  "markdown": "readability-misleading-indentation clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/misleading-indentation.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FieldCanBeMadeReadOnly.Global",
                "shortDescription": {
                  "text": "Field can be made readonly (non-private accessibility)"
                },
                "fullDescription": {
                  "text": "Field has no write usages after initialization and can be made readonly Learn more...",
                  "markdown": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Global.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantConfigureAwait",
                "shortDescription": {
                  "text": "Redundant 'ConfigureAwait(true)'"
                },
                "fullDescription": {
                  "text": "Redundant 'ConfigureAwait(true)' can be removed. This inspection is controlled by the 'ConfigureAwait analysis mode' project level property, which is set to 'Disabled' by default. Set 'ConfigureAwait analysis mode' project level property to 'UI' to analyze 'await' expressions and statements for redundant 'ConfigureAwait(true)' calls. Learn more...",
                  "markdown": "Redundant 'ConfigureAwait(true)' can be removed. This inspection is controlled by the 'ConfigureAwait analysis mode' project level property, which is set to 'Disabled' by default. Set 'ConfigureAwait analysis mode' project level property to 'UI' to analyze 'await' expressions and statements for redundant 'ConfigureAwait(true)' calls. [Learn more...](https://www.jetbrains.com/help/rider/RedundantConfigureAwait.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadNamespaceBracesIndent",
                "shortDescription": {
                  "text": "Incorrect indent (around namespace braces)"
                },
                "fullDescription": {
                  "text": "Around namespace braces Learn more...",
                  "markdown": "Around namespace braces [Learn more...](https://www.jetbrains.com/help/rider/BadNamespaceBracesIndent.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FieldHidesInterfacePropertyWithDefaultImplementation",
                "shortDescription": {
                  "text": "Field hides property with default implementation in interface"
                },
                "fullDescription": {
                  "text": "Property with the same name and default implementation exists in an implemented interface",
                  "markdown": "Property with the same name and default implementation exists in an implemented interface"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1030",
                "shortDescription": {
                  "text": "'#warning' directive"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://msdn.microsoft.com/en-us/library/ckcykyd4.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyLlvmQualifiedAuto",
                "shortDescription": {
                  "text": "llvm-qualified-auto clang-tidy check"
                },
                "fullDescription": {
                  "text": "llvm-qualified-auto clang-tidy check. Learn more...",
                  "markdown": "llvm-qualified-auto clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/llvm/qualified-auto.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ResourceItemNotResolved",
                "shortDescription": {
                  "text": "Cannot resolve resource item"
                },
                "fullDescription": {
                  "text": "Cannot resolve resource item",
                  "markdown": "Cannot resolve resource item"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InheritdocInvalidUsage",
                "shortDescription": {
                  "text": "Usage of <inheritdoc /> is invalid"
                },
                "fullDescription": {
                  "text": "Usage of is invalid",
                  "markdown": "Usage of is invalid"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCocoaRunLoopAutoreleaseLeak",
                "shortDescription": {
                  "text": "osx.cocoa.RunLoopAutoreleaseLeak clang static analyzer check"
                },
                "fullDescription": {
                  "text": "osx.cocoa.RunLoopAutoreleaseLeak clang static analyzer check. Learn more...",
                  "markdown": "osx.cocoa.RunLoopAutoreleaseLeak clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticComma",
                "shortDescription": {
                  "text": "comma clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wcomma clang diagnostic. Learn more...",
                  "markdown": "-Wcomma clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wcomma)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VirtualMemberNeverOverridden.Local",
                "shortDescription": {
                  "text": "Virtual (overridable) member is never overridden (private accessibility)"
                },
                "fullDescription": {
                  "text": "Virtual (overridable) member is never overridden and so the 'virtual' ('overridable') modifier can be removed Learn more...",
                  "markdown": "Virtual (overridable) member is never overridden and so the 'virtual' ('overridable') modifier can be removed [Learn more...](https://www.jetbrains.com/help/rider/VirtualMemberNeverOverridden.Local.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantAlwaysMatchSubpattern",
                "shortDescription": {
                  "text": "Subpattern that always matches is redundant"
                },
                "fullDescription": {
                  "text": "Subpattern containing discard pattern or empty object pattern can be removed",
                  "markdown": "Subpattern containing discard pattern or empty object pattern can be removed"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAmbiguousMacro",
                "shortDescription": {
                  "text": "ambiguous-macro clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wambiguous-macro clang diagnostic. Learn more...",
                  "markdown": "-Wambiguous-macro clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wambiguous-macro)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.DependencyPropertyResolveError",
                "shortDescription": {
                  "text": "Dependency property descriptor field missing"
                },
                "fullDescription": {
                  "text": "Dependency property descriptor field missing or implementation does not comply with Microsoft style guide",
                  "markdown": "Dependency property descriptor field missing or implementation does not comply with Microsoft style guide"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ParameterTypeCanBeEnumerable.Local",
                "shortDescription": {
                  "text": "Parameter type can be IEnumerable<T> (private accessibility)"
                },
                "fullDescription": {
                  "text": "Parameter can be declared with IEnumerable type but it is declared with more specific type (e.g. List) Learn more...",
                  "markdown": "Parameter can be declared with IEnumerable type but it is declared with more specific type (e.g. List) [Learn more...](https://www.jetbrains.com/help/rider/ParameterTypeCanBeEnumerable.Local.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantAssignment",
                "shortDescription": {
                  "text": "Assignment is not used"
                },
                "fullDescription": {
                  "text": "Value assigned to a local variable or parameter is not used in any execution path Learn more...",
                  "markdown": "Value assigned to a local variable or parameter is not used in any execution path [Learn more...](https://www.jetbrains.com/help/rider/RedundantAssignment.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeConcatNestedNamespaces",
                "shortDescription": {
                  "text": "modernize-concat-nested-namespaces clang-tidy check"
                },
                "fullDescription": {
                  "text": "modernize-concat-nested-namespaces clang-tidy check. Learn more...",
                  "markdown": "modernize-concat-nested-namespaces clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/concat-nested-namespaces.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticC99Compat",
                "shortDescription": {
                  "text": "c99-compat clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wc99-compat clang diagnostic. Learn more...",
                  "markdown": "-Wc99-compat clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wc99-compat)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftUsingDecl",
                "shortDescription": {
                  "text": "microsoft-using-decl clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmicrosoft-using-decl clang diagnostic. Learn more...",
                  "markdown": "-Wmicrosoft-using-decl clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-using-decl)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAbseilRedundantStrcatCalls",
                "shortDescription": {
                  "text": "abseil-redundant-strcat-calls clang-tidy check"
                },
                "fullDescription": {
                  "text": "abseil-redundant-strcat-calls clang-tidy check. Learn more...",
                  "markdown": "abseil-redundant-strcat-calls clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/redundant-strcat-calls.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUninitialized",
                "shortDescription": {
                  "text": "uninitialized clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wuninitialized clang diagnostic. Learn more...",
                  "markdown": "-Wuninitialized clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wuninitialized)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.BurstForeachNotSupported",
                "shortDescription": {
                  "text": "The 'foreach' construction is not supported"
                },
                "fullDescription": {
                  "text": "The 'foreach' construction is not supported",
                  "markdown": "The 'foreach' construction is not supported"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity Burst Compiler Warnings",
                      "index": 34,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPacked",
                "shortDescription": {
                  "text": "packed clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wpacked clang diagnostic. Learn more...",
                  "markdown": "-Wpacked clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wpacked)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Html.PathError",
                "shortDescription": {
                  "text": "Path error"
                },
                "fullDescription": {
                  "text": "Path error",
                  "markdown": "Path error"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ExplicitCallerInfoArgument",
                "shortDescription": {
                  "text": "Explicit argument passed to parameter with caller info attribute"
                },
                "fullDescription": {
                  "text": "Compiler generates correct value for parameters marked with [CallerMemberName], [CallerFilePath], [CallerLineNumber], or [CallerArgumentExpression] attributes",
                  "markdown": "Compiler generates correct value for parameters marked with \\[CallerMemberName\\], \\[CallerFilePath\\], \\[CallerLineNumber\\], or \\[CallerArgumentExpression\\] attributes"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOptinCplusplusUninitializedObject",
                "shortDescription": {
                  "text": "optin.cplusplus.UninitializedObject clang static analyzer check"
                },
                "fullDescription": {
                  "text": "optin.cplusplus.UninitializedObject clang static analyzer check. Learn more...",
                  "markdown": "optin.cplusplus.UninitializedObject clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDelimitedEscapeSequenceExtension",
                "shortDescription": {
                  "text": "delimited-escape-sequence-extension clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdelimited-escape-sequence-extension clang diagnostic. Learn more...",
                  "markdown": "-Wdelimited-escape-sequence-extension clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdelimited-escape-sequence-extension)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8819",
                "shortDescription": {
                  "text": "Nullability of reference types in return type doesn't match partial method declaration."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppHidingFunction",
                "shortDescription": {
                  "text": "Class member function hiding a non-virtual function from a base class"
                },
                "fullDescription": {
                  "text": "Class member function hides a non-virtual function from a base class",
                  "markdown": "Class member function hides a non-virtual function from a base class"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LoopCanBeConvertedToQuery",
                "shortDescription": {
                  "text": "Loop can be converted into LINQ-expression"
                },
                "fullDescription": {
                  "text": "A 'foreach' ('For Each' for VB.NET) or 'for' statement can be converted into a LINQ-expression Learn more...",
                  "markdown": "A 'foreach' ('For Each' for VB.NET) or 'for' statement can be converted into a LINQ-expression [Learn more...](https://www.jetbrains.com/help/rider/LoopCanBeConvertedToQuery.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertMsc51Cpp",
                "shortDescription": {
                  "text": "cert-msc51-cpp clang-tidy check"
                },
                "fullDescription": {
                  "text": "cert-msc51-cpp clang-tidy check. Learn more...",
                  "markdown": "cert-msc51-cpp clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/msc51-cpp.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SymbolFromNotCopiedLocallyReferenceUsedWarning",
                "shortDescription": {
                  "text": "Symbol from module that might be missing at runtime"
                },
                "fullDescription": {
                  "text": "Highlights symbols used from a referenced module that is not copied locally Learn more...",
                  "markdown": "Highlights symbols used from a referenced module that is not copied locally [Learn more...](https://www.jetbrains.com/help/rider/SymbolFromNotCopiedLocallyReferenceUsedWarning.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMaxTokens",
                "shortDescription": {
                  "text": "max-tokens clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmax-tokens clang diagnostic. Learn more...",
                  "markdown": "-Wmax-tokens clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmax-tokens)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticModuleFileConfigMismatch",
                "shortDescription": {
                  "text": "module-file-config-mismatch clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmodule-file-config-mismatch clang diagnostic. Learn more...",
                  "markdown": "-Wmodule-file-config-mismatch clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmodule-file-config-mismatch)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticVoidPtrDereference",
                "shortDescription": {
                  "text": "void-ptr-dereference clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wvoid-ptr-dereference clang diagnostic. Learn more...",
                  "markdown": "-Wvoid-ptr-dereference clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wvoid-ptr-dereference)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppVirtualFunctionCallInsideCtor",
                "shortDescription": {
                  "text": "Call to a virtual function inside a constructor/destructor is resolved at compile time"
                },
                "fullDescription": {
                  "text": "Call to a virtual function inside a constructor/destructor is resolved at compile time",
                  "markdown": "Call to a virtual function inside a constructor/destructor is resolved at compile time"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.PropertyDrawerOnGUIBase",
                "shortDescription": {
                  "text": "Avoid 'base.OnGUI()' in classes derived from 'PropertyDrawer'"
                },
                "fullDescription": {
                  "text": "The default implementation for 'OnGUI' in 'PropertyDrawer' will print 'No GUI Implemented' in the Unity inspector. Learn more...",
                  "markdown": "The default implementation for 'OnGUI' in 'PropertyDrawer' will print 'No GUI Implemented' in the Unity inspector. [Learn more...](https://github.com/JetBrains/resharper-unity/wiki/base.OnGUI()-will-print-%22no-GUI-implemented%22-in-the-Unity-inspector)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityContainerContains",
                "shortDescription": {
                  "text": "readability-container-contains clang-tidy check"
                },
                "fullDescription": {
                  "text": "readability-container-contains clang-tidy check. Learn more...",
                  "markdown": "readability-container-contains clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/container-contains.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAndroidCloexecInotifyInit",
                "shortDescription": {
                  "text": "android-cloexec-inotify-init clang-tidy check"
                },
                "fullDescription": {
                  "text": "android-cloexec-inotify-init clang-tidy check. Learn more...",
                  "markdown": "android-cloexec-inotify-init clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/android/cloexec-inotify-init.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInlineNewDelete",
                "shortDescription": {
                  "text": "inline-new-delete clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Winline-new-delete clang diagnostic. Learn more...",
                  "markdown": "-Winline-new-delete clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#winline-new-delete)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PossibleStructMemberModificationOfNonVariableStruct",
                "shortDescription": {
                  "text": "Value assigned to a property of non-variable qualifier expression can be lost"
                },
                "fullDescription": {
                  "text": "Value assigned to a property of non-variable qualifier expression can be lost if struct type will be substituted as generic type argument",
                  "markdown": "Value assigned to a property of non-variable qualifier expression can be lost if struct type will be substituted as generic type argument"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppInvalidAccessMoved",
                "shortDescription": {
                  "text": "hicpp-invalid-access-moved clang-tidy check"
                },
                "fullDescription": {
                  "text": "hicpp-invalid-access-moved clang-tidy check. Learn more...",
                  "markdown": "hicpp-invalid-access-moved clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/invalid-access-moved.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadControlBracesLineBreaks",
                "shortDescription": {
                  "text": "Incorrect line breaks (around statement braces)"
                },
                "fullDescription": {
                  "text": "Around statement braces Learn more...",
                  "markdown": "Around statement braces [Learn more...](https://www.jetbrains.com/help/rider/BadControlBracesLineBreaks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInaccessibleBase",
                "shortDescription": {
                  "text": "inaccessible-base clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Winaccessible-base clang diagnostic. Learn more...",
                  "markdown": "-Winaccessible-base clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#winaccessible-base)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpMissingPluginDependency",
                "shortDescription": {
                  "text": "Dependency for the plugin is missing in the project file"
                },
                "fullDescription": {
                  "text": "Dependency for the plugin is missing in the project file",
                  "markdown": "Dependency for the plugin is missing in the project file"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unreal Build System",
                      "index": 71,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppConstValueFunctionReturnType",
                "shortDescription": {
                  "text": "Function returns by const value"
                },
                "fullDescription": {
                  "text": "Returning from a function by const value is usually not beneficial. Consider returning values as non-const to take advantage of move semantics.",
                  "markdown": "Returning from a function by const value is usually not beneficial. Consider returning values as non-const to take advantage of move semantics."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantAttributeSuffix",
                "shortDescription": {
                  "text": "Redundant 'Attribute' suffix"
                },
                "fullDescription": {
                  "text": "Redundant 'Attribute' suffix can be omitted when referencing attribute type",
                  "markdown": "Redundant 'Attribute' suffix can be omitted when referencing attribute type"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8825",
                "shortDescription": {
                  "text": "Return value must be non-null because parameter mentioned in [NotNullIfNotNull] annotation is non-null."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8824",
                "shortDescription": {
                  "text": "Parameter must have a non-null value when exiting because parameter mentioned in [NotNullIfNotNull] annotation is non-null."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppNonExceptionSafeResourceAcquisition",
                "shortDescription": {
                  "text": "Non-safe resource acquisition"
                },
                "fullDescription": {
                  "text": "Detects leak-prone resource acquisition/freeing constructs",
                  "markdown": "Detects leak-prone resource acquisition/freeing constructs"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCplusplusPlacementNew",
                "shortDescription": {
                  "text": "cplusplus.PlacementNew clang static analyzer check"
                },
                "fullDescription": {
                  "text": "cplusplus.PlacementNew clang static analyzer check. Learn more...",
                  "markdown": "cplusplus.PlacementNew clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCoreStackAddressEscape",
                "shortDescription": {
                  "text": "core.StackAddressEscape clang static analyzer check"
                },
                "fullDescription": {
                  "text": "core.StackAddressEscape clang static analyzer check. Learn more...",
                  "markdown": "core.StackAddressEscape clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConstantConditionalAccessQualifier",
                "shortDescription": {
                  "text": "Conditional access qualifier expression is known to be null or not null"
                },
                "fullDescription": {
                  "text": "Conditional access qualifier expression is known to be null or not null",
                  "markdown": "Conditional access qualifier expression is known to be null or not null"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyPerformanceTriviallyDestructible",
                "shortDescription": {
                  "text": "performance-trivially-destructible clang-tidy check"
                },
                "fullDescription": {
                  "text": "performance-trivially-destructible clang-tidy check. Learn more...",
                  "markdown": "performance-trivially-destructible clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/trivially-destructible.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantLambdaSignatureParentheses",
                "shortDescription": {
                  "text": "Redundant lambda signature parentheses"
                },
                "fullDescription": {
                  "text": "When lambda signature contains single implicitly-typed parameter, signature parentheses can be omitted Learn more...",
                  "markdown": "When lambda signature contains single implicitly-typed parameter, signature parentheses can be omitted [Learn more...](https://www.jetbrains.com/help/rider/RedundantLambdaSignatureParentheses.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppTooWideScopeInitStatement",
                "shortDescription": {
                  "text": "Variable can be moved to init statement"
                },
                "fullDescription": {
                  "text": "Don't introduce a variable before you need to use it",
                  "markdown": "Don't introduce a variable before you need to use it"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneImplicitWideningOfMultiplicationResult",
                "shortDescription": {
                  "text": "bugprone-implicit-widening-of-multiplication-result clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-implicit-widening-of-multiplication-result clang-tidy check. Learn more...",
                  "markdown": "bugprone-implicit-widening-of-multiplication-result clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/implicit-widening-of-multiplication-result.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppMultiwayPathsCovered",
                "shortDescription": {
                  "text": "hicpp-multiway-paths-covered clang-tidy check"
                },
                "fullDescription": {
                  "text": "hicpp-multiway-paths-covered clang-tidy check. Learn more...",
                  "markdown": "hicpp-multiway-paths-covered clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/multiway-paths-covered.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNullabilityCompleteness",
                "shortDescription": {
                  "text": "nullability-completeness clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wnullability-completeness clang diagnostic. Learn more...",
                  "markdown": "-Wnullability-completeness clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wnullability-completeness)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CanSimplifyDictionaryLookupWithTryAdd",
                "shortDescription": {
                  "text": "Can simplify dictionary lookup with 'TryAdd' method"
                },
                "fullDescription": {
                  "text": "Can simplify dictionary lookup with 'TryAdd' method",
                  "markdown": "Can simplify dictionary lookup with 'TryAdd' method"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCplusplusMove",
                "shortDescription": {
                  "text": "cplusplus.Move clang static analyzer check"
                },
                "fullDescription": {
                  "text": "cplusplus.Move clang static analyzer check. Learn more...",
                  "markdown": "cplusplus.Move clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticArcMaybeRepeatedUseOfWeak",
                "shortDescription": {
                  "text": "arc-maybe-repeated-use-of-weak clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Warc-maybe-repeated-use-of-weak clang diagnostic. Learn more...",
                  "markdown": "-Warc-maybe-repeated-use-of-weak clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#warc-maybe-repeated-use-of-weak)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RequiredBaseTypesDirectConflict",
                "shortDescription": {
                  "text": "Type specified in '[BaseTypeRequired]' attribute conflicts another type"
                },
                "fullDescription": {
                  "text": "Type specified in '[BaseTypeRequired]' attribute conflicts with another type",
                  "markdown": "Type specified in '\\[BaseTypeRequired\\]' attribute conflicts with another type"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Constraints Violations",
                      "index": 43,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0078",
                "shortDescription": {
                  "text": "The 'l' suffix is easily confused with the digit '1'"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://msdn.microsoft.com/en-us/library/s74dtt7k.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUnionMemberOfReferenceType",
                "shortDescription": {
                  "text": "Union member of reference type"
                },
                "fullDescription": {
                  "text": "Unions cannot contain non-static data members of reference types",
                  "markdown": "Unions cannot contain non-static data members of reference types"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnneededMemberFunction",
                "shortDescription": {
                  "text": "unneeded-member-function clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunneeded-member-function clang diagnostic. Learn more...",
                  "markdown": "-Wunneeded-member-function clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunneeded-member-function)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUseStdSize",
                "shortDescription": {
                  "text": "std::size can be used"
                },
                "fullDescription": {
                  "text": "std::size is type safe alternative to C idiom for array size calculation",
                  "markdown": "std::size is type safe alternative to C idiom for array size calculation"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticExplicitOwnershipType",
                "shortDescription": {
                  "text": "explicit-ownership-type clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wexplicit-ownership-type clang diagnostic. Learn more...",
                  "markdown": "-Wexplicit-ownership-type clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wexplicit-ownership-type)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuArrayMemberParenInit",
                "shortDescription": {
                  "text": "gnu-array-member-paren-init clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wgnu-array-member-paren-init clang diagnostic. Learn more...",
                  "markdown": "-Wgnu-array-member-paren-init clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-array-member-paren-init)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBStringLastIndexOfIsCultureSpecific.1",
                "shortDescription": {
                  "text": "String.LastIndexOf is culture-specific (string.LastIndexOf(string) is culture-specific)"
                },
                "fullDescription": {
                  "text": "$s$.LastIndexOf($sarg$)",
                  "markdown": "$s$.LastIndexOf($sarg$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBStringLastIndexOfIsCultureSpecific.2",
                "shortDescription": {
                  "text": "String.LastIndexOf is culture-specific (string.LastIndexOf(string, int) is culture-specific)"
                },
                "fullDescription": {
                  "text": "$s$.LastIndexOf($sarg$, $iarg1$)",
                  "markdown": "$s$.LastIndexOf($sarg$, $iarg1$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantMyClassQualifier",
                "shortDescription": {
                  "text": "Redundant 'MyClass.' qualifier"
                },
                "fullDescription": {
                  "text": "'MyClass.' qualifier is redundant and can be safely removed without changing code semantics.",
                  "markdown": "'MyClass.' qualifier is redundant and can be safely removed without changing code semantics."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBStringLastIndexOfIsCultureSpecific.3",
                "shortDescription": {
                  "text": "String.LastIndexOf is culture-specific (string.LastIndexOf(string, int) is culture-specific)"
                },
                "fullDescription": {
                  "text": "$s$.LastIndexOf($sarg$, $iarg1$, $iarg2$)",
                  "markdown": "$s$.LastIndexOf($sarg$, $iarg1$, $iarg2$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityAvoidConstParamsInDecls",
                "shortDescription": {
                  "text": "readability-avoid-const-params-in-decls clang-tidy check"
                },
                "fullDescription": {
                  "text": "readability-avoid-const-params-in-decls clang-tidy check. Learn more...",
                  "markdown": "readability-avoid-const-params-in-decls clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/avoid-const-params-in-decls.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCompoundTokenSplit",
                "shortDescription": {
                  "text": "compound-token-split clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wcompound-token-split clang diagnostic. Learn more...",
                  "markdown": "-Wcompound-token-split clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wcompound-token-split)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppMsExtDoubleUserConversionInCopyInit",
                "shortDescription": {
                  "text": "More than one implicit conversion applied during copy-initialization. This is non-standard Microsoft C++ extension."
                },
                "fullDescription": {
                  "text": "More than one implicit conversion applied during copy-initialization. This is non-standard Microsoft C++ extension.",
                  "markdown": "More than one implicit conversion applied during copy-initialization. This is non-standard Microsoft C++ extension."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCplusplusNewDeleteLeaks",
                "shortDescription": {
                  "text": "cplusplus.NewDeleteLeaks clang static analyzer check"
                },
                "fullDescription": {
                  "text": "cplusplus.NewDeleteLeaks clang static analyzer check. Learn more...",
                  "markdown": "cplusplus.NewDeleteLeaks clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppMultipleSpaces",
                "shortDescription": {
                  "text": "Incorrect spacing (multiple spaces are prohibited)"
                },
                "fullDescription": {
                  "text": "Multiple spaces are prohibited",
                  "markdown": "Multiple spaces are prohibited"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAmbiguousMemberTemplate",
                "shortDescription": {
                  "text": "ambiguous-member-template clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wambiguous-member-template clang diagnostic. Learn more...",
                  "markdown": "-Wambiguous-member-template clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wambiguous-member-template)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularHtml.Banana",
                "shortDescription": {
                  "text": "'Banana in a box' [()] violation in Angular 2 binding"
                },
                "fullDescription": {
                  "text": "Angular 2 requires parentheses inside brackets for two-direction bindings",
                  "markdown": "Angular 2 requires parentheses inside brackets for two-direction bindings"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxAPI",
                "shortDescription": {
                  "text": "osx.API clang static analyzer check"
                },
                "fullDescription": {
                  "text": "osx.API clang static analyzer check. Learn more...",
                  "markdown": "osx.API clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticModulesAmbiguousInternalLinkage",
                "shortDescription": {
                  "text": "modules-ambiguous-internal-linkage clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmodules-ambiguous-internal-linkage clang diagnostic. Learn more...",
                  "markdown": "-Wmodules-ambiguous-internal-linkage clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmodules-ambiguous-internal-linkage)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnexpectedDirective",
                "shortDescription": {
                  "text": "The directive is unknown and will be ignored"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "T4",
                      "index": 62,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConstantNullCoalescingCondition",
                "shortDescription": {
                  "text": "'??' condition is known to be null or not null"
                },
                "fullDescription": {
                  "text": "Operand of '??' expression condition is known to be null or not null Learn more...",
                  "markdown": "Operand of '??' expression condition is known to be null or not null [Learn more...](https://www.jetbrains.com/help/rider/ConstantNullCoalescingCondition.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNullArithmetic",
                "shortDescription": {
                  "text": "null-arithmetic clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wnull-arithmetic clang diagnostic. Learn more...",
                  "markdown": "-Wnull-arithmetic clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wnull-arithmetic)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8851",
                "shortDescription": {
                  "text": "Record defined 'Equals' but not 'GetHashCode'"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneSizeofContainer",
                "shortDescription": {
                  "text": "bugprone-sizeof-container clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-sizeof-container clang-tidy check. Learn more...",
                  "markdown": "bugprone-sizeof-container clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/sizeof-container.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.AttributeProducesTooManyTests",
                "shortDescription": {
                  "text": "NUnit. Specified attribute values produce too many tests."
                },
                "fullDescription": {
                  "text": "NUnit. Values of the attribute produce too many tests, which may lead NUnit test runner to 'Out of Memory'. Learn more...",
                  "markdown": "NUnit. Values of the attribute produce too many tests, which may lead NUnit test runner to 'Out of Memory'. [Learn more...](https://www.jetbrains.com/help/rider/NUnit.AttributeProducesTooManyTests.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Html.DeadCode",
                "shortDescription": {
                  "text": "HTML Dead Code"
                },
                "fullDescription": {
                  "text": "HTML Dead Code",
                  "markdown": "HTML Dead Code"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerNullabilityNullableDereferenced",
                "shortDescription": {
                  "text": "nullability.NullableDereferenced clang static analyzer check"
                },
                "fullDescription": {
                  "text": "nullability.NullableDereferenced clang static analyzer check. Learn more...",
                  "markdown": "nullability.NullableDereferenced clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IteratorMethodResultIsIgnored",
                "shortDescription": {
                  "text": "Return value of iterator is not used"
                },
                "fullDescription": {
                  "text": "Return value of iterator is not used",
                  "markdown": "Return value of iterator is not used"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBUseMethodIsInstanceOfType",
                "shortDescription": {
                  "text": "Use method IsInstanceOfType(..)"
                },
                "fullDescription": {
                  "text": "$type$.IsAssignableFrom($expr$.GetType())",
                  "markdown": "$type$.IsAssignableFrom($expr$.GetType())"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBadIndent",
                "shortDescription": {
                  "text": "Incorrect indent (line indent should not be changed relative to the previous line elsewhere)"
                },
                "fullDescription": {
                  "text": "Line indent should not be changed relative to the previous line elsewhere",
                  "markdown": "Line indent should not be changed relative to the previous line elsewhere"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.BindingWithoutContextNotResolved",
                "shortDescription": {
                  "text": "Unresolved binding path when DataContext is unknown"
                },
                "fullDescription": {
                  "text": "Unresolved binding path when DataContext for data binding is not specified",
                  "markdown": "Unresolved binding path when DataContext for data binding is not specified"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadDeclarationBracesLineBreaks",
                "shortDescription": {
                  "text": "Incorrect line breaks (around declaration braces)"
                },
                "fullDescription": {
                  "text": "Around declaration braces Learn more...",
                  "markdown": "Around declaration braces [Learn more...](https://www.jetbrains.com/help/rider/BadDeclarationBracesLineBreaks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftAbstract",
                "shortDescription": {
                  "text": "microsoft-abstract clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmicrosoft-abstract clang diagnostic. Learn more...",
                  "markdown": "-Wmicrosoft-abstract clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-abstract)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8860",
                "shortDescription": {
                  "text": "Types and aliases should not be named 'record'"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VbUnreachableCode",
                "shortDescription": {
                  "text": "Unreachable code"
                },
                "fullDescription": {
                  "text": "Code is unreachable",
                  "markdown": "Code is unreachable"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftExtraQualification",
                "shortDescription": {
                  "text": "microsoft-extra-qualification clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmicrosoft-extra-qualification clang diagnostic. Learn more...",
                  "markdown": "-Wmicrosoft-extra-qualification clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-extra-qualification)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RemoveToList.2",
                "shortDescription": {
                  "text": "Remove ToList()"
                },
                "fullDescription": {
                  "text": "$seq$.ToList().Count($x$ => $expr$)",
                  "markdown": "$seq$.ToList().Count($x$ =\\> $expr$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RemoveToList.1",
                "shortDescription": {
                  "text": "Remove ToList()"
                },
                "fullDescription": {
                  "text": "$seq$.ToList().ToArray()",
                  "markdown": "$seq$.ToList().ToArray()"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticEnumCompare",
                "shortDescription": {
                  "text": "enum-compare clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wenum-compare clang diagnostic. Learn more...",
                  "markdown": "-Wenum-compare clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wenum-compare)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppTooWideScope",
                "shortDescription": {
                  "text": "Variable can be moved to inner scope"
                },
                "fullDescription": {
                  "text": "Don't introduce a variable before you need to use it",
                  "markdown": "Don't introduce a variable before you need to use it"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EntityNameCapturedOnly.Local",
                "shortDescription": {
                  "text": "Entity is only used to capture its name (private accessibility)"
                },
                "fullDescription": {
                  "text": "Local variable/parameter is only used to capture its name via 'nameof' expression",
                  "markdown": "Local variable/parameter is only used to capture its name via 'nameof' expression"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PossibleInfiniteInheritance",
                "shortDescription": {
                  "text": "Possible infinite inheritance"
                },
                "fullDescription": {
                  "text": "According to ECMA-335 part II (Metadata) paragraph 9.2: 'Generics and recursive inheritance graphs' Learn more...",
                  "markdown": "According to ECMA-335 part II (Metadata) paragraph 9.2: 'Generics and recursive inheritance graphs' [Learn more...](https://www.jetbrains.com/help/rider/PossibleInfiniteInheritance.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFreeNonheapObject",
                "shortDescription": {
                  "text": "free-nonheap-object clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wfree-nonheap-object clang diagnostic. Learn more...",
                  "markdown": "-Wfree-nonheap-object clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wfree-nonheap-object)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPreCpp17CompatPedantic",
                "shortDescription": {
                  "text": "pre-c++17-compat-pedantic clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wpre-c++17-compat-pedantic clang diagnostic. Learn more...",
                  "markdown": "-Wpre-c++17-compat-pedantic clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wpre-c-17-compat-pedantic)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertErr61Cpp",
                "shortDescription": {
                  "text": "cert-err61-cpp clang-tidy check"
                },
                "fullDescription": {
                  "text": "cert-err61-cpp clang-tidy check. Learn more...",
                  "markdown": "cert-err61-cpp clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/err61-cpp.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticExitTimeDestructors",
                "shortDescription": {
                  "text": "exit-time-destructors clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wexit-time-destructors clang diagnostic. Learn more...",
                  "markdown": "-Wexit-time-destructors clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wexit-time-destructors)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ShiftExpressionZeroLeftOperand",
                "shortDescription": {
                  "text": "Shift expression with zero left operand equals zero"
                },
                "fullDescription": {
                  "text": "Shift expression with zero left operand equals zero",
                  "markdown": "Shift expression with zero left operand equals zero"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDebugCompressionUnavailable",
                "shortDescription": {
                  "text": "debug-compression-unavailable clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdebug-compression-unavailable clang diagnostic. Learn more...",
                  "markdown": "-Wdebug-compression-unavailable clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdebug-compression-unavailable)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticEncodeType",
                "shortDescription": {
                  "text": "encode-type clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wencode-type clang diagnostic. Learn more...",
                  "markdown": "-Wencode-type clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wencode-type)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuStringLiteralOperatorTemplate",
                "shortDescription": {
                  "text": "gnu-string-literal-operator-template clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wgnu-string-literal-operator-template clang diagnostic. Learn more...",
                  "markdown": "-Wgnu-string-literal-operator-template clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-string-literal-operator-template)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppFunctionalStyleCast",
                "shortDescription": {
                  "text": "Functional-style cast is used instead of a C++ cast"
                },
                "fullDescription": {
                  "text": "Functional-style cast is used instead of a C++ cast",
                  "markdown": "Functional-style cast is used instead of a C++ cast"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MethodHasAsyncOverload",
                "shortDescription": {
                  "text": "Method has async overload"
                },
                "fullDescription": {
                  "text": "Method has async overload",
                  "markdown": "Method has async overload"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringStartsWithIsCultureSpecific",
                "shortDescription": {
                  "text": "String.StartsWith is culture-specific (string.StartsWith(string) is culture-specific)"
                },
                "fullDescription": {
                  "text": "$s$.StartsWith($sarg$) Learn more...",
                  "markdown": "$s$.StartsWith($sarg$) [Learn more...](https://www.jetbrains.com/help/rider/StringStartsWithIsCultureSpecific.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAbseilStrCatAppend",
                "shortDescription": {
                  "text": "abseil-str-cat-append clang-tidy check"
                },
                "fullDescription": {
                  "text": "abseil-str-cat-append clang-tidy check. Learn more...",
                  "markdown": "abseil-str-cat-append clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/str-cat-append.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantExplicitNullableCreation",
                "shortDescription": {
                  "text": "Redundant explicit nullable type creation"
                },
                "fullDescription": {
                  "text": "Value type is implicitly convertible to its nullable form, therefore explicit nullable type creation is redundant",
                  "markdown": "Value type is implicitly convertible to its nullable form, therefore explicit nullable type creation is redundant"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppExceptionBaseclass",
                "shortDescription": {
                  "text": "hicpp-exception-baseclass clang-tidy check"
                },
                "fullDescription": {
                  "text": "hicpp-exception-baseclass clang-tidy check. Learn more...",
                  "markdown": "hicpp-exception-baseclass clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/exception-baseclass.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InvokeAsExtensionMethod",
                "shortDescription": {
                  "text": "Convert static method invocation into extension method call"
                },
                "fullDescription": {
                  "text": "When extension method is invoked as static method, convert invocation into extension method syntax",
                  "markdown": "When extension method is invoked as static method, convert invocation into extension method syntax"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuUnionCast",
                "shortDescription": {
                  "text": "gnu-union-cast clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wgnu-union-cast clang diagnostic. Learn more...",
                  "markdown": "-Wgnu-union-cast clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-union-cast)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AsyncIteratorInvocationWithoutAwaitForeach",
                "shortDescription": {
                  "text": "Async iterator invocation without 'await foreach'"
                },
                "fullDescription": {
                  "text": "Because the result of asynchronous iterator call is not being iterated, execution of the current method continues before the call is completed. Consider using the 'await foreach' over the result of the call.",
                  "markdown": "Because the result of asynchronous iterator call is not being iterated, execution of the current method continues before the call is completed. Consider using the 'await foreach' over the result of the call."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8847",
                "shortDescription": {
                  "text": "The switch expression does not handle some null inputs (it is not exhaustive). However, a pattern with a 'when' clause might successfully match this value."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8846",
                "shortDescription": {
                  "text": "The switch expression does not handle all possible values of its input type (it is not exhaustive). However, a pattern with a 'when' clause might successfully match this value."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticEmptyInitStmt",
                "shortDescription": {
                  "text": "empty-init-stmt clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wempty-init-stmt clang diagnostic. Learn more...",
                  "markdown": "-Wempty-init-stmt clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wempty-init-stmt)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseNullPropagation",
                "shortDescription": {
                  "text": "Replace if statement with null-propagating code"
                },
                "fullDescription": {
                  "text": "Replaces if statement with null-propagating code using ?. operator Learn more...",
                  "markdown": "Replaces if statement with null-propagating code using ?. operator [Learn more...](https://www.jetbrains.com/help/rider/UseNullPropagation.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MustUseReturnValue",
                "shortDescription": {
                  "text": "Return value of [MustUseReturnValue] annotated method is not used"
                },
                "fullDescription": {
                  "text": "Return value of method annotated with [MustUseReturnValue] attribute is not used",
                  "markdown": "Return value of method annotated with \\[MustUseReturnValue\\] attribute is not used"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithOfType.2",
                "shortDescription": {
                  "text": "Replace with OfType<T>() (replace with OfType(Of ..)())"
                },
                "fullDescription": {
                  "text": "$seq$.Where(Function ($x$) TypeOf $x$ Is $T$).Select(Function ($y$) DirectCast($y$, $T$))",
                  "markdown": "$seq$.Where(Function ($x$) TypeOf $x$ Is $T$).Select(Function ($y$) DirectCast($y$, $T$))"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithOfType.1",
                "shortDescription": {
                  "text": "Replace with OfType<T>() (replace with OfType(Of ..)())"
                },
                "fullDescription": {
                  "text": "$seq$.Where(Function ($x$) TypeOf $x$ Is $T$).Select(Function ($y$) TryCast($y$, $T$))",
                  "markdown": "$seq$.Where(Function ($x$) TypeOf $x$ Is $T$).Select(Function ($y$) TryCast($y$, $T$))"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyObjcDeallocInCategory",
                "shortDescription": {
                  "text": "objc-dealloc-in-category clang-tidy check"
                },
                "fullDescription": {
                  "text": "objc-dealloc-in-category clang-tidy check. Learn more...",
                  "markdown": "objc-dealloc-in-category clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/objc/dealloc-in-category.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnguardedAvailability",
                "shortDescription": {
                  "text": "unguarded-availability clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunguarded-availability clang diagnostic. Learn more...",
                  "markdown": "-Wunguarded-availability clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunguarded-availability)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneIncorrectRoundings",
                "shortDescription": {
                  "text": "bugprone-incorrect-roundings clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-incorrect-roundings clang-tidy check. Learn more...",
                  "markdown": "bugprone-incorrect-roundings clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/incorrect-roundings.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNewlineEof",
                "shortDescription": {
                  "text": "newline-eof clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wnewline-eof clang diagnostic. Learn more...",
                  "markdown": "-Wnewline-eof clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wnewline-eof)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.RoutedEventResolveError",
                "shortDescription": {
                  "text": "Routed event descriptor field missing"
                },
                "fullDescription": {
                  "text": "Routed event descriptor field missing or implementation does not comply with Microsoft style guide",
                  "markdown": "Routed event descriptor field missing or implementation does not comply with Microsoft style guide"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityMagicNumbers",
                "shortDescription": {
                  "text": "readability-magic-numbers clang-tidy check"
                },
                "fullDescription": {
                  "text": "readability-magic-numbers clang-tidy check. Learn more...",
                  "markdown": "readability-magic-numbers clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/magic-numbers.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AnnotationRedundancyInHierarchy",
                "shortDescription": {
                  "text": "Annotation duplicate in hierarchy"
                },
                "fullDescription": {
                  "text": "There is base member that has the same nullness annotation",
                  "markdown": "There is base member that has the same nullness annotation"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8892",
                "shortDescription": {
                  "text": "Asynchronous 'Main' method will not be used as an entry point because a synchronous entry point was found."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticTautologicalUndefinedCompare",
                "shortDescription": {
                  "text": "tautological-undefined-compare clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wtautological-undefined-compare clang diagnostic. Learn more...",
                  "markdown": "-Wtautological-undefined-compare clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wtautological-undefined-compare)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BaseMethodCallWithDefaultParameter",
                "shortDescription": {
                  "text": "Call to base member with implicit default parameters"
                },
                "fullDescription": {
                  "text": "Call to base member with implicit default parameters",
                  "markdown": "Call to base member with implicit default parameters"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AsyncVoidLambda",
                "shortDescription": {
                  "text": "Avoid using 'async' lambda when delegate type returns 'void'"
                },
                "fullDescription": {
                  "text": "Check the usage of 'async' lambda expression: any exceptions unhandled by the lambda might lead to the process crash Learn more...",
                  "markdown": "Check the usage of 'async' lambda expression: any exceptions unhandled by the lambda might lead to the process crash [Learn more...](https://www.jetbrains.com/help/rider/AsyncVoidLambda.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.BurstTypeofExpression",
                "shortDescription": {
                  "text": "Typeof is prohibited in Burst"
                },
                "fullDescription": {
                  "text": "Typeof is prohibited in Burst",
                  "markdown": "Typeof is prohibited in Burst"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity Burst Compiler Warnings",
                      "index": 34,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.RedundantUpdateSourceTriggerAttribute",
                "shortDescription": {
                  "text": "UpdateSourceTrigger=Default is redundant"
                },
                "fullDescription": {
                  "text": "UpdateSourceTrigger=Default is redundant",
                  "markdown": "UpdateSourceTrigger=Default is redundant"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ThreadStaticAtInstanceField",
                "shortDescription": {
                  "text": "[ThreadStatic] does not work with instance fields"
                },
                "fullDescription": {
                  "text": "[ThreadStatic] does nothing with instance fields Learn more...",
                  "markdown": "\\[ThreadStatic\\] does nothing with instance fields [Learn more...](https://www.jetbrains.com/help/rider/ThreadStaticAtInstanceField.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Html.TagNotClosed",
                "shortDescription": {
                  "text": "Unclosed tag"
                },
                "fullDescription": {
                  "text": "Unclosed tag in HTML and related technologies",
                  "markdown": "Unclosed tag in HTML and related technologies"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityIsolateDeclaration",
                "shortDescription": {
                  "text": "readability-isolate-declaration clang-tidy check"
                },
                "fullDescription": {
                  "text": "readability-isolate-declaration clang-tidy check. Learn more...",
                  "markdown": "readability-isolate-declaration clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/isolate-declaration.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppThisArgMemberFuncDelegateCtorIsUnsuportedByDotNetCore",
                "shortDescription": {
                  "text": "Delegate constructors with a member pointer parameter are unsupported by .NET Core"
                },
                "fullDescription": {
                  "text": "Delegate constructors with a member pointer parameter are unsupported by .NET Core. Use a pointer to e.g. static function instead.",
                  "markdown": "Delegate constructors with a member pointer parameter are unsupported by .NET Core. Use a pointer to e.g. static function instead."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": ".NET Core",
                      "index": 73,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyMiscNonCopyableObjects",
                "shortDescription": {
                  "text": "misc-non-copyable-objects clang-tidy check"
                },
                "fullDescription": {
                  "text": "misc-non-copyable-objects clang-tidy check. Learn more...",
                  "markdown": "misc-non-copyable-objects clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/non-copyable-objects.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticTautologicalUnsignedZeroCompare",
                "shortDescription": {
                  "text": "tautological-unsigned-zero-compare clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wtautological-unsigned-zero-compare clang diagnostic. Learn more...",
                  "markdown": "-Wtautological-unsigned-zero-compare clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wtautological-unsigned-zero-compare)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAttributeWarning",
                "shortDescription": {
                  "text": "attribute-warning clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wattribute-warning clang diagnostic. Learn more...",
                  "markdown": "-Wattribute-warning clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wattribute-warning)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyLlvmlibcRestrictSystemLibcHeaders",
                "shortDescription": {
                  "text": "llvmlibc-restrict-system-libc-headers clang-tidy check"
                },
                "fullDescription": {
                  "text": "llvmlibc-restrict-system-libc-headers clang-tidy check. Learn more...",
                  "markdown": "llvmlibc-restrict-system-libc-headers clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/llvmlibc/restrict-system-libc-headers.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantBaseQualifier",
                "shortDescription": {
                  "text": "Redundant 'base.' qualifier"
                },
                "fullDescription": {
                  "text": "'base.' qualifier is redundant and can be safely removed without changing code semantics",
                  "markdown": "'base.' qualifier is redundant and can be safely removed without changing code semantics"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyMiscUniqueptrResetRelease",
                "shortDescription": {
                  "text": "misc-uniqueptr-reset-release clang-tidy check"
                },
                "fullDescription": {
                  "text": "misc-uniqueptr-reset-release clang-tidy check. Learn more...",
                  "markdown": "misc-uniqueptr-reset-release clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/uniqueptr-reset-release.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppPointerConversionDropsQualifiers",
                "shortDescription": {
                  "text": "Implicit conversion to pointer type with loss of qualifiers"
                },
                "fullDescription": {
                  "text": "Implicit conversion to pointer type with loss of qualifiers",
                  "markdown": "Implicit conversion to pointer type with loss of qualifiers"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFunctionDefInObjcContainer",
                "shortDescription": {
                  "text": "function-def-in-objc-container clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wfunction-def-in-objc-container clang diagnostic. Learn more...",
                  "markdown": "-Wfunction-def-in-objc-container clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wfunction-def-in-objc-container)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantAttributeUsageProperty",
                "shortDescription": {
                  "text": "Redundant [AttributeUsage] attribute property assignment"
                },
                "fullDescription": {
                  "text": "Application of [AttributeUsage] attribute has property assignment to its default value",
                  "markdown": "Application of \\[AttributeUsage\\] attribute has property assignment to its default value"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantBlankLines",
                "shortDescription": {
                  "text": "Incorrect blank lines (blank lines are redundant elsewhere)"
                },
                "fullDescription": {
                  "text": "Blank lines are redundant elsewhere",
                  "markdown": "Blank lines are redundant elsewhere"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FSharpRedundantOpen",
                "shortDescription": {
                  "text": "Redundant 'open' directive"
                },
                "fullDescription": {
                  "text": "Open directive is not required by the code and can be safely removed.",
                  "markdown": "Open directive is not required by the code and can be safely removed."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeUseDefaultMemberInit",
                "shortDescription": {
                  "text": "modernize-use-default-member-init clang-tidy check"
                },
                "fullDescription": {
                  "text": "modernize-use-default-member-init clang-tidy check. Learn more...",
                  "markdown": "modernize-use-default-member-init clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-default-member-init.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantIsBeforeRelationalPattern",
                "shortDescription": {
                  "text": "Redundant 'is'"
                },
                "fullDescription": {
                  "text": "Suggest to replace `x is > 42` to `x > 42` (if x is of type int)",
                  "markdown": "Suggest to replace \\`x is \\> 42\\` to \\`x \\> 42\\` (if x is of type int)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantSpace",
                "shortDescription": {
                  "text": "Incorrect spacing (space is redundant elsewhere)"
                },
                "fullDescription": {
                  "text": "Space is redundant elsewhere",
                  "markdown": "Space is redundant elsewhere"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.MissingGridIndex",
                "shortDescription": {
                  "text": "Missing grid column/row setter for non-first child"
                },
                "fullDescription": {
                  "text": "Missing grid column/row setter for non-first child inside non-trivial grid",
                  "markdown": "Missing grid column/row setter for non-first child inside non-trivial grid"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MemberCanBeProtected.Global",
                "shortDescription": {
                  "text": "Member can be made protected (non-private accessibility)"
                },
                "fullDescription": {
                  "text": "Member can be made protected Learn more...",
                  "markdown": "Member can be made protected [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBeProtected.Global.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.TestCaseResultPropertyDuplicatesExpectedResult",
                "shortDescription": {
                  "text": "NUnit. Test case Result property duplicates ExpectedResult."
                },
                "fullDescription": {
                  "text": "NUnit. Test case Result property duplicates specified ExpectedResult. Learn more...",
                  "markdown": "NUnit. Test case Result property duplicates specified ExpectedResult. [Learn more...](https://www.jetbrains.com/help/rider/NUnit.TestCaseResultPropertyDuplicatesExpectedResult.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCtu",
                "shortDescription": {
                  "text": "ctu clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wctu clang diagnostic. Learn more...",
                  "markdown": "-Wctu clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wctu)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUninitializedConstReference",
                "shortDescription": {
                  "text": "uninitialized-const-reference clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wuninitialized-const-reference clang diagnostic. Learn more...",
                  "markdown": "-Wuninitialized-const-reference clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wuninitialized-const-reference)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MissingLinebreak",
                "shortDescription": {
                  "text": "Incorrect line breaks (line break is missing elsewhere)"
                },
                "fullDescription": {
                  "text": "Line break is missing elsewhere Learn more...",
                  "markdown": "Line break is missing elsewhere [Learn more...](https://www.jetbrains.com/help/rider/MissingLinebreak.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesCCopyAssignmentSignature",
                "shortDescription": {
                  "text": "cppcoreguidelines-c-copy-assignment-signature clang-tidy check"
                },
                "fullDescription": {
                  "text": "cppcoreguidelines-c-copy-assignment-signature clang-tidy check. Learn more...",
                  "markdown": "cppcoreguidelines-c-copy-assignment-signature clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/c-copy-assignment-signature.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EventNeverSubscribedTo.Global",
                "shortDescription": {
                  "text": "Event is never subscribed to (non-private accessibility)"
                },
                "fullDescription": {
                  "text": "Event is never subscribed to",
                  "markdown": "Event is never subscribed to"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticLinkerWarnings",
                "shortDescription": {
                  "text": "linker-warnings clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wlinker-warnings clang diagnostic. Learn more...",
                  "markdown": "-Wlinker-warnings clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wlinker-warnings)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBoostFormatTooManyArgs",
                "shortDescription": {
                  "text": "Too many arguments in a call to boost::format"
                },
                "fullDescription": {
                  "text": "Too many arguments in a call to boost::format. Some of the arguments are not used.",
                  "markdown": "Too many arguments in a call to boost::format. Some of the arguments are not used."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedParameter.Global",
                "shortDescription": {
                  "text": "Unused parameter (non-private accessibility)"
                },
                "fullDescription": {
                  "text": "Parameter is never used",
                  "markdown": "Parameter is never used"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPredefinedIdentifierOutsideFunction",
                "shortDescription": {
                  "text": "predefined-identifier-outside-function clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wpredefined-identifier-outside-function clang diagnostic. Learn more...",
                  "markdown": "-Wpredefined-identifier-outside-function clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wpredefined-identifier-outside-function)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConditionIsAlwaysTrueOrFalseAccordingToNullableAPIContract",
                "shortDescription": {
                  "text": "Expression is always 'true' or 'false' according to nullable reference types' annotations"
                },
                "fullDescription": {
                  "text": "Expression is always 'true' or 'false' according to nullable reference types' annotations",
                  "markdown": "Expression is always 'true' or 'false' according to nullable reference types' annotations"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantLambdaParameterType",
                "shortDescription": {
                  "text": "Redundant lambda expression parameter type specification"
                },
                "fullDescription": {
                  "text": "Lambda expression explicit parameter type specification is redundant Learn more...",
                  "markdown": "Lambda expression explicit parameter type specification is redundant [Learn more...](https://www.jetbrains.com/help/rider/RedundantLambdaParameterType.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticArcUnsafeRetainedAssign",
                "shortDescription": {
                  "text": "arc-unsafe-retained-assign clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Warc-unsafe-retained-assign clang diagnostic. Learn more...",
                  "markdown": "-Warc-unsafe-retained-assign clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#warc-unsafe-retained-assign)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticC11Extensions",
                "shortDescription": {
                  "text": "c11-extensions clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wc11-extensions clang diagnostic. Learn more...",
                  "markdown": "-Wc11-extensions clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wc11-extensions)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LoopVariableIsNeverChangedInsideLoop",
                "shortDescription": {
                  "text": "Loop control variable is never changed inside loop"
                },
                "fullDescription": {
                  "text": "Loop control variable is never changed inside loop Learn more...",
                  "markdown": "Loop control variable is never changed inside loop [Learn more...](https://www.jetbrains.com/help/rider/LoopVariableIsNeverChangedInsideLoop.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNullCharacter",
                "shortDescription": {
                  "text": "null-character clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wnull-character clang diagnostic. Learn more...",
                  "markdown": "-Wnull-character clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wnull-character)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticTautologicalCompare",
                "shortDescription": {
                  "text": "tautological-compare clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wtautological-compare clang diagnostic. Learn more...",
                  "markdown": "-Wtautological-compare clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wtautological-compare)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBPossibleMistakenCallToGetType.1",
                "shortDescription": {
                  "text": "Possible mistaken call to GetType()"
                },
                "fullDescription": {
                  "text": "$type$.IsInstanceOfType($expr$.GetType())",
                  "markdown": "$type$.IsInstanceOfType($expr$.GetType())"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBPossibleMistakenCallToGetType.2",
                "shortDescription": {
                  "text": "Possible mistaken call to GetType()"
                },
                "fullDescription": {
                  "text": "$type$.GetType()",
                  "markdown": "$type$.GetType()"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUEBlueprintCallableFunctionUnused",
                "shortDescription": {
                  "text": "BlueprintCallable function is never used in Blueprint or C++ code"
                },
                "fullDescription": {
                  "text": "BlueprintCallable function is never used in Blueprint or C++ code",
                  "markdown": "BlueprintCallable function is never used in Blueprint or C++ code"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unreal Engine",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticModuleImportInExternC",
                "shortDescription": {
                  "text": "module-import-in-extern-c clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmodule-import-in-extern-c clang diagnostic. Learn more...",
                  "markdown": "-Wmodule-import-in-extern-c clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmodule-import-in-extern-c)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MissingHeadTag",
                "shortDescription": {
                  "text": "Important tags or attributes missing (missing <head>)"
                },
                "fullDescription": {
                  "text": "<([)html(]) $attr1$>$cont$",
                  "markdown": "\\<(\\[)html(\\]) $attr1$\\>$cont$"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrangeDefaultValueWhenTypeEvident",
                "shortDescription": {
                  "text": "Use preferred style of default value expression when type is evident"
                },
                "fullDescription": {
                  "text": "Add or remove explicit type specification in default value expression when type is evident from the usage",
                  "markdown": "Add or remove explicit type specification in default value expression when type is evident from the usage"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantInlineSpecifier",
                "shortDescription": {
                  "text": "Redundant 'inline' specifier"
                },
                "fullDescription": {
                  "text": "The 'inline' specifier on a function definition is redundant",
                  "markdown": "The 'inline' specifier on a function definition is redundant"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUE4ProbableMemoryIssuesWithUObject",
                "shortDescription": {
                  "text": "Non-UProperty object member can be destroyed during garbage collection, resulting in a stale pointer"
                },
                "fullDescription": {
                  "text": "Non-UProperty object member can be destroyed during garbage collection, resulting in a stale pointer",
                  "markdown": "Non-UProperty object member can be destroyed during garbage collection, resulting in a stale pointer"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unreal Engine",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyMiscUnconventionalAssignOperator",
                "shortDescription": {
                  "text": "misc-unconventional-assign-operator clang-tidy check"
                },
                "fullDescription": {
                  "text": "misc-unconventional-assign-operator clang-tidy check. Learn more...",
                  "markdown": "misc-unconventional-assign-operator clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/unconventional-assign-operator.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCFStringLiteral",
                "shortDescription": {
                  "text": "CFString-literal clang diagnostic"
                },
                "fullDescription": {
                  "text": "-WCFString-literal clang diagnostic. Learn more...",
                  "markdown": "-WCFString-literal clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wCFString-literal)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantElseKeywordInsideCompoundStatement",
                "shortDescription": {
                  "text": "Redundant 'else' keyword inside compound statement"
                },
                "fullDescription": {
                  "text": "Redundant 'else' keyword inside compound statement",
                  "markdown": "Redundant 'else' keyword inside compound statement"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.IncorrectArgumentType",
                "shortDescription": {
                  "text": "NUnit. Incompatible argument type or incorrect argument value."
                },
                "fullDescription": {
                  "text": "Argument value in the [TestCase] attribute is incorrect or is not compatible with the test method parameter type Learn more...",
                  "markdown": "Argument value in the \\[TestCase\\] attribute is incorrect or is not compatible with the test method parameter type [Learn more...](https://www.jetbrains.com/help/rider/NUnit.IncorrectArgumentType.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UsePatternMatching",
                "shortDescription": {
                  "text": "Convert 'as' expression type check and the following null check into pattern matching"
                },
                "fullDescription": {
                  "text": "Replace variable for 'as' expression type check and the following check for it being not null with C# 7.0 pattern matching expression Learn more...",
                  "markdown": "Replace variable for 'as' expression type check and the following check for it being not null with C# 7.0 pattern matching expression [Learn more...](https://www.jetbrains.com/help/rider/UsePatternMatching.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppTemplateParameterShadowing",
                "shortDescription": {
                  "text": "Redeclaration of a template parameter from an outer scope"
                },
                "fullDescription": {
                  "text": "A template parameter from an outer scope is shadowed by a declaration with the same name",
                  "markdown": "A template parameter from an outer scope is shadowed by a declaration with the same name"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticZeroLengthArray",
                "shortDescription": {
                  "text": "zero-length-array clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wzero-length-array clang diagnostic. Learn more...",
                  "markdown": "-Wzero-length-array clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wzero-length-array)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityRedundantMemberInit",
                "shortDescription": {
                  "text": "readability-redundant-member-init clang-tidy check"
                },
                "fullDescription": {
                  "text": "readability-redundant-member-init clang-tidy check. Learn more...",
                  "markdown": "readability-redundant-member-init clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/redundant-member-init.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneFoldInitType",
                "shortDescription": {
                  "text": "bugprone-fold-init-type clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-fold-init-type clang-tidy check. Learn more...",
                  "markdown": "bugprone-fold-init-type clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/fold-init-type.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.AsyncMethodMustBeTask",
                "shortDescription": {
                  "text": "NUnit. Async test method must return Task or Task<T>"
                },
                "fullDescription": {
                  "text": "NUnit supports only async test methods that return Task or Task Learn more...",
                  "markdown": "NUnit supports only async test methods that return Task or Task [Learn more...](https://www.jetbrains.com/help/rider/NUnit.AsyncMethodMustBeTask.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityStaticDefinitionInAnonymousNamespace",
                "shortDescription": {
                  "text": "readability-static-definition-in-anonymous-namespace clang-tidy check"
                },
                "fullDescription": {
                  "text": "readability-static-definition-in-anonymous-namespace clang-tidy check. Learn more...",
                  "markdown": "readability-static-definition-in-anonymous-namespace clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/static-definition-in-anonymous-namespace.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneInaccurateErase",
                "shortDescription": {
                  "text": "bugprone-inaccurate-erase clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-inaccurate-erase clang-tidy check. Learn more...",
                  "markdown": "bugprone-inaccurate-erase clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/inaccurate-erase.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMismatchedReturnTypes",
                "shortDescription": {
                  "text": "mismatched-return-types clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmismatched-return-types clang diagnostic. Learn more...",
                  "markdown": "-Wmismatched-return-types clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmismatched-return-types)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIdiomaticParentheses",
                "shortDescription": {
                  "text": "idiomatic-parentheses clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Widiomatic-parentheses clang diagnostic. Learn more...",
                  "markdown": "-Widiomatic-parentheses clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#widiomatic-parentheses)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticLargeByValueCopy",
                "shortDescription": {
                  "text": "large-by-value-copy clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wlarge-by-value-copy clang diagnostic. Learn more...",
                  "markdown": "-Wlarge-by-value-copy clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wlarge-by-value-copy)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InconsistentNaming",
                "shortDescription": {
                  "text": "Inconsistent Naming"
                },
                "fullDescription": {
                  "text": "Name doesn't match naming style defined for this kind of symbol Learn more...",
                  "markdown": "Name doesn't match naming style defined for this kind of symbol [Learn more...](https://www.jetbrains.com/help/rider/InconsistentNaming.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Constraints Violations",
                      "index": 43,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnevaluatedExpression",
                "shortDescription": {
                  "text": "unevaluated-expression clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunevaluated-expression clang diagnostic. Learn more...",
                  "markdown": "-Wunevaluated-expression clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunevaluated-expression)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAnalyzerIncompatiblePlugin",
                "shortDescription": {
                  "text": "analyzer-incompatible-plugin clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wanalyzer-incompatible-plugin clang diagnostic. Learn more...",
                  "markdown": "-Wanalyzer-incompatible-plugin clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wanalyzer-incompatible-plugin)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithOfType.LastOrDefault.1",
                "shortDescription": {
                  "text": "Replace with OfType<T>().LastOrDefault() (replace with OfType(Of ..)().LastOrDefault())"
                },
                "fullDescription": {
                  "text": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).LastOrDefault(Function ($y$) $y$ IsNot Nothing)",
                  "markdown": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).LastOrDefault(Function ($y$) $y$ IsNot Nothing)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithOfType.LastOrDefault.2",
                "shortDescription": {
                  "text": "Replace with OfType<T>().LastOrDefault() (replace with OfType(Of ..)().LastOrDefault(..))"
                },
                "fullDescription": {
                  "text": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).LastOrDefault(Function ($y$) $y$ IsNot Nothing AndAlso $expr$)",
                  "markdown": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).LastOrDefault(Function ($y$) $y$ IsNot Nothing AndAlso $expr$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPropertyAccessDotSyntax",
                "shortDescription": {
                  "text": "property-access-dot-syntax clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wproperty-access-dot-syntax clang diagnostic. Learn more...",
                  "markdown": "-Wproperty-access-dot-syntax clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wproperty-access-dot-syntax)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringLastIndexOfIsCultureSpecific.3",
                "shortDescription": {
                  "text": "String.LastIndexOf is culture-specific (string.LastIndexOf(string, int) is culture-specific)"
                },
                "fullDescription": {
                  "text": "$s$.LastIndexOf($sarg$, $iarg1$, $iarg2$) Learn more...",
                  "markdown": "$s$.LastIndexOf($sarg$, $iarg1$, $iarg2$) [Learn more...](https://www.jetbrains.com/help/rider/StringLastIndexOfIsCultureSpecific.3.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringLastIndexOfIsCultureSpecific.2",
                "shortDescription": {
                  "text": "String.LastIndexOf is culture-specific (string.LastIndexOf(string, int) is culture-specific)"
                },
                "fullDescription": {
                  "text": "$s$.LastIndexOf($sarg$, $iarg1$) Learn more...",
                  "markdown": "$s$.LastIndexOf($sarg$, $iarg1$) [Learn more...](https://www.jetbrains.com/help/rider/StringLastIndexOfIsCultureSpecific.2.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Razor.LayoutNotResolved",
                "shortDescription": {
                  "text": "Unknown Razor layout"
                },
                "fullDescription": {
                  "text": "Unknown Razor layout",
                  "markdown": "Unknown Razor layout"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticHipOnly",
                "shortDescription": {
                  "text": "hip-only clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Whip-only clang diagnostic. Learn more...",
                  "markdown": "-Whip-only clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#whip-only)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantNullableTypeMark",
                "shortDescription": {
                  "text": "Type check for nullable type is equal to underlying type check"
                },
                "fullDescription": {
                  "text": "Type check for nullable type in 'is' expression is equal to underlying type check",
                  "markdown": "Type check for nullable type in 'is' expression is equal to underlying type check"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringLastIndexOfIsCultureSpecific.1",
                "shortDescription": {
                  "text": "String.LastIndexOf is culture-specific (string.LastIndexOf(string) is culture-specific)"
                },
                "fullDescription": {
                  "text": "$s$.LastIndexOf($sarg$) Learn more...",
                  "markdown": "$s$.LastIndexOf($sarg$) [Learn more...](https://www.jetbrains.com/help/rider/StringLastIndexOfIsCultureSpecific.1.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSwitchBool",
                "shortDescription": {
                  "text": "switch-bool clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wswitch-bool clang diagnostic. Learn more...",
                  "markdown": "-Wswitch-bool clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wswitch-bool)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticBitwiseInsteadOfLogical",
                "shortDescription": {
                  "text": "bitwise-instead-of-logical clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wbitwise-instead-of-logical clang diagnostic. Learn more...",
                  "markdown": "-Wbitwise-instead-of-logical clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wbitwise-instead-of-logical)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FSharpRedundantAttributeParens",
                "shortDescription": {
                  "text": "Redundant attribute parentheses argument"
                },
                "fullDescription": {
                  "text": "Parentheses are redundant if attribute has no arguments.",
                  "markdown": "Parentheses are redundant if attribute has no arguments."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPedanticMacros",
                "shortDescription": {
                  "text": "pedantic-macros clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wpedantic-macros clang diagnostic. Learn more...",
                  "markdown": "-Wpedantic-macros clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wpedantic-macros)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppSignedBitwise",
                "shortDescription": {
                  "text": "hicpp-signed-bitwise clang-tidy check"
                },
                "fullDescription": {
                  "text": "hicpp-signed-bitwise clang-tidy check. Learn more...",
                  "markdown": "hicpp-signed-bitwise clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/signed-bitwise.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInvalidUtf8",
                "shortDescription": {
                  "text": "invalid-utf8 clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Winvalid-utf8 clang diagnostic. Learn more...",
                  "markdown": "-Winvalid-utf8 clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#winvalid-utf8)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppNonInlineVariableDefinitionInHeaderFile",
                "shortDescription": {
                  "text": "Non-inline variable definition in a header file"
                },
                "fullDescription": {
                  "text": "A variable definition in a header file that will cause multiple definition linkage error",
                  "markdown": "A variable definition in a header file that will cause multiple definition linkage error"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnusedLabel",
                "shortDescription": {
                  "text": "unused-label clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunused-label clang diagnostic. Learn more...",
                  "markdown": "-Wunused-label clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-label)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.GridDefinitionsCanBeConvertedToAttribute",
                "shortDescription": {
                  "text": "Grid columns/rows definitions can be converted to attribute"
                },
                "fullDescription": {
                  "text": "Grid columns/rows definitions can be converted to attribute",
                  "markdown": "Grid columns/rows definitions can be converted to attribute"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerUnixCstringCStringModeling",
                "shortDescription": {
                  "text": "unix.cstring.CStringModeling clang static analyzer check"
                },
                "fullDescription": {
                  "text": "unix.cstring.CStringModeling clang static analyzer check. Learn more...",
                  "markdown": "unix.cstring.CStringModeling clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticImportPreprocessorDirectivePedantic",
                "shortDescription": {
                  "text": "import-preprocessor-directive-pedantic clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wimport-preprocessor-directive-pedantic clang diagnostic. Learn more...",
                  "markdown": "-Wimport-preprocessor-directive-pedantic clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wimport-preprocessor-directive-pedantic)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppMsExtCopyElisionInCopyInitDeclarator",
                "shortDescription": {
                  "text": "Call of deleted copy constructor elided during copy-initialization. This is non-standard Microsoft C++ extension."
                },
                "fullDescription": {
                  "text": "Call of deleted copy constructor elided during copy-initialization. This is non-standard Microsoft C++ extension.",
                  "markdown": "Call of deleted copy constructor elided during copy-initialization. This is non-standard Microsoft C++ extension."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ResourceNotResolved",
                "shortDescription": {
                  "text": "Cannot resolve resource"
                },
                "fullDescription": {
                  "text": "Cannot resolve resource",
                  "markdown": "Cannot resolve resource"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBWarnings__BC42016",
                "shortDescription": {
                  "text": "Runtime errors might occur when converting X to Y"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://msdn.microsoft.com/en-us/library/56k670kt.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticConstantConversion",
                "shortDescription": {
                  "text": "constant-conversion clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wconstant-conversion clang diagnostic. Learn more...",
                  "markdown": "-Wconstant-conversion clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wconstant-conversion)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticExternCCompat",
                "shortDescription": {
                  "text": "extern-c-compat clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wextern-c-compat clang diagnostic. Learn more...",
                  "markdown": "-Wextern-c-compat clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wextern-c-compat)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnguardedAvailabilityNew",
                "shortDescription": {
                  "text": "unguarded-availability-new clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunguarded-availability-new clang diagnostic. Learn more...",
                  "markdown": "-Wunguarded-availability-new clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunguarded-availability-new)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUndefinedInternalType",
                "shortDescription": {
                  "text": "undefined-internal-type clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wundefined-internal-type clang diagnostic. Learn more...",
                  "markdown": "-Wundefined-internal-type clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wundefined-internal-type)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIgnoredAttributes",
                "shortDescription": {
                  "text": "ignored-attributes clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wignored-attributes clang diagnostic. Learn more...",
                  "markdown": "-Wignored-attributes clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wignored-attributes)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedefinitionOfDefaultArgumentInOverrideFunction",
                "shortDescription": {
                  "text": "Override function redefines a default parameter argument"
                },
                "fullDescription": {
                  "text": "An override function redefines a default parameter argument, previously defined in a base function",
                  "markdown": "An override function redefines a default parameter argument, previously defined in a base function"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCplusplusVirtualCallModeling",
                "shortDescription": {
                  "text": "cplusplus.VirtualCallModeling clang static analyzer check"
                },
                "fullDescription": {
                  "text": "cplusplus.VirtualCallModeling clang static analyzer check. Learn more...",
                  "markdown": "cplusplus.VirtualCallModeling clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerValistUnterminated",
                "shortDescription": {
                  "text": "valist.Unterminated clang static analyzer check"
                },
                "fullDescription": {
                  "text": "valist.Unterminated clang static analyzer check. Learn more...",
                  "markdown": "valist.Unterminated clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Asp.ThemeNotResolved",
                "shortDescription": {
                  "text": "Unknown theme"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerValistCopyToSelf",
                "shortDescription": {
                  "text": "valist.CopyToSelf clang static analyzer check"
                },
                "fullDescription": {
                  "text": "valist.CopyToSelf clang static analyzer check. Learn more...",
                  "markdown": "valist.CopyToSelf clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBWarnings__BC42025",
                "shortDescription": {
                  "text": "Access of shared member through an instance"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://msdn.microsoft.com/en-us/library/y6t76186.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNonVirtualDtor",
                "shortDescription": {
                  "text": "non-virtual-dtor clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wnon-virtual-dtor clang diagnostic. Learn more...",
                  "markdown": "-Wnon-virtual-dtor clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wnon-virtual-dtor)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFixedPointOverflow",
                "shortDescription": {
                  "text": "fixed-point-overflow clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wfixed-point-overflow clang diagnostic. Learn more...",
                  "markdown": "-Wfixed-point-overflow clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wfixed-point-overflow)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyObjcAssertEquals",
                "shortDescription": {
                  "text": "objc-assert-equals clang-tidy check"
                },
                "fullDescription": {
                  "text": "objc-assert-equals clang-tidy check. Learn more...",
                  "markdown": "objc-assert-equals clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/objc/assert-equals.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCocoaObjCGenerics",
                "shortDescription": {
                  "text": "osx.cocoa.ObjCGenerics clang static analyzer check"
                },
                "fullDescription": {
                  "text": "osx.cocoa.ObjCGenerics clang static analyzer check. Learn more...",
                  "markdown": "osx.cocoa.ObjCGenerics clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMissingSysroot",
                "shortDescription": {
                  "text": "missing-sysroot clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmissing-sysroot clang diagnostic. Learn more...",
                  "markdown": "-Wmissing-sysroot clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmissing-sysroot)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneNoEscape",
                "shortDescription": {
                  "text": "bugprone-no-escape clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-no-escape clang-tidy check. Learn more...",
                  "markdown": "bugprone-no-escape clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/no-escape.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedExperimentalCoroutine",
                "shortDescription": {
                  "text": "deprecated-experimental-coroutine clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdeprecated-experimental-coroutine clang diagnostic. Learn more...",
                  "markdown": "-Wdeprecated-experimental-coroutine clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-experimental-coroutine)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp11CompatPedantic",
                "shortDescription": {
                  "text": "c++11-compat-pedantic clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wc++11-compat-pedantic clang diagnostic. Learn more...",
                  "markdown": "-Wc++11-compat-pedantic clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wc-11-compat-pedantic)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.XamlUnknownDeviceFamilyTypeHighlighting",
                "shortDescription": {
                  "text": "Unknown DeviceFamily"
                },
                "fullDescription": {
                  "text": "Unknown DeviceFamily",
                  "markdown": "Unknown DeviceFamily"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticReservedUserDefinedLiteral",
                "shortDescription": {
                  "text": "reserved-user-defined-literal clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wreserved-user-defined-literal clang diagnostic. Learn more...",
                  "markdown": "-Wreserved-user-defined-literal clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wreserved-user-defined-literal)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.DecimalParsingIsCultureDependent",
                "shortDescription": {
                  "text": "Decimal numbers parsed depending on current machine culture"
                },
                "fullDescription": {
                  "text": "Decimal numbers parsed depending on current machine culture",
                  "markdown": "Decimal numbers parsed depending on current machine culture"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.InvalidType",
                "shortDescription": {
                  "text": "Object/markup extension of invalid type"
                },
                "fullDescription": {
                  "text": "Object/markup extension of invalid type",
                  "markdown": "Object/markup extension of invalid type"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticBitwiseOpParentheses",
                "shortDescription": {
                  "text": "bitwise-op-parentheses clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wbitwise-op-parentheses clang diagnostic. Learn more...",
                  "markdown": "-Wbitwise-op-parentheses clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wbitwise-op-parentheses)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeUseEmplace",
                "shortDescription": {
                  "text": "modernize-use-emplace clang-tidy check"
                },
                "fullDescription": {
                  "text": "modernize-use-emplace clang-tidy check. Learn more...",
                  "markdown": "modernize-use-emplace clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-emplace.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeRawStringLiteral",
                "shortDescription": {
                  "text": "modernize-raw-string-literal clang-tidy check"
                },
                "fullDescription": {
                  "text": "modernize-raw-string-literal clang-tidy check. Learn more...",
                  "markdown": "modernize-raw-string-literal clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/raw-string-literal.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticWasmExceptionSpec",
                "shortDescription": {
                  "text": "wasm-exception-spec clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wwasm-exception-spec clang diagnostic. Learn more...",
                  "markdown": "-Wwasm-exception-spec clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wwasm-exception-spec)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticExtraSemi",
                "shortDescription": {
                  "text": "extra-semi clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wextra-semi clang diagnostic. Learn more...",
                  "markdown": "-Wextra-semi clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wextra-semi)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UselessBinaryOperation",
                "shortDescription": {
                  "text": "Useless arithmetical operation"
                },
                "fullDescription": {
                  "text": "Useless arithmetical operation",
                  "markdown": "Useless arithmetical operation"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMismatchedParameterTypes",
                "shortDescription": {
                  "text": "mismatched-parameter-types clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmismatched-parameter-types clang diagnostic. Learn more...",
                  "markdown": "-Wmismatched-parameter-types clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmismatched-parameter-types)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WithExpressionModifiesAllMembers",
                "shortDescription": {
                  "text": "'with' expression modifies all accessible instance members"
                },
                "fullDescription": {
                  "text": "'with' expression modifies all accessible instance members. Unless it is an unintentional mistake, it should make more sense to create an entirely new instance.",
                  "markdown": "'with' expression modifies all accessible instance members. Unless it is an unintentional mistake, it should make more sense to create an entirely new instance."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBadMemberAccessSpaces",
                "shortDescription": {
                  "text": "Incorrect spacing (around member access symbols)"
                },
                "fullDescription": {
                  "text": "Around member access symbols",
                  "markdown": "Around member access symbols"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppMoveConstArg",
                "shortDescription": {
                  "text": "hicpp-move-const-arg clang-tidy check"
                },
                "fullDescription": {
                  "text": "hicpp-move-const-arg clang-tidy check. Learn more...",
                  "markdown": "hicpp-move-const-arg clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/move-const-arg.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticOverloadedVirtual",
                "shortDescription": {
                  "text": "overloaded-virtual clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Woverloaded-virtual clang diagnostic. Learn more...",
                  "markdown": "-Woverloaded-virtual clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#woverloaded-virtual)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBoostFormatLegacyCode",
                "shortDescription": {
                  "text": "Outdated format directive in boost::format"
                },
                "fullDescription": {
                  "text": "A format string of boost::format contains a legacy printf-like code; type specifier is not taken into account",
                  "markdown": "A format string of boost::format contains a legacy printf-like code; type specifier is not taken into account"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NullCoalescingConditionIsAlwaysNotNullAccordingToAPIContract",
                "shortDescription": {
                  "text": "'??' condition is never null according to nullable reference types' annotations"
                },
                "fullDescription": {
                  "text": "'??' condition is never null according to nullable reference types' annotations",
                  "markdown": "'??' condition is never null according to nullable reference types' annotations"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.OverloadsCollision",
                "shortDescription": {
                  "text": "Multiple overloads with same arguments count found"
                },
                "fullDescription": {
                  "text": "Multiple overloads with same arguments count found",
                  "markdown": "Multiple overloads with same arguments count found"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticStaticSelfInit",
                "shortDescription": {
                  "text": "static-self-init clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wstatic-self-init clang diagnostic. Learn more...",
                  "markdown": "-Wstatic-self-init clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wstatic-self-init)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityBracesAroundStatements",
                "shortDescription": {
                  "text": "readability-braces-around-statements clang-tidy check"
                },
                "fullDescription": {
                  "text": "readability-braces-around-statements clang-tidy check. Learn more...",
                  "markdown": "readability-braces-around-statements clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/braces-around-statements.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VariableHidesOuterVariable",
                "shortDescription": {
                  "text": "Variable in local function hides variable from outer scope"
                },
                "fullDescription": {
                  "text": "Variable in local function hides variable from outer scope",
                  "markdown": "Variable in local function hides variable from outer scope"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMemsetTransposedArgs",
                "shortDescription": {
                  "text": "memset-transposed-args clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmemset-transposed-args clang diagnostic. Learn more...",
                  "markdown": "-Wmemset-transposed-args clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmemset-transposed-args)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CommentTypo",
                "shortDescription": {
                  "text": "Typo in comment"
                },
                "fullDescription": {
                  "text": "Typo in comment Learn more...",
                  "markdown": "Typo in comment [Learn more...](https://www.jetbrains.com/help/rider/CommentTypo.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spelling Issues",
                      "index": 49,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSizeofArrayDiv",
                "shortDescription": {
                  "text": "sizeof-array-div clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wsizeof-array-div clang diagnostic. Learn more...",
                  "markdown": "-Wsizeof-array-div clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wsizeof-array-div)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUnreachableCode",
                "shortDescription": {
                  "text": "Unreachable code"
                },
                "fullDescription": {
                  "text": "Unreachable code",
                  "markdown": "Unreachable code"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppUndelegatedConstructor",
                "shortDescription": {
                  "text": "hicpp-undelegated-constructor clang-tidy check"
                },
                "fullDescription": {
                  "text": "hicpp-undelegated-constructor clang-tidy check. Learn more...",
                  "markdown": "hicpp-undelegated-constructor clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/undelegated-constructor.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Razor.SectionNotResolved",
                "shortDescription": {
                  "text": "Unknown Razor section"
                },
                "fullDescription": {
                  "text": "Unknown Razor section",
                  "markdown": "Unknown Razor section"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.StaticResourceNotResolved",
                "shortDescription": {
                  "text": "Static resource not resolved"
                },
                "fullDescription": {
                  "text": "Static resource not resolved",
                  "markdown": "Static resource not resolved"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Mvc.PartialViewNotResolved",
                "shortDescription": {
                  "text": "MVC (unknown partial view)"
                },
                "fullDescription": {
                  "text": "Unknown ASP.NET MVC Partial View",
                  "markdown": "Unknown ASP.NET MVC Partial View"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.UnexpectedElement",
                "shortDescription": {
                  "text": "Unexpected element error"
                },
                "fullDescription": {
                  "text": "Unexpected element error",
                  "markdown": "Unexpected element error"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringLiteralTypo",
                "shortDescription": {
                  "text": "Typo in string literal"
                },
                "fullDescription": {
                  "text": "Typo in string literal Learn more...",
                  "markdown": "Typo in string literal [Learn more...](https://www.jetbrains.com/help/rider/StringLiteralTypo.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spelling Issues",
                      "index": 49,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithOfType.Count.2",
                "shortDescription": {
                  "text": "Replace with OfType<T>().Count() (replace with OfType(Of ..)().Count(..))"
                },
                "fullDescription": {
                  "text": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).Count(Function ($y$) $y$ IsNot Nothing AndAlso $expr$)",
                  "markdown": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).Count(Function ($y$) $y$ IsNot Nothing AndAlso $expr$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuspiciousParameterNameInArgumentNullException",
                "shortDescription": {
                  "text": "Suspicious parameter name in ArgumentNullException"
                },
                "fullDescription": {
                  "text": "Argument name does not match the parameter that was checked",
                  "markdown": "Argument name does not match the parameter that was checked"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSelfAssignOverloaded",
                "shortDescription": {
                  "text": "self-assign-overloaded clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wself-assign-overloaded clang diagnostic. Learn more...",
                  "markdown": "-Wself-assign-overloaded clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wself-assign-overloaded)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithOfType.Count.1",
                "shortDescription": {
                  "text": "Replace with OfType<T>().Count() (replace with OfType(Of ..)().Count())"
                },
                "fullDescription": {
                  "text": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).Count(Function ($y$) $y$ IsNot Nothing)",
                  "markdown": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).Count(Function ($y$) $y$ IsNot Nothing)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCoreStackAddrEscapeBase",
                "shortDescription": {
                  "text": "core.StackAddrEscapeBase clang static analyzer check"
                },
                "fullDescription": {
                  "text": "core.StackAddrEscapeBase clang static analyzer check. Learn more...",
                  "markdown": "core.StackAddrEscapeBase clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceSequenceEqualWithConstantPattern",
                "shortDescription": {
                  "text": "Replace 'SequenceEqual' with constant pattern"
                },
                "fullDescription": {
                  "text": "Replace 'SequenceEqual' invocation with constant pattern check",
                  "markdown": "Replace 'SequenceEqual' invocation with constant pattern check"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUserDefinedLiteralSuffixDoesNotStartWithUnderscore",
                "shortDescription": {
                  "text": "User-defined literal suffixes must start with an underscore"
                },
                "fullDescription": {
                  "text": "User-defined literal suffixes must start with an underscore. The suffixes that do not begin with an underscore are reserved for the literal operators provided by the standard library.",
                  "markdown": "User-defined literal suffixes must start with an underscore. The suffixes that do not begin with an underscore are reserved for the literal operators provided by the standard library."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeReplaceAutoPtr",
                "shortDescription": {
                  "text": "modernize-replace-auto-ptr clang-tidy check"
                },
                "fullDescription": {
                  "text": "modernize-replace-auto-ptr clang-tidy check. Learn more...",
                  "markdown": "modernize-replace-auto-ptr clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/replace-auto-ptr.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAndroidCloexecFopen",
                "shortDescription": {
                  "text": "android-cloexec-fopen clang-tidy check"
                },
                "fullDescription": {
                  "text": "android-cloexec-fopen clang-tidy check. Learn more...",
                  "markdown": "android-cloexec-fopen clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/android/cloexec-fopen.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBCheckForReferenceEqualityInstead.2",
                "shortDescription": {
                  "text": "Check for reference equality instead"
                },
                "fullDescription": {
                  "text": "Equals($type$,$type2$)",
                  "markdown": "Equals($type$,$type2$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBCheckForReferenceEqualityInstead.1",
                "shortDescription": {
                  "text": "Check for reference equality instead"
                },
                "fullDescription": {
                  "text": "$type$.Equals($type2$)",
                  "markdown": "$type$.Equals($type2$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppFinalFunctionInFinalClass",
                "shortDescription": {
                  "text": "Final function in a final class"
                },
                "fullDescription": {
                  "text": "Redundant 'final' specifier on a function in a final class",
                  "markdown": "Redundant 'final' specifier on a function in a final class"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIncompleteSetjmpDeclaration",
                "shortDescription": {
                  "text": "incomplete-setjmp-declaration clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wincomplete-setjmp-declaration clang diagnostic. Learn more...",
                  "markdown": "-Wincomplete-setjmp-declaration clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wincomplete-setjmp-declaration)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSignConversion",
                "shortDescription": {
                  "text": "sign-conversion clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wsign-conversion clang diagnostic. Learn more...",
                  "markdown": "-Wsign-conversion clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wsign-conversion)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticImplicitRetainSelf",
                "shortDescription": {
                  "text": "implicit-retain-self clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wimplicit-retain-self clang diagnostic. Learn more...",
                  "markdown": "-Wimplicit-retain-self clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-retain-self)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ParameterHidesMember",
                "shortDescription": {
                  "text": "Parameter hides member"
                },
                "fullDescription": {
                  "text": "Method parameter has the same name as a field/property and hides it Learn more...",
                  "markdown": "Method parameter has the same name as a field/property and hides it [Learn more...](https://www.jetbrains.com/help/rider/ParameterHidesMember.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesVirtualClassDestructor",
                "shortDescription": {
                  "text": "cppcoreguidelines-virtual-class-destructor clang-tidy check"
                },
                "fullDescription": {
                  "text": "cppcoreguidelines-virtual-class-destructor clang-tidy check. Learn more...",
                  "markdown": "cppcoreguidelines-virtual-class-destructor clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/virtual-class-destructor.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnreachableCodeFallthrough",
                "shortDescription": {
                  "text": "unreachable-code-fallthrough clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunreachable-code-fallthrough clang diagnostic. Learn more...",
                  "markdown": "-Wunreachable-code-fallthrough clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunreachable-code-fallthrough)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticImplicitFixedPointConversion",
                "shortDescription": {
                  "text": "implicit-fixed-point-conversion clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wimplicit-fixed-point-conversion clang diagnostic. Learn more...",
                  "markdown": "-Wimplicit-fixed-point-conversion clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-fixed-point-conversion)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNullabilityInferredOnNestedType",
                "shortDescription": {
                  "text": "nullability-inferred-on-nested-type clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wnullability-inferred-on-nested-type clang diagnostic. Learn more...",
                  "markdown": "-Wnullability-inferred-on-nested-type clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wnullability-inferred-on-nested-type)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnassignedReadonlyField",
                "shortDescription": {
                  "text": "Unassigned readonly field"
                },
                "fullDescription": {
                  "text": "Readonly field is never assigned",
                  "markdown": "Readonly field is never assigned"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArgumentsStyleAnonymousFunction",
                "shortDescription": {
                  "text": "Use preferred argument style for anonymous functions"
                },
                "fullDescription": {
                  "text": "Prefer using named/positional argument when anonymous function (lambda or delegate) is passed Learn more...",
                  "markdown": "Prefer using named/positional argument when anonymous function (lambda or delegate) is passed [Learn more...](https://www.jetbrains.com/help/rider/ArgumentsStyleAnonymousFunction.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneSuspiciousInclude",
                "shortDescription": {
                  "text": "bugprone-suspicious-include clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-suspicious-include clang-tidy check. Learn more...",
                  "markdown": "bugprone-suspicious-include clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/suspicious-include.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantIfElseBlock",
                "shortDescription": {
                  "text": "Redundant 'else' keyword"
                },
                "fullDescription": {
                  "text": "Redundant 'else' keyword Learn more...",
                  "markdown": "Redundant 'else' keyword [Learn more...](https://www.jetbrains.com/help/rider/RedundantIfElseBlock.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ScriptTagWithContentBeforeIncludes",
                "shortDescription": {
                  "text": "Script tag errors (<script> with content before included <script>)"
                },
                "fullDescription": {
                  "text": "<([)script(]) $a1$>$c1$$c2$",
                  "markdown": "\\<(\\[)script(\\]) $a1$\\>$c1$$c2$"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyMiscMisleadingIdentifier",
                "shortDescription": {
                  "text": "misc-misleading-identifier clang-tidy check"
                },
                "fullDescription": {
                  "text": "misc-misleading-identifier clang-tidy check. Learn more...",
                  "markdown": "misc-misleading-identifier clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/misleading-identifier.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuZeroVariadicMacroArguments",
                "shortDescription": {
                  "text": "gnu-zero-variadic-macro-arguments clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wgnu-zero-variadic-macro-arguments clang diagnostic. Learn more...",
                  "markdown": "-Wgnu-zero-variadic-macro-arguments clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-zero-variadic-macro-arguments)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityRedundantDeclaration",
                "shortDescription": {
                  "text": "readability-redundant-declaration clang-tidy check"
                },
                "fullDescription": {
                  "text": "readability-redundant-declaration clang-tidy check. Learn more...",
                  "markdown": "readability-redundant-declaration clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/redundant-declaration.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppPrintfBadFormat",
                "shortDescription": {
                  "text": "Invalid printf format specifier"
                },
                "fullDescription": {
                  "text": "Format string contains an invalid printf format specifier",
                  "markdown": "Format string contains an invalid printf format specifier"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.RedundantNameAttribute",
                "shortDescription": {
                  "text": "Redundant name attribute"
                },
                "fullDescription": {
                  "text": "Name attribute in resource declaration is negligible and can be safely removed",
                  "markdown": "Name attribute in resource declaration is negligible and can be safely removed"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUnnamedNamespaceInHeaderFile",
                "shortDescription": {
                  "text": "Unnamed namespace in a header file"
                },
                "fullDescription": {
                  "text": "Unnamed namespaces should not be used in header files",
                  "markdown": "Unnamed namespaces should not be used in header files"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0108,CS0114",
                "shortDescription": {
                  "text": "Keyword 'new' is required"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://www.jetbrains.com/help/rider/CSharpWarnings_CS0108_CS0114.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneRedundantBranchCondition",
                "shortDescription": {
                  "text": "bugprone-redundant-branch-condition clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-redundant-branch-condition clang-tidy check. Learn more...",
                  "markdown": "bugprone-redundant-branch-condition clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/redundant-branch-condition.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppMsExtNotInitializedStaticConstLocalVar",
                "shortDescription": {
                  "text": "Not initialized static const local variable of scalar type. This is non-standard Microsoft C++ extension."
                },
                "fullDescription": {
                  "text": "Not initialized static const local variable of scalar type. This is non-standard Microsoft C++ extension.",
                  "markdown": "Not initialized static const local variable of scalar type. This is non-standard Microsoft C++ extension."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadEmptyBracesLineBreaks",
                "shortDescription": {
                  "text": "Incorrect line breaks (around empty braces)"
                },
                "fullDescription": {
                  "text": "Around empty braces Learn more...",
                  "markdown": "Around empty braces [Learn more...](https://www.jetbrains.com/help/rider/BadEmptyBracesLineBreaks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.NoNullPropagation",
                "shortDescription": {
                  "text": "Possible unintended bypass of lifetime check of underlying Unity engine object ('?.' on a type deriving from 'UnityEngine.Object' bypasses the lifetime check on the underlying Unity engine object)"
                },
                "fullDescription": {
                  "text": "The null propagating operator does not call the custom equality operators defined on 'UnityEngine.Object', which will check to see if the underlying Unity engine object has been destroyed. Prefer an explicit null comparison or implicit bool comparison if the lifetime check is intended, or explicitly use 'object.ReferenceEquals()' for a standard (and quicker) CLR null check. Learn more...",
                  "markdown": "The null propagating operator does not call the custom equality operators defined on 'UnityEngine.Object', which will check to see if the underlying Unity engine object has been destroyed. Prefer an explicit null comparison or implicit bool comparison if the lifetime check is intended, or explicitly use 'object.ReferenceEquals()' for a standard (and quicker) CLR null check. [Learn more...](https://github.com/JetBrains/resharper-unity/wiki/Possible-unintended-bypass-of-lifetime-check-of-underlying-Unity-engine-object)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PublicConstructorInAbstractClass",
                "shortDescription": {
                  "text": "Make constructor in abstract class protected"
                },
                "fullDescription": {
                  "text": "Make constructor in abstract class protected Learn more...",
                  "markdown": "Make constructor in abstract class protected [Learn more...](https://www.jetbrains.com/help/rider/PublicConstructorInAbstractClass.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantRangeBound",
                "shortDescription": {
                  "text": "Redundant range bound"
                },
                "fullDescription": {
                  "text": "Zero index can be omitted in range expression",
                  "markdown": "Zero index can be omitted in range expression"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAbseilDurationUnnecessaryConversion",
                "shortDescription": {
                  "text": "abseil-duration-unnecessary-conversion clang-tidy check"
                },
                "fullDescription": {
                  "text": "abseil-duration-unnecessary-conversion clang-tidy check. Learn more...",
                  "markdown": "abseil-duration-unnecessary-conversion clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/duration-unnecessary-conversion.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticReservedIdMacro",
                "shortDescription": {
                  "text": "reserved-id-macro clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wreserved-id-macro clang diagnostic. Learn more...",
                  "markdown": "-Wreserved-id-macro clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wreserved-id-macro)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCoreCallAndMessageModeling",
                "shortDescription": {
                  "text": "core.CallAndMessageModeling clang static analyzer check"
                },
                "fullDescription": {
                  "text": "core.CallAndMessageModeling clang static analyzer check. Learn more...",
                  "markdown": "core.CallAndMessageModeling clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp17CompatPedantic",
                "shortDescription": {
                  "text": "c++17-compat-pedantic clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wc++17-compat-pedantic clang diagnostic. Learn more...",
                  "markdown": "-Wc++17-compat-pedantic clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wc-17-compat-pedantic)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.RedundantGridDefinitions",
                "shortDescription": {
                  "text": "Single grid row/column definition is redundant"
                },
                "fullDescription": {
                  "text": "Single grid row/column definition is redundant",
                  "markdown": "Single grid row/column definition is redundant"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IndexingByInvalidRange",
                "shortDescription": {
                  "text": "Possible 'System.ArgumentOutOfRangeException'. Start index must be less than or equal to end index."
                },
                "fullDescription": {
                  "text": "Indexing by invalid range may cause exceptions",
                  "markdown": "Indexing by invalid range may cause exceptions"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticTautologicalConstantCompare",
                "shortDescription": {
                  "text": "tautological-constant-compare clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wtautological-constant-compare clang diagnostic. Learn more...",
                  "markdown": "-Wtautological-constant-compare clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wtautological-constant-compare)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAddressOfTemporary",
                "shortDescription": {
                  "text": "address-of-temporary clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Waddress-of-temporary clang diagnostic. Learn more...",
                  "markdown": "-Waddress-of-temporary clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#waddress-of-temporary)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDuplicateMethodMatch",
                "shortDescription": {
                  "text": "duplicate-method-match clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wduplicate-method-match clang diagnostic. Learn more...",
                  "markdown": "-Wduplicate-method-match clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wduplicate-method-match)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseNegatedPatternMatching",
                "shortDescription": {
                  "text": "Convert 'as' expression type check and the following null check into negated pattern matching"
                },
                "fullDescription": {
                  "text": "Replace variable for 'as' expression type check and the following check for it being null with negated C# 7.0 pattern matching expression",
                  "markdown": "Replace variable for 'as' expression type check and the following check for it being null with negated C# 7.0 pattern matching expression"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantToStringCallForValueType",
                "shortDescription": {
                  "text": "Redundant 'object.ToString()' call for value types"
                },
                "fullDescription": {
                  "text": "Use of ToString() call in a context where it would be generated by the compiler automatically. For example, in a concatenation with a string or as an argument of a string.Format() call.",
                  "markdown": "Use of ToString() call in a context where it would be generated by the compiler automatically. For example, in a concatenation with a string or as an argument of a string.Format() call."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFrameworkIncludePrivateFromPublic",
                "shortDescription": {
                  "text": "framework-include-private-from-public clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wframework-include-private-from-public clang diagnostic. Learn more...",
                  "markdown": "-Wframework-include-private-from-public clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wframework-include-private-from-public)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringCompareIsCultureSpecific.6",
                "shortDescription": {
                  "text": "String.Compare is culture-specific (string.Compare(string, int, string, int, bool) is culture-specific)"
                },
                "fullDescription": {
                  "text": "$s$.Compare($s1$, $i1$, $s2$, $i2$, true) Learn more...",
                  "markdown": "$s$.Compare($s1$, $i1$, $s2$, $i2$, true) [Learn more...](https://www.jetbrains.com/help/rider/StringCompareIsCultureSpecific.6.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringCompareIsCultureSpecific.4",
                "shortDescription": {
                  "text": "String.Compare is culture-specific (string.Compare(string, int, string, int) is culture-specific)"
                },
                "fullDescription": {
                  "text": "$s$.Compare($s1$, $i1$, $s2$, $i2$) Learn more...",
                  "markdown": "$s$.Compare($s1$, $i1$, $s2$, $i2$) [Learn more...](https://www.jetbrains.com/help/rider/StringCompareIsCultureSpecific.4.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringCompareIsCultureSpecific.5",
                "shortDescription": {
                  "text": "String.Compare is culture-specific (string.Compare(string, int, string, int, bool) is culture-specific)"
                },
                "fullDescription": {
                  "text": "$s$.Compare($s1$, $i1$, $s2$, $i2$, false) Learn more...",
                  "markdown": "$s$.Compare($s1$, $i1$, $s2$, $i2$, false) [Learn more...](https://www.jetbrains.com/help/rider/StringCompareIsCultureSpecific.5.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringCompareIsCultureSpecific.2",
                "shortDescription": {
                  "text": "String.Compare is culture-specific (string.Compare(string, string, bool) is culture-specific)"
                },
                "fullDescription": {
                  "text": "$string$.Compare($s1$, $s2$, false) Learn more...",
                  "markdown": "$string$.Compare($s1$, $s2$, false) [Learn more...](https://www.jetbrains.com/help/rider/StringCompareIsCultureSpecific.2.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringCompareIsCultureSpecific.3",
                "shortDescription": {
                  "text": "String.Compare is culture-specific (string.Compare(string, string, bool) is culture-specific)"
                },
                "fullDescription": {
                  "text": "$string$.Compare($s1$, $s2$, true) Learn more...",
                  "markdown": "$string$.Compare($s1$, $s2$, true) [Learn more...](https://www.jetbrains.com/help/rider/StringCompareIsCultureSpecific.3.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneInfiniteLoop",
                "shortDescription": {
                  "text": "bugprone-infinite-loop clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-infinite-loop clang-tidy check. Learn more...",
                  "markdown": "bugprone-infinite-loop clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/infinite-loop.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringCompareIsCultureSpecific.1",
                "shortDescription": {
                  "text": "String.Compare is culture-specific (string.Compare(string, string) is culture-specific)"
                },
                "fullDescription": {
                  "text": "$s$.Compare($s1$, $s2$) Learn more...",
                  "markdown": "$s$.Compare($s1$, $s2$) [Learn more...](https://www.jetbrains.com/help/rider/StringCompareIsCultureSpecific.1.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.XamlDuplicateDeviceFamilyTypeViewHighlighting",
                "shortDescription": {
                  "text": "Duplicate device family view"
                },
                "fullDescription": {
                  "text": "Duplicate device family view",
                  "markdown": "Duplicate device family view"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSuggestDestructorOverride",
                "shortDescription": {
                  "text": "suggest-destructor-override clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wsuggest-destructor-override clang diagnostic. Learn more...",
                  "markdown": "-Wsuggest-destructor-override clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wsuggest-destructor-override)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.InefficientMultiplicationOrder",
                "shortDescription": {
                  "text": "Order of multiplication operations is inefficient"
                },
                "fullDescription": {
                  "text": "Reordering multiplication operations will improve performance Learn more...",
                  "markdown": "Reordering multiplication operations will improve performance [Learn more...](https://github.com/JetBrains/resharper-unity/wiki/Order-of-multiplication-operations-is-inefficient)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity Performance Inspections",
                      "index": 67,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.NoValuesProvided",
                "shortDescription": {
                  "text": "NUnit. No values provided in the attributes."
                },
                "fullDescription": {
                  "text": "NUnit. No values are provided in the attribute or the current NUnit version does not support automatic generation of values for the parameter type. Learn more...",
                  "markdown": "NUnit. No values are provided in the attribute or the current NUnit version does not support automatic generation of values for the parameter type. [Learn more...](https://www.jetbrains.com/help/rider/NUnit.NoValuesProvided.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppVirtualFunctionInFinalClass",
                "shortDescription": {
                  "text": "Declaration of a non-overriding virtual function in a final or sealed class"
                },
                "fullDescription": {
                  "text": "A non-overriding virtual function in a final or sealed class cannot be overridden, so the 'virtual' specifier is redundant",
                  "markdown": "A non-overriding virtual function in a final or sealed class cannot be overridden, so the 'virtual' specifier is redundant"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuggestVarOrType_BuiltInTypes",
                "shortDescription": {
                  "text": "Use preferred 'var' style (for built-in types)"
                },
                "fullDescription": {
                  "text": "Convert if declaration is of a built-in type (e.g. string) Learn more...",
                  "markdown": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppNoAssembler",
                "shortDescription": {
                  "text": "hicpp-no-assembler clang-tidy check"
                },
                "fullDescription": {
                  "text": "hicpp-no-assembler clang-tidy check. Learn more...",
                  "markdown": "hicpp-no-assembler clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/no-assembler.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IgnoredDirective",
                "shortDescription": {
                  "text": "The directive will be ignored and can be safely removed"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "T4",
                      "index": 62,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MultipleNullableAttributesUsage",
                "shortDescription": {
                  "text": "Multiple nullable attributes usage"
                },
                "fullDescription": {
                  "text": "It is incorrect to use [NotNull] and [CanBeNull] simultaneously Learn more...",
                  "markdown": "It is incorrect to use \\[NotNull\\] and \\[CanBeNull\\] simultaneously [Learn more...](https://www.jetbrains.com/help/rider/MultipleNullableAttributesUsage.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppParameterMayBeConstPtrOrRef",
                "shortDescription": {
                  "text": "Parameter can be made pointer/reference to const"
                },
                "fullDescription": {
                  "text": "Parameter can be made pointer/reference to const",
                  "markdown": "Parameter can be made pointer/reference to const"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyPerformanceInefficientStringConcatenation",
                "shortDescription": {
                  "text": "performance-inefficient-string-concatenation clang-tidy check"
                },
                "fullDescription": {
                  "text": "performance-inefficient-string-concatenation clang-tidy check. Learn more...",
                  "markdown": "performance-inefficient-string-concatenation clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/inefficient-string-concatenation.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCastQualUnrelated",
                "shortDescription": {
                  "text": "cast-qual-unrelated clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wcast-qual-unrelated clang diagnostic. Learn more...",
                  "markdown": "-Wcast-qual-unrelated clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wcast-qual-unrelated)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticReceiverForwardClass",
                "shortDescription": {
                  "text": "receiver-forward-class clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wreceiver-forward-class clang diagnostic. Learn more...",
                  "markdown": "-Wreceiver-forward-class clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wreceiver-forward-class)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPointerSign",
                "shortDescription": {
                  "text": "pointer-sign clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wpointer-sign clang diagnostic. Learn more...",
                  "markdown": "-Wpointer-sign clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wpointer-sign)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnusedMacros",
                "shortDescription": {
                  "text": "unused-macros clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunused-macros clang diagnostic. Learn more...",
                  "markdown": "-Wunused-macros clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-macros)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertClosureToMethodGroup",
                "shortDescription": {
                  "text": "Convert lambda expression into method group"
                },
                "fullDescription": {
                  "text": "Convert lambda expression or anonymous method into method group Learn more...",
                  "markdown": "Convert lambda expression or anonymous method into method group [Learn more...](https://www.jetbrains.com/help/rider/ConvertClosureToMethodGroup.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticBitIntExtension",
                "shortDescription": {
                  "text": "bit-int-extension clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wbit-int-extension clang diagnostic. Learn more...",
                  "markdown": "-Wbit-int-extension clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wbit-int-extension)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticBitfieldEnumConversion",
                "shortDescription": {
                  "text": "bitfield-enum-conversion clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wbitfield-enum-conversion clang diagnostic. Learn more...",
                  "markdown": "-Wbitfield-enum-conversion clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wbitfield-enum-conversion)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyMiscStaticAssert",
                "shortDescription": {
                  "text": "misc-static-assert clang-tidy check"
                },
                "fullDescription": {
                  "text": "misc-static-assert clang-tidy check. Learn more...",
                  "markdown": "misc-static-assert clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/static-assert.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBadBracesSpaces",
                "shortDescription": {
                  "text": "Incorrect spacing (around braces)"
                },
                "fullDescription": {
                  "text": "Around braces",
                  "markdown": "Around braces"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithSingleCallToSingle",
                "shortDescription": {
                  "text": "Replace with single call to Single(..)"
                },
                "fullDescription": {
                  "text": "$seq$.Where(Function ($x$) $expr$).Single()",
                  "markdown": "$seq$.Where(Function ($x$) $expr$).Single()"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticImplicitFunctionDeclaration",
                "shortDescription": {
                  "text": "implicit-function-declaration clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wimplicit-function-declaration clang diagnostic. Learn more...",
                  "markdown": "-Wimplicit-function-declaration clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-function-declaration)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCudaCompat",
                "shortDescription": {
                  "text": "cuda-compat clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wcuda-compat clang diagnostic. Learn more...",
                  "markdown": "-Wcuda-compat clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wcuda-compat)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.DuplicateStyleSetter",
                "shortDescription": {
                  "text": "Duplicate style property/event setter"
                },
                "fullDescription": {
                  "text": "Duplicate style property/event setter",
                  "markdown": "Duplicate style property/event setter"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadExpressionBracesIndent",
                "shortDescription": {
                  "text": "Incorrect indent (around expression braces)"
                },
                "fullDescription": {
                  "text": "Around expression braces Learn more...",
                  "markdown": "Around expression braces [Learn more...](https://www.jetbrains.com/help/rider/BadExpressionBracesIndent.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeUseOverride",
                "shortDescription": {
                  "text": "modernize-use-override clang-tidy check"
                },
                "fullDescription": {
                  "text": "modernize-use-override clang-tidy check. Learn more...",
                  "markdown": "modernize-use-override clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-override.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppEnforceNestedNamespacesStyle",
                "shortDescription": {
                  "text": "Use preferred declaration style (enforce nested namespaces style)"
                },
                "fullDescription": {
                  "text": "Enforce the syntax used to define nested namespaces",
                  "markdown": "Enforce the syntax used to define nested namespaces"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticEmptyBody",
                "shortDescription": {
                  "text": "empty-body clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wempty-body clang diagnostic. Learn more...",
                  "markdown": "-Wempty-body clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wempty-body)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPreC2xCompat",
                "shortDescription": {
                  "text": "pre-c2x-compat clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wpre-c2x-compat clang diagnostic. Learn more...",
                  "markdown": "-Wpre-c2x-compat clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wpre-c2x-compat)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadDeclarationBracesIndent",
                "shortDescription": {
                  "text": "Incorrect indent (around declaration braces)"
                },
                "fullDescription": {
                  "text": "Around declaration braces Learn more...",
                  "markdown": "Around declaration braces [Learn more...](https://www.jetbrains.com/help/rider/BadDeclarationBracesIndent.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInvalidNoreturn",
                "shortDescription": {
                  "text": "invalid-noreturn clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Winvalid-noreturn clang diagnostic. Learn more...",
                  "markdown": "-Winvalid-noreturn clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#winvalid-noreturn)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantCaseLabel",
                "shortDescription": {
                  "text": "Redundant 'case' label"
                },
                "fullDescription": {
                  "text": "'case' label statement is redundant Learn more...",
                  "markdown": "'case' label statement is redundant [Learn more...](https://www.jetbrains.com/help/rider/RedundantCaseLabel.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LocalVariableHidesMember",
                "shortDescription": {
                  "text": "Local variable hides member"
                },
                "fullDescription": {
                  "text": "Local variable has the same name as a field/property and hides it Learn more...",
                  "markdown": "Local variable has the same name as a field/property and hides it [Learn more...](https://www.jetbrains.com/help/rider/LocalVariableHidesMember.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PossibleNullReferenceException",
                "shortDescription": {
                  "text": "Possible 'System.NullReferenceException'"
                },
                "fullDescription": {
                  "text": "Dereferencing an expression that can have 'null' value. This warning is detected either when there is a comparison with 'null' earlier in the code or when this value is returned by a member marked with 'Value can be null' attribute. Learn more...",
                  "markdown": "Dereferencing an expression that can have 'null' value. This warning is detected either when there is a comparison with 'null' earlier in the code or when this value is returned by a member marked with 'Value can be null' attribute. [Learn more...](https://www.jetbrains.com/help/rider/PossibleNullReferenceException.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ZeroIndexFromEnd",
                "shortDescription": {
                  "text": "Index from end must be greater than zero; use '^1' to refer to the last element"
                },
                "fullDescription": {
                  "text": "Using '^0' in the index expression causes 'System.ArgumentOutOfRangeException'; use '^1' to refer to the last element",
                  "markdown": "Using '\\^0' in the index expression causes 'System.ArgumentOutOfRangeException'; use '\\^1' to refer to the last element"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClassNeverInstantiated.Global",
                "shortDescription": {
                  "text": "Class is never instantiated (non-private accessibility)"
                },
                "fullDescription": {
                  "text": "Non-static class is never instantiated Learn more...",
                  "markdown": "Non-static class is never instantiated [Learn more...](https://www.jetbrains.com/help/rider/ClassNeverInstantiated.Global.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ObsoleteElement",
                "shortDescription": {
                  "text": "Use of obsolete type or type member"
                },
                "fullDescription": {
                  "text": "Use of obsolete type or type member in XAML markup",
                  "markdown": "Use of obsolete type or type member in XAML markup"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUseFamiliarTemplateSyntaxForGenericLambdas",
                "shortDescription": {
                  "text": "Lambda can be rewritten to use explicit template parameters"
                },
                "fullDescription": {
                  "text": "Lambda can be rewritten to use explicit template parameters",
                  "markdown": "Lambda can be rewritten to use explicit template parameters"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Html.AttributesQuotes",
                "shortDescription": {
                  "text": "Wrong attribute quotes"
                },
                "fullDescription": {
                  "text": "Attribute quotes are missing or differ from settings",
                  "markdown": "Attribute quotes are missing or differ from settings"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantStringInterpolation",
                "shortDescription": {
                  "text": "Redundant string interpolation"
                },
                "fullDescription": {
                  "text": "String interpolation expression without arguments is redundant",
                  "markdown": "String interpolation expression without arguments is redundant"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppMissingSpace",
                "shortDescription": {
                  "text": "Incorrect spacing (space is missing elsewhere)"
                },
                "fullDescription": {
                  "text": "Space is missing elsewhere",
                  "markdown": "Space is missing elsewhere"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAbseilUpgradeDurationConversions",
                "shortDescription": {
                  "text": "abseil-upgrade-duration-conversions clang-tidy check"
                },
                "fullDescription": {
                  "text": "abseil-upgrade-duration-conversions clang-tidy check. Learn more...",
                  "markdown": "abseil-upgrade-duration-conversions clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/upgrade-duration-conversions.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SealedMemberInSealedClass",
                "shortDescription": {
                  "text": "Sealed member in sealed class"
                },
                "fullDescription": {
                  "text": "'sealed' modifier for member in a sealed class is redundant Learn more...",
                  "markdown": "'sealed' modifier for member in a sealed class is redundant [Learn more...](https://www.jetbrains.com/help/rider/SealedMemberInSealedClass.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerSecurityInsecureAPIBcmp",
                "shortDescription": {
                  "text": "security.insecureAPI.bcmp clang static analyzer check"
                },
                "fullDescription": {
                  "text": "security.insecureAPI.bcmp clang static analyzer check. Learn more...",
                  "markdown": "security.insecureAPI.bcmp clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertIfStatementToNullCoalescingExpression",
                "shortDescription": {
                  "text": "'if' statement can be rewritten as '??' expression"
                },
                "fullDescription": {
                  "text": "Convert the following code: \r\n  var x = expr1;\r\n  if (x = null) x = expr2;\r\n To: \r\n  var x = expr1 ?? expr2;\r\n Learn more...",
                  "markdown": "Convert the following code:\n\n```\n\r\n  var x = expr1;\r\n  if (x = null) x = expr2;\r\n```\n\nTo:\n\n```\n\r\n  var x = expr1 ?? expr2;\r\n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/ConvertIfStatementToNullCoalescingExpression.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCocoaRetainCountBase",
                "shortDescription": {
                  "text": "osx.cocoa.RetainCountBase clang static analyzer check"
                },
                "fullDescription": {
                  "text": "osx.cocoa.RetainCountBase clang static analyzer check. Learn more...",
                  "markdown": "osx.cocoa.RetainCountBase clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAndroidCloexecMemfdCreate",
                "shortDescription": {
                  "text": "android-cloexec-memfd-create clang-tidy check"
                },
                "fullDescription": {
                  "text": "android-cloexec-memfd-create clang-tidy check. Learn more...",
                  "markdown": "android-cloexec-memfd-create clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/android/cloexec-memfd-create.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneLambdaFunctionName",
                "shortDescription": {
                  "text": "bugprone-lambda-function-name clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-lambda-function-name clang-tidy check. Learn more...",
                  "markdown": "bugprone-lambda-function-name clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/lambda-function-name.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ScriptTagHasBothSrcAndContentAttributes",
                "shortDescription": {
                  "text": "Script tag errors (<script> with both src and content)"
                },
                "fullDescription": {
                  "text": "<([)script(]) src=\"...\" ...>$content$",
                  "markdown": "\\<(\\[)script(\\]) src=\"...\" ...\\>$content$"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnicodeZeroWidth",
                "shortDescription": {
                  "text": "unicode-zero-width clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunicode-zero-width clang diagnostic. Learn more...",
                  "markdown": "-Wunicode-zero-width clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunicode-zero-width)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppInitializedValueIsAlwaysRewritten",
                "shortDescription": {
                  "text": "Declarator is reassigned in all paths before being read"
                },
                "fullDescription": {
                  "text": "A declarator is reassigned in all paths before being read",
                  "markdown": "A declarator is reassigned in all paths before being read"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PartialMethodParameterNameMismatch",
                "shortDescription": {
                  "text": "Parameter name differs in partial method declaration"
                },
                "fullDescription": {
                  "text": "Parameter name differs in partial method declaration Learn more...",
                  "markdown": "Parameter name differs in partial method declaration [Learn more...](https://www.jetbrains.com/help/rider/PartialMethodParameterNameMismatch.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertFio38C",
                "shortDescription": {
                  "text": "cert-fio38-c clang-tidy check"
                },
                "fullDescription": {
                  "text": "cert-fio38-c clang-tidy check. Learn more...",
                  "markdown": "cert-fio38-c clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/fio38-c.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAnonymousPackParens",
                "shortDescription": {
                  "text": "anonymous-pack-parens clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wanonymous-pack-parens clang diagnostic. Learn more...",
                  "markdown": "-Wanonymous-pack-parens clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wanonymous-pack-parens)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnreachableCodeReturn",
                "shortDescription": {
                  "text": "unreachable-code-return clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunreachable-code-return clang diagnostic. Learn more...",
                  "markdown": "-Wunreachable-code-return clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunreachable-code-return)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCocoaLoops",
                "shortDescription": {
                  "text": "osx.cocoa.Loops clang static analyzer check"
                },
                "fullDescription": {
                  "text": "osx.cocoa.Loops clang static analyzer check. Learn more...",
                  "markdown": "osx.cocoa.Loops clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppSpecialFunctionWithoutNoexceptSpecification",
                "shortDescription": {
                  "text": "Special function without noexcept specification"
                },
                "fullDescription": {
                  "text": "Special function does not have any noexcept specification",
                  "markdown": "Special function does not have any noexcept specification"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyMiscUnusedUsingDecls",
                "shortDescription": {
                  "text": "misc-unused-using-decls clang-tidy check"
                },
                "fullDescription": {
                  "text": "misc-unused-using-decls clang-tidy check. Learn more...",
                  "markdown": "misc-unused-using-decls clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/unused-using-decls.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppStaticDataMemberInUnnamedStruct",
                "shortDescription": {
                  "text": "Static data member in an anonymous class is not allowed by the C++ standard"
                },
                "fullDescription": {
                  "text": "Static data members are not allowed in anonymous classes",
                  "markdown": "Static data members are not allowed in anonymous classes"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAutoDisableVptrSanitizer",
                "shortDescription": {
                  "text": "auto-disable-vptr-sanitizer clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wauto-disable-vptr-sanitizer clang diagnostic. Learn more...",
                  "markdown": "-Wauto-disable-vptr-sanitizer clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wauto-disable-vptr-sanitizer)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSignedUnsignedWchar",
                "shortDescription": {
                  "text": "signed-unsigned-wchar clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wsigned-unsigned-wchar clang diagnostic. Learn more...",
                  "markdown": "-Wsigned-unsigned-wchar clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wsigned-unsigned-wchar)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxNumberObjectConversion",
                "shortDescription": {
                  "text": "osx.NumberObjectConversion clang static analyzer check"
                },
                "fullDescription": {
                  "text": "osx.NumberObjectConversion clang static analyzer check. Learn more...",
                  "markdown": "osx.NumberObjectConversion clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugpronePosixReturn",
                "shortDescription": {
                  "text": "bugprone-posix-return clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-posix-return clang-tidy check. Learn more...",
                  "markdown": "bugprone-posix-return clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/posix-return.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OperatorWithoutMatchedCheckedOperator",
                "shortDescription": {
                  "text": "Operator without matching checked operator"
                },
                "fullDescription": {
                  "text": "The operator does not have a matching checked operator while there are checked versions for other operators in this type",
                  "markdown": "The operator does not have a matching checked operator while there are checked versions for other operators in this type"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SimplifyLinqExpressionUseAll",
                "shortDescription": {
                  "text": "Simplify LINQ expression (use 'All')"
                },
                "fullDescription": {
                  "text": "Simplify LINQ expression (use 'All' instead of 'Any')",
                  "markdown": "Simplify LINQ expression (use 'All' instead of 'Any')"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ValueParameterNotUsed",
                "shortDescription": {
                  "text": "'value' parameter is not used"
                },
                "fullDescription": {
                  "text": "The setter of a property or indexer does not use its 'value' parameter. This also applies to adders and removers of events. Learn more...",
                  "markdown": "The setter of a property or indexer does not use its 'value' parameter. This also applies to adders and removers of events. [Learn more...](https://www.jetbrains.com/help/rider/ValueParameterNotUsed.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppMutableSpecifierOnReferenceMember",
                "shortDescription": {
                  "text": "Reference class member with 'mutable' specifier"
                },
                "fullDescription": {
                  "text": "Reference class members cannot have 'mutable' specifier",
                  "markdown": "Reference class members cannot have 'mutable' specifier"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantEnumerableCastCall",
                "shortDescription": {
                  "text": "Redundant 'IEnumerable.Cast<T>' or 'IEnumerable.OfType<T>' call"
                },
                "fullDescription": {
                  "text": "Redundant 'IEnumerable.Cast' or 'IEnumerable.OfType' call",
                  "markdown": "Redundant 'IEnumerable.Cast' or 'IEnumerable.OfType' call"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOptinOsxCocoaLocalizabilityNonLocalizedStringChecker",
                "shortDescription": {
                  "text": "optin.osx.cocoa.localizability.NonLocalizedStringChecker clang static analyzer check"
                },
                "fullDescription": {
                  "text": "optin.osx.cocoa.localizability.NonLocalizedStringChecker clang static analyzer check. Learn more...",
                  "markdown": "optin.osx.cocoa.localizability.NonLocalizedStringChecker clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantMyBaseQualifier",
                "shortDescription": {
                  "text": "Redundant 'MyBase.' qualifier"
                },
                "fullDescription": {
                  "text": "'MyBase.' qualifier is redundant and can be safely removed without changing code semantics.",
                  "markdown": "'MyBase.' qualifier is redundant and can be safely removed without changing code semantics."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneForwardDeclarationNamespace",
                "shortDescription": {
                  "text": "bugprone-forward-declaration-namespace clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-forward-declaration-namespace clang-tidy check. Learn more...",
                  "markdown": "bugprone-forward-declaration-namespace clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/forward-declaration-namespace.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.PreferGuidReference",
                "shortDescription": {
                  "text": "Prefer GUID-based assembly references"
                },
                "fullDescription": {
                  "text": "References in a .asmdef file can be by name or by asset GUID. Using an asset GUID protects against renaming the assembly definition.",
                  "markdown": "References in a .asmdef file can be by name or by asset GUID. Using an asset GUID protects against renaming the assembly definition."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertDcl37C",
                "shortDescription": {
                  "text": "cert-dcl37-c clang-tidy check"
                },
                "fullDescription": {
                  "text": "cert-dcl37-c clang-tidy check. Learn more...",
                  "markdown": "cert-dcl37-c clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/dcl37-c.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUndefinedVarTemplate",
                "shortDescription": {
                  "text": "undefined-var-template clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wundefined-var-template clang diagnostic. Learn more...",
                  "markdown": "-Wundefined-var-template clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wundefined-var-template)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MissingTitleTag",
                "shortDescription": {
                  "text": "Important tags or attributes missing (missing <title>)"
                },
                "fullDescription": {
                  "text": "<([)head(]) $attr1$>$cont$",
                  "markdown": "\\<(\\[)head(\\]) $attr1$\\>$cont$"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithFirstOrDefault.1",
                "shortDescription": {
                  "text": "Replace with FirstOrDefault($args$)"
                },
                "fullDescription": {
                  "text": "$seq$.Any($args$) ? $seq$.First($args$) : null",
                  "markdown": "$seq$.Any($args$) ? $seq$.First($args$) : null"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BitwiseOperatorOnEnumWithoutFlags",
                "shortDescription": {
                  "text": "Bitwise operation on enum is not marked by [Flags] attribute"
                },
                "fullDescription": {
                  "text": "Bitwise operation on enum is not marked by [Flags] attribute",
                  "markdown": "Bitwise operation on enum is not marked by \\[Flags\\] attribute"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Asp.ContentPlaceholderNotResolved",
                "shortDescription": {
                  "text": "Unknown content placeholder"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RouteTemplates.OptionalParameterMustBeAtTheEndOfSegment",
                "shortDescription": {
                  "text": "Optional parameter must be at the end of the segment"
                },
                "fullDescription": {
                  "text": "Optional parameter must be at the end of the segment",
                  "markdown": "Optional parameter must be at the end of the segment"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedVariable",
                "shortDescription": {
                  "text": "Unused local variable"
                },
                "fullDescription": {
                  "text": "Local variable is never used Learn more...",
                  "markdown": "Local variable is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedVariable.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithFirstOrDefault.3",
                "shortDescription": {
                  "text": "Replace with FirstOrDefault($args$)"
                },
                "fullDescription": {
                  "text": "$seq$.Any($args$) ? $seq$.First($args$) : default($T$)",
                  "markdown": "$seq$.Any($args$) ? $seq$.First($args$) : default($T$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAbseilDurationAddition",
                "shortDescription": {
                  "text": "abseil-duration-addition clang-tidy check"
                },
                "fullDescription": {
                  "text": "abseil-duration-addition clang-tidy check. Learn more...",
                  "markdown": "abseil-duration-addition clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/duration-addition.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithFirstOrDefault.2",
                "shortDescription": {
                  "text": "Replace with FirstOrDefault($args$)"
                },
                "fullDescription": {
                  "text": "$expr$ && $seq$.Any($args$) ? $seq$.First($args$) : null",
                  "markdown": "$expr$ \\&\\& $seq$.Any($args$) ? $seq$.First($args$) : null"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantArgumentDefaultValue",
                "shortDescription": {
                  "text": "Redundant argument with default value"
                },
                "fullDescription": {
                  "text": "Corresponding parameter is optional and has the same value, so the argument could be omitted Learn more...",
                  "markdown": "Corresponding parameter is optional and has the same value, so the argument could be omitted [Learn more...](https://www.jetbrains.com/help/rider/RedundantArgumentDefaultValue.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithFirstOrDefault.4",
                "shortDescription": {
                  "text": "Replace with FirstOrDefault($args$)"
                },
                "fullDescription": {
                  "text": "$expr$ && $seq$.Any($args$) ? $seq$.First($args$) : default($T$)",
                  "markdown": "$expr$ \\&\\& $seq$.Any($args$) ? $seq$.First($args$) : default($T$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PatternAlwaysMatches",
                "shortDescription": {
                  "text": "The source expression always matches the provided pattern"
                },
                "fullDescription": {
                  "text": "The source expression of 'is' operator or 'switch' statement always matches the provided pattern",
                  "markdown": "The source expression of 'is' operator or 'switch' statement always matches the provided pattern"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadParensSpaces",
                "shortDescription": {
                  "text": "Incorrect spacing (around parenthesis)"
                },
                "fullDescription": {
                  "text": "Around parenthesis Learn more...",
                  "markdown": "Around parenthesis [Learn more...](https://www.jetbrains.com/help/rider/BadParensSpaces.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantTypeArgumentsOfMethod",
                "shortDescription": {
                  "text": "Redundant type arguments of method"
                },
                "fullDescription": {
                  "text": "Specification of method type arguments is redundant because they are inferred from argument types",
                  "markdown": "Specification of method type arguments is redundant because they are inferred from argument types"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppLambdaCaptureNeverUsed",
                "shortDescription": {
                  "text": "Lambda capture is never used"
                },
                "fullDescription": {
                  "text": "A lambda capture is never used",
                  "markdown": "A lambda capture is never used"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerUnixMallocSizeof",
                "shortDescription": {
                  "text": "unix.MallocSizeof clang static analyzer check"
                },
                "fullDescription": {
                  "text": "unix.MallocSizeof clang static analyzer check. Learn more...",
                  "markdown": "unix.MallocSizeof clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMethodSignatures",
                "shortDescription": {
                  "text": "method-signatures clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmethod-signatures clang diagnostic. Learn more...",
                  "markdown": "-Wmethod-signatures clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmethod-signatures)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuspiciousMathSignMethod",
                "shortDescription": {
                  "text": "Math.Sign() method always gives the same result"
                },
                "fullDescription": {
                  "text": "Math.Sign() method invocation can be replaced with a constant",
                  "markdown": "Math.Sign() method invocation can be replaced with a constant"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppMsExtAddressOfClassRValue",
                "shortDescription": {
                  "text": "Taking an address of class r-value is non-standard Microsoft C++ extension"
                },
                "fullDescription": {
                  "text": "Taking an address of class r-value is non-standard Microsoft C++ extension",
                  "markdown": "Taking an address of class r-value is non-standard Microsoft C++ extension"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFutureAttributeExtensions",
                "shortDescription": {
                  "text": "future-attribute-extensions clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wfuture-attribute-extensions clang diagnostic. Learn more...",
                  "markdown": "-Wfuture-attribute-extensions clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wfuture-attribute-extensions)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUENonExistentInputAxis",
                "shortDescription": {
                  "text": "Axis with this name does not exist"
                },
                "fullDescription": {
                  "text": "Axis with this name does not exist",
                  "markdown": "Axis with this name does not exist"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unreal Engine",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBadNamespaceBracesIndent",
                "shortDescription": {
                  "text": "Incorrect indent (around namespace braces)"
                },
                "fullDescription": {
                  "text": "Around namespace braces",
                  "markdown": "Around namespace braces"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EnforceWhileStatementBraces",
                "shortDescription": {
                  "text": "Use preferred braces style (enforce braces in 'while' statement)"
                },
                "fullDescription": {
                  "text": "Use braces to separate 'while' statement body Learn more...",
                  "markdown": "Use braces to separate 'while' statement body [Learn more...](https://www.jetbrains.com/help/rider/EnforceWhileStatementBraces.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticEmptyTranslationUnit",
                "shortDescription": {
                  "text": "empty-translation-unit clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wempty-translation-unit clang diagnostic. Learn more...",
                  "markdown": "-Wempty-translation-unit clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wempty-translation-unit)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticArrayBounds",
                "shortDescription": {
                  "text": "array-bounds clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Warray-bounds clang diagnostic. Learn more...",
                  "markdown": "-Warray-bounds clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#warray-bounds)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftVoidPseudoDtor",
                "shortDescription": {
                  "text": "microsoft-void-pseudo-dtor clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmicrosoft-void-pseudo-dtor clang diagnostic. Learn more...",
                  "markdown": "-Wmicrosoft-void-pseudo-dtor clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-void-pseudo-dtor)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MergeCastWithTypeCheck",
                "shortDescription": {
                  "text": "Type check and casts can be merged"
                },
                "fullDescription": {
                  "text": "Type check ('is' expression) and direct cast(s) after it can be merged Learn more...",
                  "markdown": "Type check ('is' expression) and direct cast(s) after it can be merged [Learn more...](https://www.jetbrains.com/help/rider/MergeCastWithTypeCheck.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IntVariableOverflow",
                "shortDescription": {
                  "text": "Possible overflow"
                },
                "fullDescription": {
                  "text": "Possible overflow",
                  "markdown": "Possible overflow"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuspiciousLockOverSynchronizationPrimitive",
                "shortDescription": {
                  "text": "Suspicious locking over synchronization primitive"
                },
                "fullDescription": {
                  "text": "Avoid using synchronization primitives as 'lock' objects",
                  "markdown": "Avoid using synchronization primitives as 'lock' objects"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyGoogleReadabilityNamespaceComments",
                "shortDescription": {
                  "text": "google-readability-namespace-comments clang-tidy check"
                },
                "fullDescription": {
                  "text": "google-readability-namespace-comments clang-tidy check. Learn more...",
                  "markdown": "google-readability-namespace-comments clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/readability-namespace-comments.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertStr34C",
                "shortDescription": {
                  "text": "cert-str34-c clang-tidy check"
                },
                "fullDescription": {
                  "text": "cert-str34-c clang-tidy check. Learn more...",
                  "markdown": "cert-str34-c clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/str34-c.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedTypeParameter",
                "shortDescription": {
                  "text": "Unused type parameter"
                },
                "fullDescription": {
                  "text": "Type parameter is never used",
                  "markdown": "Type parameter is never used"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDollarInIdentifierExtension",
                "shortDescription": {
                  "text": "dollar-in-identifier-extension clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdollar-in-identifier-extension clang diagnostic. Learn more...",
                  "markdown": "-Wdollar-in-identifier-extension clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdollar-in-identifier-extension)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCoreFoundationCFError",
                "shortDescription": {
                  "text": "osx.coreFoundation.CFError clang static analyzer check"
                },
                "fullDescription": {
                  "text": "osx.coreFoundation.CFError clang static analyzer check. Learn more...",
                  "markdown": "osx.coreFoundation.CFError clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithStringIsNullOrEmpty",
                "shortDescription": {
                  "text": "Use 'String.IsNullOrEmpty'"
                },
                "fullDescription": {
                  "text": "Replace direct comparison to null and empty string with 'String.IsNullOrEmpty' call Learn more...",
                  "markdown": "Replace direct comparison to null and empty string with 'String.IsNullOrEmpty' call [Learn more...](https://www.jetbrains.com/help/rider/ReplaceWithStringIsNullOrEmpty.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NegativeEqualityExpression",
                "shortDescription": {
                  "text": "Simplify negative equality expression"
                },
                "fullDescription": {
                  "text": "Suggest to replace !(expr1 != expr2) to expr1 == expr2 !(expr1 == expr2) to expr1 != expr2 Learn more...",
                  "markdown": "Suggest to replace !(expr1 != expr2) to expr1 == expr2 !(expr1 == expr2) to expr1 != expr2 [Learn more...](https://www.jetbrains.com/help/rider/NegativeEqualityExpression.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerSecurityInsecureAPIGetpw",
                "shortDescription": {
                  "text": "security.insecureAPI.getpw clang static analyzer check"
                },
                "fullDescription": {
                  "text": "security.insecureAPI.getpw clang static analyzer check. Learn more...",
                  "markdown": "security.insecureAPI.getpw clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUseStructuredBinding",
                "shortDescription": {
                  "text": "Structured binding can be used"
                },
                "fullDescription": {
                  "text": "Structured binding can be used",
                  "markdown": "Structured binding can be used"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WebConfig.WebConfigPathWarning",
                "shortDescription": {
                  "text": "Referenced path cannot be found in the website"
                },
                "fullDescription": {
                  "text": "Referenced path cannot be found in the website",
                  "markdown": "Referenced path cannot be found in the website"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuImaginaryConstant",
                "shortDescription": {
                  "text": "gnu-imaginary-constant clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wgnu-imaginary-constant clang diagnostic. Learn more...",
                  "markdown": "-Wgnu-imaginary-constant clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-imaginary-constant)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAndroidCloexecOpen",
                "shortDescription": {
                  "text": "android-cloexec-open clang-tidy check"
                },
                "fullDescription": {
                  "text": "android-cloexec-open clang-tidy check. Learn more...",
                  "markdown": "android-cloexec-open clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/android/cloexec-open.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityFunctionSize",
                "shortDescription": {
                  "text": "readability-function-size clang-tidy check"
                },
                "fullDescription": {
                  "text": "readability-function-size clang-tidy check. Learn more...",
                  "markdown": "readability-function-size clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/function-size.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8714",
                "shortDescription": {
                  "text": "Nullability of type argument doesn't match 'notnull' constraint."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnsupportedGpopt",
                "shortDescription": {
                  "text": "unsupported-gpopt clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunsupported-gpopt clang diagnostic. Learn more...",
                  "markdown": "-Wunsupported-gpopt clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunsupported-gpopt)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnusedPropertyIvar",
                "shortDescription": {
                  "text": "unused-property-ivar clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunused-property-ivar clang diagnostic. Learn more...",
                  "markdown": "-Wunused-property-ivar clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-property-ivar)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAbseilDurationDivision",
                "shortDescription": {
                  "text": "abseil-duration-division clang-tidy check"
                },
                "fullDescription": {
                  "text": "abseil-duration-division clang-tidy check. Learn more...",
                  "markdown": "abseil-duration-division clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/duration-division.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticShiftOverflow",
                "shortDescription": {
                  "text": "shift-overflow clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wshift-overflow clang diagnostic. Learn more...",
                  "markdown": "-Wshift-overflow clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wshift-overflow)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrangeLocalFunctionBody",
                "shortDescription": {
                  "text": "Use preferred body style (convert into local function with preferred body style)"
                },
                "fullDescription": {
                  "text": "Use expression or block body Learn more...",
                  "markdown": "Use expression or block body [Learn more...](https://www.jetbrains.com/help/rider/ArrangeLocalFunctionBody.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnusedResult",
                "shortDescription": {
                  "text": "unused-result clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunused-result clang diagnostic. Learn more...",
                  "markdown": "-Wunused-result clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-result)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.TestCaseSourceMustBeStatic",
                "shortDescription": {
                  "text": "NUnit. Test case source must be static."
                },
                "fullDescription": {
                  "text": "NUnit test case source field/property/method specified in [TestCaseSource] or [ValuesSource] attributes must be static. Learn more...",
                  "markdown": "NUnit test case source field/property/method specified in \\[TestCaseSource\\] or \\[ValuesSource\\] attributes must be static. [Learn more...](https://www.jetbrains.com/help/rider/NUnit.TestCaseSourceMustBeStatic.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDocumentation",
                "shortDescription": {
                  "text": "documentation clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdocumentation clang diagnostic. Learn more...",
                  "markdown": "-Wdocumentation clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdocumentation)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SimplifyLinqExpressionUseAny",
                "shortDescription": {
                  "text": "Simplify LINQ expression (use 'Any')"
                },
                "fullDescription": {
                  "text": "Simplify LINQ expression (use 'Any' instead of 'All')",
                  "markdown": "Simplify LINQ expression (use 'Any' instead of 'All')"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.InefficientMultidimensionalArrayUsage",
                "shortDescription": {
                  "text": "Use jagged or one-dimensional array instead of multidimensional array"
                },
                "fullDescription": {
                  "text": "Multidimensional array element access is converted to a method call. It is more efficient to use a jagged or one-dimensional array. Learn more...",
                  "markdown": "Multidimensional array element access is converted to a method call. It is more efficient to use a jagged or one-dimensional array. [Learn more...](https://github.com/JetBrains/resharper-unity/wiki/Accessing-multidimensional-arrays-is-inefficient)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity Performance Inspections",
                      "index": 67,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneUseAfterMove",
                "shortDescription": {
                  "text": "bugprone-use-after-move clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-use-after-move clang-tidy check. Learn more...",
                  "markdown": "bugprone-use-after-move clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/use-after-move.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertToAutoPropertyWithPrivateSetter",
                "shortDescription": {
                  "text": "Convert property into auto-property with private setter"
                },
                "fullDescription": {
                  "text": "Converts property declaration into C# auto-property syntax with private setter declared",
                  "markdown": "Converts property declaration into C# auto-property syntax with private setter declared"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertToStaticClass",
                "shortDescription": {
                  "text": "Convert into static class"
                },
                "fullDescription": {
                  "text": "Make class static",
                  "markdown": "Make class static"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithSingleCallToLast",
                "shortDescription": {
                  "text": "Replace with single call to Last(..)"
                },
                "fullDescription": {
                  "text": "$seq$.Where($x$ => $expr$).Last()",
                  "markdown": "$seq$.Where($x$ =\\> $expr$).Last()"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp14Compat",
                "shortDescription": {
                  "text": "c++14-compat clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wc++14-compat clang diagnostic. Learn more...",
                  "markdown": "-Wc++14-compat clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wc-14-compat)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.PerformanceCriticalCodeNullComparison",
                "shortDescription": {
                  "text": "Expensive null comparison"
                },
                "fullDescription": {
                  "text": "Equality operations on objects deriving from 'UnityEngine.Object' will also check that the underlying native object has not been destroyed. This requires a call into native code and can have a performance impact when used inside frequently called methods. Learn more...",
                  "markdown": "Equality operations on objects deriving from 'UnityEngine.Object' will also check that the underlying native object has not been destroyed. This requires a call into native code and can have a performance impact when used inside frequently called methods. [Learn more...](https://github.com/JetBrains/resharper-unity/wiki/Avoid-null-comparisons-against-UnityEngine.Object-subclasses)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity Performance Inspections",
                      "index": 67,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8777",
                "shortDescription": {
                  "text": "Parameter must have a non-null value when exiting."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8776",
                "shortDescription": {
                  "text": "Member cannot be used in this attribute."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8775",
                "shortDescription": {
                  "text": "Member must conditionally have a non-null value when exiting a function."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftFixedEnum",
                "shortDescription": {
                  "text": "microsoft-fixed-enum clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmicrosoft-fixed-enum clang diagnostic. Learn more...",
                  "markdown": "-Wmicrosoft-fixed-enum clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-fixed-enum)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8774",
                "shortDescription": {
                  "text": "Member must have a non-null value when exiting."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8770",
                "shortDescription": {
                  "text": "Method lacks '[DoesNotReturn]' annotation in order to match implemented or overridden member."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadCommaSpaces",
                "shortDescription": {
                  "text": "Incorrect spacing (around comma)"
                },
                "fullDescription": {
                  "text": "Around comma Learn more...",
                  "markdown": "Around comma [Learn more...](https://www.jetbrains.com/help/rider/BadCommaSpaces.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantAbstractModifier",
                "shortDescription": {
                  "text": "Redundant 'abstract' modifier"
                },
                "fullDescription": {
                  "text": "Redundant 'abstract' modifier in interface declaration Learn more...",
                  "markdown": "Redundant 'abstract' modifier in interface declaration [Learn more...](https://www.jetbrains.com/help/rider/RedundantAbstractModifier.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticBitfieldConstantConversion",
                "shortDescription": {
                  "text": "bitfield-constant-conversion clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wbitfield-constant-conversion clang diagnostic. Learn more...",
                  "markdown": "-Wbitfield-constant-conversion clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wbitfield-constant-conversion)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ForeachCanBePartlyConvertedToQueryUsingAnotherGetEnumerator",
                "shortDescription": {
                  "text": "Part of foreach loop can be converted into LINQ-expression but another 'GetEnumerator' method will be used"
                },
                "fullDescription": {
                  "text": "Part of 'foreach' ('For Each' for VB.NET) statement's body can be converted into a LINQ-expression but another 'GetEnumerator' method will be used",
                  "markdown": "Part of 'foreach' ('For Each' for VB.NET) statement's body can be converted into a LINQ-expression but another 'GetEnumerator' method will be used"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MultipleResolveCandidatesInText",
                "shortDescription": {
                  "text": "Ambiguous symbols in text argument"
                },
                "fullDescription": {
                  "text": "Ambiguous symbols in text argument",
                  "markdown": "Ambiguous symbols in text argument"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Asp.TagAttributeWithOptionalValue",
                "shortDescription": {
                  "text": "Attribute with optional value problem"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppDeclarationHidesUncapturedLocal",
                "shortDescription": {
                  "text": "Hiding an uncaptured local declaration"
                },
                "fullDescription": {
                  "text": "A local declaration inside a lambda hides an uncaptured local declaration",
                  "markdown": "A local declaration inside a lambda hides an uncaptured local declaration"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.XamlXamarinFormsDataTypeAndBindingContextTypeMismatchedHighlighting",
                "shortDescription": {
                  "text": "Types in x:DataType and BindingContext mismatch"
                },
                "fullDescription": {
                  "text": "Types in x:DataType and BindingContext are different",
                  "markdown": "Types in x:DataType and BindingContext are different"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticArgumentUndefinedBehaviour",
                "shortDescription": {
                  "text": "argument-undefined-behaviour clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wargument-undefined-behaviour clang diagnostic. Learn more...",
                  "markdown": "-Wargument-undefined-behaviour clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wargument-undefined-behaviour)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticTautologicalValueRangeCompare",
                "shortDescription": {
                  "text": "tautological-value-range-compare clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wtautological-value-range-compare clang diagnostic. Learn more...",
                  "markdown": "-Wtautological-value-range-compare clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wtautological-value-range-compare)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSarifFormatUnstable",
                "shortDescription": {
                  "text": "sarif-format-unstable clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wsarif-format-unstable clang diagnostic. Learn more...",
                  "markdown": "-Wsarif-format-unstable clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wsarif-format-unstable)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneCopyConstructorInit",
                "shortDescription": {
                  "text": "bugprone-copy-constructor-init clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-copy-constructor-init clang-tidy check. Learn more...",
                  "markdown": "bugprone-copy-constructor-init clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/copy-constructor-init.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Web.IgnoredPath",
                "shortDescription": {
                  "text": "Ignored path"
                },
                "fullDescription": {
                  "text": "Path is ignored in project settings",
                  "markdown": "Path is ignored in project settings"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAtomicImplicitSeqCst",
                "shortDescription": {
                  "text": "atomic-implicit-seq-cst clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Watomic-implicit-seq-cst clang diagnostic. Learn more...",
                  "markdown": "-Watomic-implicit-seq-cst clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#watomic-implicit-seq-cst)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeReturnBracedInitList",
                "shortDescription": {
                  "text": "modernize-return-braced-init-list clang-tidy check"
                },
                "fullDescription": {
                  "text": "modernize-return-braced-init-list clang-tidy check. Learn more...",
                  "markdown": "modernize-return-braced-init-list clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/return-braced-init-list.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArgumentsStyleStringLiteral",
                "shortDescription": {
                  "text": "Use preferred argument style for string literal values"
                },
                "fullDescription": {
                  "text": "Prefer using named/positional argument when 'string' literal value is passed Learn more...",
                  "markdown": "Prefer using named/positional argument when 'string' literal value is passed [Learn more...](https://www.jetbrains.com/help/rider/ArgumentsStyleStringLiteral.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp20Extensions",
                "shortDescription": {
                  "text": "c++20-extensions clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wc++20-extensions clang diagnostic. Learn more...",
                  "markdown": "-Wc++20-extensions clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wc-20-extensions)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesAvoidNonConstGlobalVariables",
                "shortDescription": {
                  "text": "cppcoreguidelines-avoid-non-const-global-variables clang-tidy check"
                },
                "fullDescription": {
                  "text": "cppcoreguidelines-avoid-non-const-global-variables clang-tidy check. Learn more...",
                  "markdown": "cppcoreguidelines-avoid-non-const-global-variables clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/avoid-non-const-global-variables.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCustomAtomicProperties",
                "shortDescription": {
                  "text": "custom-atomic-properties clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wcustom-atomic-properties clang diagnostic. Learn more...",
                  "markdown": "-Wcustom-atomic-properties clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wcustom-atomic-properties)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantMeQualifier",
                "shortDescription": {
                  "text": "Redundant 'Me.' qualifier"
                },
                "fullDescription": {
                  "text": "'Me.' qualifier is redundant and can be safely removed without changing code semantics.",
                  "markdown": "'Me.' qualifier is redundant and can be safely removed without changing code semantics."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneSuspiciousStringCompare",
                "shortDescription": {
                  "text": "bugprone-suspicious-string-compare clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-suspicious-string-compare clang-tidy check. Learn more...",
                  "markdown": "bugprone-suspicious-string-compare clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/suspicious-string-compare.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantCollectionInitializerElementBraces",
                "shortDescription": {
                  "text": "Redundant braces in collection initializer"
                },
                "fullDescription": {
                  "text": "When collection initializer element has only one expression, the braces are redundant",
                  "markdown": "When collection initializer element has only one expression, the braces are redundant"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeShrinkToFit",
                "shortDescription": {
                  "text": "modernize-shrink-to-fit clang-tidy check"
                },
                "fullDescription": {
                  "text": "modernize-shrink-to-fit clang-tidy check. Learn more...",
                  "markdown": "modernize-shrink-to-fit clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/shrink-to-fit.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedType.Global",
                "shortDescription": {
                  "text": "Type is never used (non-private accessibility)"
                },
                "fullDescription": {
                  "text": "Type is never used Learn more...",
                  "markdown": "Type is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedType.Global.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AssignmentIsFullyDiscarded",
                "shortDescription": {
                  "text": "Assignment results are fully discarded"
                },
                "fullDescription": {
                  "text": "The values of deconstructing assignment are all discarded and cannot be used in any execution path",
                  "markdown": "The values of deconstructing assignment are all discarded and cannot be used in any execution path"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAlignMismatch",
                "shortDescription": {
                  "text": "align-mismatch clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Walign-mismatch clang diagnostic. Learn more...",
                  "markdown": "-Walign-mismatch clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#walign-mismatch)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8769",
                "shortDescription": {
                  "text": "Nullability of type of parameter doesn't match implemented member (possibly because of nullability attributes)."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8768",
                "shortDescription": {
                  "text": "Nullability of return type doesn't match implemented member (possibly because of nullability attributes)."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneSuspiciousSemicolon",
                "shortDescription": {
                  "text": "bugprone-suspicious-semicolon clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-suspicious-semicolon clang-tidy check. Learn more...",
                  "markdown": "bugprone-suspicious-semicolon clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/suspicious-semicolon.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8767",
                "shortDescription": {
                  "text": "Nullability of type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes)."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8766",
                "shortDescription": {
                  "text": "Nullability of return type doesn't match implicitly implemented member (possibly because of nullability attributes)."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8765",
                "shortDescription": {
                  "text": "Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8764",
                "shortDescription": {
                  "text": "Nullability of return type doesn't match overridden member (possibly because of nullability attributes)."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8763",
                "shortDescription": {
                  "text": "A method marked [DoesNotReturn] should not return."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8762",
                "shortDescription": {
                  "text": "Parameter must conditionally have a non-null value when exiting a function."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPointerToIntCast",
                "shortDescription": {
                  "text": "pointer-to-int-cast clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wpointer-to-int-cast clang diagnostic. Learn more...",
                  "markdown": "-Wpointer-to-int-cast clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wpointer-to-int-cast)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AutoPropertyCanBeMadeGetOnly.Local",
                "shortDescription": {
                  "text": "Auto-property can be made get-only (private accessibility)"
                },
                "fullDescription": {
                  "text": "Auto-property has no write usages after initialization and can be made get-only Learn more...",
                  "markdown": "Auto-property has no write usages after initialization and can be made get-only [Learn more...](https://www.jetbrains.com/help/rider/AutoPropertyCanBeMadeGetOnly.Local.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMainReturnType",
                "shortDescription": {
                  "text": "main-return-type clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmain-return-type clang diagnostic. Learn more...",
                  "markdown": "-Wmain-return-type clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmain-return-type)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantLambdaParameterList",
                "shortDescription": {
                  "text": "Redundant parameter list in lambda declarator"
                },
                "fullDescription": {
                  "text": "Empty parameter list in lambda declarator can be deleted",
                  "markdown": "Empty parameter list in lambda declarator can be deleted"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFixedEnumExtension",
                "shortDescription": {
                  "text": "fixed-enum-extension clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wfixed-enum-extension clang diagnostic. Learn more...",
                  "markdown": "-Wfixed-enum-extension clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wfixed-enum-extension)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppEqualOperandsInBinaryExpression",
                "shortDescription": {
                  "text": "Binary operator acts on equal operands"
                },
                "fullDescription": {
                  "text": "Binary operator acts on equal operands",
                  "markdown": "Binary operator acts on equal operands"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppJoinDeclarationAndAssignment",
                "shortDescription": {
                  "text": "Declaration and assignment can be joined"
                },
                "fullDescription": {
                  "text": "Declaration of a variable and assignment to it can be joined",
                  "markdown": "Declaration of a variable and assignment to it can be joined"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCoreUndefinedBinaryOperatorResult",
                "shortDescription": {
                  "text": "core.UndefinedBinaryOperatorResult clang static analyzer check"
                },
                "fullDescription": {
                  "text": "core.UndefinedBinaryOperatorResult clang static analyzer check. Learn more...",
                  "markdown": "core.UndefinedBinaryOperatorResult clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppParameterNamesMismatch",
                "shortDescription": {
                  "text": "Parameter names do not match"
                },
                "fullDescription": {
                  "text": "Parameter names differ in different declarations of the same function",
                  "markdown": "Parameter names differ in different declarations of the same function"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCocoaNilArg",
                "shortDescription": {
                  "text": "osx.cocoa.NilArg clang static analyzer check"
                },
                "fullDescription": {
                  "text": "osx.cocoa.NilArg clang static analyzer check. Learn more...",
                  "markdown": "osx.cocoa.NilArg clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VirtualMemberNeverOverridden.Global",
                "shortDescription": {
                  "text": "Virtual (overridable) member is never overridden (non-private accessibility)"
                },
                "fullDescription": {
                  "text": "Virtual (overridable) member is never overridden and so the 'virtual' ('overridable') modifier can be removed Learn more...",
                  "markdown": "Virtual (overridable) member is never overridden and so the 'virtual' ('overridable') modifier can be removed [Learn more...](https://www.jetbrains.com/help/rider/VirtualMemberNeverOverridden.Global.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppConstParameterInDeclaration",
                "shortDescription": {
                  "text": "Const-qualified parameter in a function declaration"
                },
                "fullDescription": {
                  "text": "Const-qualification of parameters has an effect only in function definitions",
                  "markdown": "Const-qualification of parameters has an effect only in function definitions"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCplusplusSelfAssignment",
                "shortDescription": {
                  "text": "cplusplus.SelfAssignment clang static analyzer check"
                },
                "fullDescription": {
                  "text": "cplusplus.SelfAssignment clang static analyzer check. Learn more...",
                  "markdown": "cplusplus.SelfAssignment clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertTypeCheckPatternToNullCheck",
                "shortDescription": {
                  "text": "Use null check pattern instead of a type check succeeding on any not-null value"
                },
                "fullDescription": {
                  "text": "The source expression is always of pattern's type, matches on all non-null values",
                  "markdown": "The source expression is always of pattern's type, matches on all non-null values"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertToVbAutoPropertyWithPrivateSetter",
                "shortDescription": {
                  "text": "Convert property to auto-property with private setter"
                },
                "fullDescription": {
                  "text": "Converts property declaration to VB.NET auto-property syntax with private setter declared.",
                  "markdown": "Converts property declaration to VB.NET auto-property syntax with private setter declared."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNSObjectAttribute",
                "shortDescription": {
                  "text": "NSObject-attribute clang diagnostic"
                },
                "fullDescription": {
                  "text": "-WNSObject-attribute clang diagnostic. Learn more...",
                  "markdown": "-WNSObject-attribute clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wNSObject-attribute)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AsyncVoidMethod",
                "shortDescription": {
                  "text": "Avoid using 'async' methods with the 'void' return type"
                },
                "fullDescription": {
                  "text": "Prefer Task methods over methods returning 'void'",
                  "markdown": "Prefer Task methods over methods returning 'void'"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantBaseClassAccessSpecifier",
                "shortDescription": {
                  "text": "Redundant base class access specifier"
                },
                "fullDescription": {
                  "text": "Redundant base class access specifier",
                  "markdown": "Redundant base class access specifier"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyGoogleRuntimeOperator",
                "shortDescription": {
                  "text": "google-runtime-operator clang-tidy check"
                },
                "fullDescription": {
                  "text": "google-runtime-operator clang-tidy check. Learn more...",
                  "markdown": "google-runtime-operator clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/runtime-operator.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticBoolOperation",
                "shortDescription": {
                  "text": "bool-operation clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wbool-operation clang diagnostic. Learn more...",
                  "markdown": "-Wbool-operation clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wbool-operation)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIncludeNextOutsideHeader",
                "shortDescription": {
                  "text": "include-next-outside-header clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Winclude-next-outside-header clang diagnostic. Learn more...",
                  "markdown": "-Winclude-next-outside-header clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#winclude-next-outside-header)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedMember.Global",
                "shortDescription": {
                  "text": "Type member is never used (non-private accessibility)"
                },
                "fullDescription": {
                  "text": "Type member is never used Learn more...",
                  "markdown": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Global.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDuplicateEnum",
                "shortDescription": {
                  "text": "duplicate-enum clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wduplicate-enum clang diagnostic. Learn more...",
                  "markdown": "-Wduplicate-enum clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wduplicate-enum)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp11CompatDeprecatedWritableStrings",
                "shortDescription": {
                  "text": "c++11-compat-deprecated-writable-strings clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wc++11-compat-deprecated-writable-strings clang diagnostic. Learn more...",
                  "markdown": "-Wc++11-compat-deprecated-writable-strings clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wc-11-compat-deprecated-writable-strings)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppPolymorphicClassWithNonVirtualPublicDestructor",
                "shortDescription": {
                  "text": "Polymorphic class with non-virtual public destructor"
                },
                "fullDescription": {
                  "text": "A polymorphic class with a non-virtual public destructor",
                  "markdown": "A polymorphic class with a non-virtual public destructor"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8794",
                "shortDescription": {
                  "text": "Given expression always matches the provided pattern"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantLinebreak",
                "shortDescription": {
                  "text": "Incorrect line breaks (line break is redundant elsewhere)"
                },
                "fullDescription": {
                  "text": "Line break is redundant elsewhere Learn more...",
                  "markdown": "Line break is redundant elsewhere [Learn more...](https://www.jetbrains.com/help/rider/RedundantLinebreak.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSyncFetchAndNandSemanticsChanged",
                "shortDescription": {
                  "text": "sync-fetch-and-nand-semantics-changed clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wsync-fetch-and-nand-semantics-changed clang diagnostic. Learn more...",
                  "markdown": "-Wsync-fetch-and-nand-semantics-changed clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wsync-fetch-and-nand-semantics-changed)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxOSObjectRetainCount",
                "shortDescription": {
                  "text": "osx.OSObjectRetainCount clang static analyzer check"
                },
                "fullDescription": {
                  "text": "osx.OSObjectRetainCount clang static analyzer check. Learn more...",
                  "markdown": "osx.OSObjectRetainCount clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyRegion",
                "shortDescription": {
                  "text": "Empty region"
                },
                "fullDescription": {
                  "text": "Region doesn't contain any code and can be removed",
                  "markdown": "Region doesn't contain any code and can be removed"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertSwitchStatementToSwitchExpression",
                "shortDescription": {
                  "text": "Replace 'switch' statement with 'switch' expression"
                },
                "fullDescription": {
                  "text": "Replace 'switch' statement with 'switch' expression",
                  "markdown": "Replace 'switch' statement with 'switch' expression"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnusedFunction",
                "shortDescription": {
                  "text": "unused-function clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunused-function clang diagnostic. Learn more...",
                  "markdown": "-Wunused-function clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-function)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantQualifier",
                "shortDescription": {
                  "text": "Redundant qualifier"
                },
                "fullDescription": {
                  "text": "Qualifier is redundant and can be deleted",
                  "markdown": "Qualifier is redundant and can be deleted"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FSharpLambdaCanBeSimplified",
                "shortDescription": {
                  "text": "Lambda expression can be simplified"
                },
                "fullDescription": {
                  "text": "Lambda expression can be simplified.",
                  "markdown": "Lambda expression can be simplified."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AnnotateCanBeNullParameter",
                "shortDescription": {
                  "text": "Declaration nullability inferred (parameter is inferred to be nullable)"
                },
                "fullDescription": {
                  "text": "[EXPERIMENTAL] Parameter is inferred to be nullable: consider annotating it with [CanBeNull] or [ItemCanBeNull] attribute. This inspection sometimes produces unsound results.",
                  "markdown": "\\[EXPERIMENTAL\\] Parameter is inferred to be nullable: consider annotating it with \\[CanBeNull\\] or \\[ItemCanBeNull\\] attribute. This inspection sometimes produces unsound results."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertErr52Cpp",
                "shortDescription": {
                  "text": "cert-err52-cpp clang-tidy check"
                },
                "fullDescription": {
                  "text": "cert-err52-cpp clang-tidy check. Learn more...",
                  "markdown": "cert-err52-cpp clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/err52-cpp.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MissingHeadAndBodyTags",
                "shortDescription": {
                  "text": "Important tags or attributes missing (missing <head> and <body>)"
                },
                "fullDescription": {
                  "text": "<([)html(]) $attr1$>",
                  "markdown": "\\<(\\[)html(\\]) $attr1$\\>"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMissingPrototypeForCc",
                "shortDescription": {
                  "text": "missing-prototype-for-cc clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmissing-prototype-for-cc clang diagnostic. Learn more...",
                  "markdown": "-Wmissing-prototype-for-cc clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmissing-prototype-for-cc)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClassNeverUsed",
                "shortDescription": {
                  "text": "Class is never used"
                },
                "fullDescription": {
                  "text": "A class is never used",
                  "markdown": "A class is never used"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFormatZeroLength",
                "shortDescription": {
                  "text": "format-zero-length clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wformat-zero-length clang diagnostic. Learn more...",
                  "markdown": "-Wformat-zero-length clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wformat-zero-length)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.RedundantNamespaceAlias",
                "shortDescription": {
                  "text": "Redundant namespace alias"
                },
                "fullDescription": {
                  "text": "Namespace alias is not required by code and can be safely removed",
                  "markdown": "Namespace alias is not required by code and can be safely removed"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAvrRtlibLinkingQuirks",
                "shortDescription": {
                  "text": "avr-rtlib-linking-quirks clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wavr-rtlib-linking-quirks clang diagnostic. Learn more...",
                  "markdown": "-Wavr-rtlib-linking-quirks clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wavr-rtlib-linking-quirks)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBStringCompareIsCultureSpecific.5",
                "shortDescription": {
                  "text": "String.Compare is culture-specific (string.Compare(string, int, string, int, bool) is culture-specific)"
                },
                "fullDescription": {
                  "text": "$s$.Compare($s1$, $i1$, $s2$, $i2$, false)",
                  "markdown": "$s$.Compare($s1$, $i1$, $s2$, $i2$, false)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBStringCompareIsCultureSpecific.4",
                "shortDescription": {
                  "text": "String.Compare is culture-specific (string.Compare(string, int, string, int) is culture-specific)"
                },
                "fullDescription": {
                  "text": "$s$.Compare($s1$, $i1$, $s2$, $i2$)",
                  "markdown": "$s$.Compare($s1$, $i1$, $s2$, $i2$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticRestrictExpansion",
                "shortDescription": {
                  "text": "restrict-expansion clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wrestrict-expansion clang diagnostic. Learn more...",
                  "markdown": "-Wrestrict-expansion clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wrestrict-expansion)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBStringCompareIsCultureSpecific.6",
                "shortDescription": {
                  "text": "String.Compare is culture-specific (string.Compare(string, int, string, int, bool) is culture-specific)"
                },
                "fullDescription": {
                  "text": "$s$.Compare($s1$, $i1$, $s2$, $i2$, true)",
                  "markdown": "$s$.Compare($s1$, $i1$, $s2$, $i2$, true)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeleteAbstractNonVirtualDtor",
                "shortDescription": {
                  "text": "delete-abstract-non-virtual-dtor clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdelete-abstract-non-virtual-dtor clang diagnostic. Learn more...",
                  "markdown": "-Wdelete-abstract-non-virtual-dtor clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdelete-abstract-non-virtual-dtor)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp98Cpp11CompatBinaryLiteral",
                "shortDescription": {
                  "text": "c++98-c++11-compat-binary-literal clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wc++98-c++11-compat-binary-literal clang diagnostic. Learn more...",
                  "markdown": "-Wc++98-c++11-compat-binary-literal clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wc-98-c-11-compat-binary-literal)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBStringCompareIsCultureSpecific.1",
                "shortDescription": {
                  "text": "String.Compare is culture-specific (string.Compare(string, string) is culture-specific)"
                },
                "fullDescription": {
                  "text": "$s$.Compare($s1$, $s2$)",
                  "markdown": "$s$.Compare($s1$, $s2$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesMacroUsage",
                "shortDescription": {
                  "text": "cppcoreguidelines-macro-usage clang-tidy check"
                },
                "fullDescription": {
                  "text": "cppcoreguidelines-macro-usage clang-tidy check. Learn more...",
                  "markdown": "cppcoreguidelines-macro-usage clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/macro-usage.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBStringCompareIsCultureSpecific.3",
                "shortDescription": {
                  "text": "String.Compare is culture-specific (string.Compare(string, string, bool) is culture-specific)"
                },
                "fullDescription": {
                  "text": "$string$.Compare($s1$, $s2$, true)",
                  "markdown": "$string$.Compare($s1$, $s2$, true)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBStringCompareIsCultureSpecific.2",
                "shortDescription": {
                  "text": "String.Compare is culture-specific (string.Compare(string, string, bool) is culture-specific)"
                },
                "fullDescription": {
                  "text": "$string$.Compare($s1$, $s2$, false)",
                  "markdown": "$string$.Compare($s1$, $s2$, false)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCastAlign",
                "shortDescription": {
                  "text": "cast-align clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wcast-align clang diagnostic. Learn more...",
                  "markdown": "-Wcast-align clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wcast-align)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnusedVariable",
                "shortDescription": {
                  "text": "unused-variable clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunused-variable clang diagnostic. Learn more...",
                  "markdown": "-Wunused-variable clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-variable)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IncorrectBlankLinesNearBraces",
                "shortDescription": {
                  "text": "Incorrect blank lines (incorrect number of blank lines near braces)"
                },
                "fullDescription": {
                  "text": "Incorrect number of blank lines near braces Learn more...",
                  "markdown": "Incorrect number of blank lines near braces [Learn more...](https://www.jetbrains.com/help/rider/IncorrectBlankLinesNearBraces.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedObjcPointerIntrospectionPerformSelector",
                "shortDescription": {
                  "text": "deprecated-objc-pointer-introspection-performSelector clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdeprecated-objc-pointer-introspection-performSelector clang diagnostic. Learn more...",
                  "markdown": "-Wdeprecated-objc-pointer-introspection-performSelector clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-objc-pointer-introspection-performSelector)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesProTypeMemberInit",
                "shortDescription": {
                  "text": "cppcoreguidelines-pro-type-member-init clang-tidy check"
                },
                "fullDescription": {
                  "text": "cppcoreguidelines-pro-type-member-init clang-tidy check. Learn more...",
                  "markdown": "cppcoreguidelines-pro-type-member-init clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/pro-type-member-init.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyPortabilitySimdIntrinsics",
                "shortDescription": {
                  "text": "portability-simd-intrinsics clang-tidy check"
                },
                "fullDescription": {
                  "text": "portability-simd-intrinsics clang-tidy check. Learn more...",
                  "markdown": "portability-simd-intrinsics clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/portability/simd-intrinsics.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyPortabilityStdAllocatorConst",
                "shortDescription": {
                  "text": "portability-std-allocator-const clang-tidy check"
                },
                "fullDescription": {
                  "text": "portability-std-allocator-const clang-tidy check. Learn more...",
                  "markdown": "portability-std-allocator-const clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/portability/std-allocator-const.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp98CompatBindToTemporaryCopy",
                "shortDescription": {
                  "text": "c++98-compat-bind-to-temporary-copy clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wc++98-compat-bind-to-temporary-copy clang diagnostic. Learn more...",
                  "markdown": "-Wc++98-compat-bind-to-temporary-copy clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wc-98-compat-bind-to-temporary-copy)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MoreSpecificForeachVariableTypeAvailable",
                "shortDescription": {
                  "text": "Iteration variable can be declared with a more specific type"
                },
                "fullDescription": {
                  "text": "Type of iteration variable declared in 'foreach' statement is less specific than that which can be inferred from the collection type being iterated Learn more...",
                  "markdown": "Type of iteration variable declared in 'foreach' statement is less specific than that which can be inferred from the collection type being iterated [Learn more...](https://www.jetbrains.com/help/rider/MoreSpecificForeachVariableTypeAvailable.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSizeofArrayArgument",
                "shortDescription": {
                  "text": "sizeof-array-argument clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wsizeof-array-argument clang diagnostic. Learn more...",
                  "markdown": "-Wsizeof-array-argument clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wsizeof-array-argument)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPointerTypeMismatch",
                "shortDescription": {
                  "text": "pointer-type-mismatch clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wpointer-type-mismatch clang diagnostic. Learn more...",
                  "markdown": "-Wpointer-type-mismatch clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wpointer-type-mismatch)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Mvc.ActionNotResolved",
                "shortDescription": {
                  "text": "MVC (unknown action)"
                },
                "fullDescription": {
                  "text": "Unknown ASP.NET MVC Action",
                  "markdown": "Unknown ASP.NET MVC Action"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticExportUnnamed",
                "shortDescription": {
                  "text": "export-unnamed clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wexport-unnamed clang diagnostic. Learn more...",
                  "markdown": "-Wexport-unnamed clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wexport-unnamed)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeclarationAfterStatement",
                "shortDescription": {
                  "text": "declaration-after-statement clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdeclaration-after-statement clang diagnostic. Learn more...",
                  "markdown": "-Wdeclaration-after-statement clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdeclaration-after-statement)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesProTypeUnionAccess",
                "shortDescription": {
                  "text": "cppcoreguidelines-pro-type-union-access clang-tidy check"
                },
                "fullDescription": {
                  "text": "cppcoreguidelines-pro-type-union-access clang-tidy check. Learn more...",
                  "markdown": "cppcoreguidelines-pro-type-union-access clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/pro-type-union-access.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantAnonymousTypePropertyName",
                "shortDescription": {
                  "text": "Redundant anonymous type property explicit name"
                },
                "fullDescription": {
                  "text": "Explicit name specification of anonymous type property is redundant. It is inferred from the initializer expression.",
                  "markdown": "Explicit name specification of anonymous type property is redundant. It is inferred from the initializer expression."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantNullableAnnotationOnReferenceTypeConstraint",
                "shortDescription": {
                  "text": "Redundant nullable annotation on 'class?' constraint of type parameter constrained by non-nullable base type"
                },
                "fullDescription": {
                  "text": "The nullable annotation on 'class?' constraint is redundant because type parameter is constrained by non-nullable base type",
                  "markdown": "The nullable annotation on 'class?' constraint is redundant because type parameter is constrained by non-nullable base type"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedNonPrototype",
                "shortDescription": {
                  "text": "deprecated-non-prototype clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdeprecated-non-prototype clang diagnostic. Learn more...",
                  "markdown": "-Wdeprecated-non-prototype clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-non-prototype)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantNullableAnnotationOnTypeConstraintHasNonNullableTypeKind",
                "shortDescription": {
                  "text": "Redundant nullable annotation on base type constraint of type parameter having non-nullable type kind"
                },
                "fullDescription": {
                  "text": "The nullable annotation on base type constraint is redundant because type parameter has 'class' or 'struct' or 'unmanaged' constraint",
                  "markdown": "The nullable annotation on base type constraint is redundant because type parameter has 'class' or 'struct' or 'unmanaged' constraint"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VoidMethodWithMustUseReturnValueAttribute",
                "shortDescription": {
                  "text": "'void' method is annotated by [MustUseReturnValue] attribute"
                },
                "fullDescription": {
                  "text": "'void' method is annotated by [MustUseReturnValue] attribute",
                  "markdown": "'void' method is annotated by \\[MustUseReturnValue\\] attribute"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticShiftNegativeValue",
                "shortDescription": {
                  "text": "shift-negative-value clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wshift-negative-value clang diagnostic. Learn more...",
                  "markdown": "-Wshift-negative-value clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wshift-negative-value)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticBridgeCast",
                "shortDescription": {
                  "text": "bridge-cast clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wbridge-cast clang diagnostic. Learn more...",
                  "markdown": "-Wbridge-cast clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wbridge-cast)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAlteraIdDependentBackwardBranch",
                "shortDescription": {
                  "text": "altera-id-dependent-backward-branch clang-tidy check"
                },
                "fullDescription": {
                  "text": "altera-id-dependent-backward-branch clang-tidy check. Learn more...",
                  "markdown": "altera-id-dependent-backward-branch clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/altera/id-dependent-backward-branch.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNullabilityCompletenessOnArrays",
                "shortDescription": {
                  "text": "nullability-completeness-on-arrays clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wnullability-completeness-on-arrays clang diagnostic. Learn more...",
                  "markdown": "-Wnullability-completeness-on-arrays clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wnullability-completeness-on-arrays)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EnforceFixedStatementBraces",
                "shortDescription": {
                  "text": "Use preferred braces style (enforce braces in 'fixed' statement)"
                },
                "fullDescription": {
                  "text": "Use braces to separate 'fixed' statement body Learn more...",
                  "markdown": "Use braces to separate 'fixed' statement body [Learn more...](https://www.jetbrains.com/help/rider/EnforceFixedStatementBraces.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticStrncatSize",
                "shortDescription": {
                  "text": "strncat-size clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wstrncat-size clang diagnostic. Learn more...",
                  "markdown": "-Wstrncat-size clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wstrncat-size)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityUniqueptrDeleteRelease",
                "shortDescription": {
                  "text": "readability-uniqueptr-delete-release clang-tidy check"
                },
                "fullDescription": {
                  "text": "readability-uniqueptr-delete-release clang-tidy check. Learn more...",
                  "markdown": "readability-uniqueptr-delete-release clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/uniqueptr-delete-release.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticKnrPromotedParameter",
                "shortDescription": {
                  "text": "knr-promoted-parameter clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wknr-promoted-parameter clang diagnostic. Learn more...",
                  "markdown": "-Wknr-promoted-parameter clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wknr-promoted-parameter)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MethodOverloadWithOptionalParameter",
                "shortDescription": {
                  "text": "Method with optional or 'params' parameter is hidden by overload"
                },
                "fullDescription": {
                  "text": "Method with optional or 'params' parameter is hidden by overload",
                  "markdown": "Method with optional or 'params' parameter is hidden by overload"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ThreadStaticFieldHasInitializer",
                "shortDescription": {
                  "text": "Thread static field has initializer"
                },
                "fullDescription": {
                  "text": "Thread static field has an initializer, which is invoked only once on the thread that is running when the static constructor executes Learn more...",
                  "markdown": "Thread static field has an initializer, which is invoked only once on the thread that is running when the static constructor executes [Learn more...](https://www.jetbrains.com/help/rider/ThreadStaticFieldHasInitializer.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.AvaloniaWrongBindingModeForStreamBindingOperator",
                "shortDescription": {
                  "text": "Using stream binding operator in TwoWay or OneWayToSource binding modes"
                },
                "fullDescription": {
                  "text": "Using stream binding operator in TwoWay or OneWayToSource binding modes may cause runtime errors",
                  "markdown": "Using stream binding operator in TwoWay or OneWayToSource binding modes may cause runtime errors"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerSecurityInsecureAPISecuritySyntaxChecker",
                "shortDescription": {
                  "text": "security.insecureAPI.SecuritySyntaxChecker clang static analyzer check"
                },
                "fullDescription": {
                  "text": "security.insecureAPI.SecuritySyntaxChecker clang static analyzer check. Learn more...",
                  "markdown": "security.insecureAPI.SecuritySyntaxChecker clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppTabsAndSpacesMismatch",
                "shortDescription": {
                  "text": "Incorrect indent (tabs/spaces mismatch)"
                },
                "fullDescription": {
                  "text": "Tabs/spaces mismatch",
                  "markdown": "Tabs/spaces mismatch"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Html.IdNotResolved",
                "shortDescription": {
                  "text": "Unknown ID"
                },
                "fullDescription": {
                  "text": "Link to unknown anchor (no element with such ID or name)",
                  "markdown": "Link to unknown anchor (no element with such ID or name)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInjectedClassName",
                "shortDescription": {
                  "text": "injected-class-name clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Winjected-class-name clang diagnostic. Learn more...",
                  "markdown": "-Winjected-class-name clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#winjected-class-name)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyDestructor",
                "shortDescription": {
                  "text": "Empty destructor"
                },
                "fullDescription": {
                  "text": "Empty finalizer declaration is redundant Learn more...",
                  "markdown": "Empty finalizer declaration is redundant [Learn more...](https://www.jetbrains.com/help/rider/EmptyDestructor.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppReplaceTieWithStructuredBinding",
                "shortDescription": {
                  "text": "Structured binding can be used instead of tie(..)"
                },
                "fullDescription": {
                  "text": "Structured binding can be used instead of tie(..)",
                  "markdown": "Structured binding can be used instead of tie(..)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFunctionMultiversion",
                "shortDescription": {
                  "text": "function-multiversion clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wfunction-multiversion clang diagnostic. Learn more...",
                  "markdown": "-Wfunction-multiversion clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wfunction-multiversion)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUseEraseAlgorithm",
                "shortDescription": {
                  "text": "'std::erase'/'std::erase_if' can be used instead of the remove-erase idiom"
                },
                "fullDescription": {
                  "text": "'std::erase'/'std::erase_if' can be used instead of the remove-erase idiom",
                  "markdown": "'std::erase'/'std::erase_if' can be used instead of the remove-erase idiom"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppDeclaratorDisambiguatedAsFunction",
                "shortDescription": {
                  "text": "Declarator disambiguated as a function declaration"
                },
                "fullDescription": {
                  "text": "Declarator is disambiguated as a function declaration. Make sure a variable definition is not intended instead.",
                  "markdown": "Declarator is disambiguated as a function declaration. Make sure a variable definition is not intended instead."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBadDeclarationBracesIndent",
                "shortDescription": {
                  "text": "Incorrect indent (around declaration braces)"
                },
                "fullDescription": {
                  "text": "Around declaration braces",
                  "markdown": "Around declaration braces"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.InvalidMemberType",
                "shortDescription": {
                  "text": "Member of invalid type"
                },
                "fullDescription": {
                  "text": "Member of invalid type",
                  "markdown": "Member of invalid type"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MergeIntoLogicalPattern",
                "shortDescription": {
                  "text": "Merge null/pattern/value checks into 'or'/'and' patterns"
                },
                "fullDescription": {
                  "text": "Merge sequential negated null/pattern/value checks into single logical 'or'/'and' pattern check",
                  "markdown": "Merge sequential negated null/pattern/value checks into single logical 'or'/'and' pattern check"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PatternIsAlwaysTrueOrFalse",
                "shortDescription": {
                  "text": "Pattern is always 'true' or always 'false'"
                },
                "fullDescription": {
                  "text": "Pattern check result is always the same",
                  "markdown": "Pattern check result is always the same"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.PreferNonAllocApi",
                "shortDescription": {
                  "text": "Alternative non-allocating method available"
                },
                "fullDescription": {
                  "text": "An alternative method is available that avoids allocation and reuses an existing buffer. Learn more...",
                  "markdown": "An alternative method is available that avoids allocation and reuses an existing buffer. [Learn more...](https://github.com/JetBrains/resharper-unity/wiki/Avoid-using-allocating-versions-of-Physics-Raycast-functions)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp11Narrowing",
                "shortDescription": {
                  "text": "c++11-narrowing clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wc++11-narrowing clang diagnostic. Learn more...",
                  "markdown": "-Wc++11-narrowing clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wc-11-narrowing)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RouteTemplates.DuplicatedParameter",
                "shortDescription": {
                  "text": "Parameter declared in route more than once"
                },
                "fullDescription": {
                  "text": "Parameter declared in route more than once",
                  "markdown": "Parameter declared in route more than once"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadSymbolSpaces",
                "shortDescription": {
                  "text": "Incorrect spacing (around operator symbols)"
                },
                "fullDescription": {
                  "text": "Around operator symbols Learn more...",
                  "markdown": "Around operator symbols [Learn more...](https://www.jetbrains.com/help/rider/BadSymbolSpaces.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantAccessSpecifier",
                "shortDescription": {
                  "text": "Access specifier does not change accessibility level"
                },
                "fullDescription": {
                  "text": "An access specifier does not change accessibility level and is redundant",
                  "markdown": "An access specifier does not change accessibility level and is redundant"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPreCpp2bCompatPedantic",
                "shortDescription": {
                  "text": "pre-c++2b-compat-pedantic clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wpre-c++2b-compat-pedantic clang diagnostic. Learn more...",
                  "markdown": "-Wpre-c++2b-compat-pedantic clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wpre-c-2b-compat-pedantic)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedLocalFunction",
                "shortDescription": {
                  "text": "Local function is never used"
                },
                "fullDescription": {
                  "text": "Local function is never used Learn more...",
                  "markdown": "Local function is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedLocalFunction.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticVectorConversion",
                "shortDescription": {
                  "text": "vector-conversion clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wvector-conversion clang diagnostic. Learn more...",
                  "markdown": "-Wvector-conversion clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wvector-conversion)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantTypeCheckInPattern",
                "shortDescription": {
                  "text": "Redundant type check in a pattern"
                },
                "fullDescription": {
                  "text": "A pattern contains a redundant type check that matches any non-nullable values that are already handled in the pattern",
                  "markdown": "A pattern contains a redundant type check that matches any non-nullable values that are already handled in the pattern"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadLinqLineBreaks",
                "shortDescription": {
                  "text": "Incorrect line breaks (around LINQ queries)"
                },
                "fullDescription": {
                  "text": "Around LINQ queries Learn more...",
                  "markdown": "Around LINQ queries [Learn more...](https://www.jetbrains.com/help/rider/BadLinqLineBreaks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrangeObjectCreationWhenTypeEvident",
                "shortDescription": {
                  "text": "Use preferred style of 'new' expression when created type is evident"
                },
                "fullDescription": {
                  "text": "Add or remove explicit type specification in 'new' expression when type is evident from the usage",
                  "markdown": "Add or remove explicit type specification in 'new' expression when type is evident from the usage"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertSig30C",
                "shortDescription": {
                  "text": "cert-sig30-c clang-tidy check"
                },
                "fullDescription": {
                  "text": "cert-sig30-c clang-tidy check. Learn more...",
                  "markdown": "cert-sig30-c clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/sig30-c.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.PossibleNullReferenceException",
                "shortDescription": {
                  "text": "Possible 'null' value in the path of binding without fallback value"
                },
                "fullDescription": {
                  "text": "Dereferencing an expression which can have 'null' value in binding without specified fallback value",
                  "markdown": "Dereferencing an expression which can have 'null' value in binding without specified fallback value"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyOpenmpUseDefaultNone",
                "shortDescription": {
                  "text": "openmp-use-default-none clang-tidy check"
                },
                "fullDescription": {
                  "text": "openmp-use-default-none clang-tidy check. Learn more...",
                  "markdown": "openmp-use-default-none clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/openmp/use-default-none.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.IncorrectRangeBounds",
                "shortDescription": {
                  "text": "NUnit. Incorrect range bounds. 'to' must be greater than or equal to 'from'."
                },
                "fullDescription": {
                  "text": "NUnit. Incorrect [Range] bounds. The value of 'to' parameter must be greater than or equal to 'from', or there must be a negative step. Learn more...",
                  "markdown": "NUnit. Incorrect \\[Range\\] bounds. The value of 'to' parameter must be greater than or equal to 'from', or there must be a negative step. [Learn more...](https://www.jetbrains.com/help/rider/NUnit.IncorrectRangeBounds.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PossibleMistakenCallToGetType.2",
                "shortDescription": {
                  "text": "Possible mistaken call to GetType()"
                },
                "fullDescription": {
                  "text": "$type$.GetType()",
                  "markdown": "$type$.GetType()"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PossibleMistakenCallToGetType.1",
                "shortDescription": {
                  "text": "Possible mistaken call to GetType()"
                },
                "fullDescription": {
                  "text": "$type$.IsInstanceOfType($expr$.GetType())",
                  "markdown": "$type$.IsInstanceOfType($expr$.GetType())"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeUnaryStaticAssert",
                "shortDescription": {
                  "text": "modernize-unary-static-assert clang-tidy check"
                },
                "fullDescription": {
                  "text": "modernize-unary-static-assert clang-tidy check. Learn more...",
                  "markdown": "modernize-unary-static-assert clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/unary-static-assert.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PossibleMultipleWriteAccessInDoubleCheckLocking",
                "shortDescription": {
                  "text": "Possible incorrect implementation of Double-Check Locking pattern. Possible multiple write access to checked field."
                },
                "fullDescription": {
                  "text": "Possible incorrect implementation of Double-Check Locking pattern. Possible multiple write access to checked field. Learn more...",
                  "markdown": "Possible incorrect implementation of Double-Check Locking pattern. Possible multiple write access to checked field. [Learn more...](https://www.jetbrains.com/help/rider/PossibleMultipleWriteAccessInDoubleCheckLocking.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBWarnings__BC42104",
                "shortDescription": {
                  "text": "Variable is used before it has been assigned a value"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://msdn.microsoft.com/en-us/library/3fdk625a.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedAutoPropertyAccessor.Local",
                "shortDescription": {
                  "text": "Auto-property accessor is never used (private accessibility)"
                },
                "fullDescription": {
                  "text": "Accessor in auto-property is never used",
                  "markdown": "Accessor in auto-property is never used"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInvalidIboutlet",
                "shortDescription": {
                  "text": "invalid-iboutlet clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Winvalid-iboutlet clang diagnostic. Learn more...",
                  "markdown": "-Winvalid-iboutlet clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#winvalid-iboutlet)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnnamedTypeTemplateArgs",
                "shortDescription": {
                  "text": "unnamed-type-template-args clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunnamed-type-template-args clang diagnostic. Learn more...",
                  "markdown": "-Wunnamed-type-template-args clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunnamed-type-template-args)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RouteTemplates.ParameterTypeCanBeMadeStricter",
                "shortDescription": {
                  "text": "Parameter's type can be made stricter due to applied constraints"
                },
                "fullDescription": {
                  "text": "Parameter's type can be made stricter due to applied constraints",
                  "markdown": "Parameter's type can be made stricter due to applied constraints"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUseAlgorithmWithCount",
                "shortDescription": {
                  "text": "Algorithm accepting an iterator and a count can be used"
                },
                "fullDescription": {
                  "text": "A standard algorithm accepting range iterators is used instead of the variant accepting an iterator and a count",
                  "markdown": "A standard algorithm accepting range iterators is used instead of the variant accepting an iterator and a count"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPedantic",
                "shortDescription": {
                  "text": "pedantic clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wpedantic clang diagnostic. Learn more...",
                  "markdown": "-Wpedantic clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wpedantic)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCmseUnionLeak",
                "shortDescription": {
                  "text": "cmse-union-leak clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wcmse-union-leak clang diagnostic. Learn more...",
                  "markdown": "-Wcmse-union-leak clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wcmse-union-leak)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertToConstant.Global",
                "shortDescription": {
                  "text": "Convert local variable or field into constant (non-private accessibility)"
                },
                "fullDescription": {
                  "text": "Convert local variable or field into constant",
                  "markdown": "Convert local variable or field into constant"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBadSemicolonSpaces",
                "shortDescription": {
                  "text": "Incorrect spacing (around semicolon)"
                },
                "fullDescription": {
                  "text": "Around semicolon",
                  "markdown": "Around semicolon"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNsconsumedMismatch",
                "shortDescription": {
                  "text": "nsconsumed-mismatch clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wnsconsumed-mismatch clang diagnostic. Learn more...",
                  "markdown": "-Wnsconsumed-mismatch clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wnsconsumed-mismatch)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAndroidCloexecInotifyInit1",
                "shortDescription": {
                  "text": "android-cloexec-inotify-init1 clang-tidy check"
                },
                "fullDescription": {
                  "text": "android-cloexec-inotify-init1 clang-tidy check. Learn more...",
                  "markdown": "android-cloexec-inotify-init1 clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/android/cloexec-inotify-init1.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CenterTagIsObsolete",
                "shortDescription": {
                  "text": "Obsolete tags and attributes (<center> is obsolete)"
                },
                "fullDescription": {
                  "text": "<([)center(]) $attrs$>$content$",
                  "markdown": "\\<(\\[)center(\\]) $attrs$\\>$content$"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAbseilCleanupCtad",
                "shortDescription": {
                  "text": "abseil-cleanup-ctad clang-tidy check"
                },
                "fullDescription": {
                  "text": "abseil-cleanup-ctad clang-tidy check. Learn more...",
                  "markdown": "abseil-cleanup-ctad clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/cleanup-ctad.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp17CompatMangling",
                "shortDescription": {
                  "text": "c++17-compat-mangling clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wc++17-compat-mangling clang diagnostic. Learn more...",
                  "markdown": "-Wc++17-compat-mangling clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wc-17-compat-mangling)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantIteratorKeyword",
                "shortDescription": {
                  "text": "Iterator function without 'Yield' statements"
                },
                "fullDescription": {
                  "text": "Iterator function without 'Yield' statements",
                  "markdown": "Iterator function without 'Yield' statements"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticImplicitExceptionSpecMismatch",
                "shortDescription": {
                  "text": "implicit-exception-spec-mismatch clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wimplicit-exception-spec-mismatch clang diagnostic. Learn more...",
                  "markdown": "-Wimplicit-exception-spec-mismatch clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-exception-spec-mismatch)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuVariableSizedTypeNotAtEnd",
                "shortDescription": {
                  "text": "gnu-variable-sized-type-not-at-end clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wgnu-variable-sized-type-not-at-end clang diagnostic. Learn more...",
                  "markdown": "-Wgnu-variable-sized-type-not-at-end clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-variable-sized-type-not-at-end)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyFuchsiaDefaultArgumentsDeclarations",
                "shortDescription": {
                  "text": "fuchsia-default-arguments-declarations clang-tidy check"
                },
                "fullDescription": {
                  "text": "fuchsia-default-arguments-declarations clang-tidy check. Learn more...",
                  "markdown": "fuchsia-default-arguments-declarations clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/fuchsia/default-arguments-declarations.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClassNeverInstantiated.Local",
                "shortDescription": {
                  "text": "Class is never instantiated (private accessibility)"
                },
                "fullDescription": {
                  "text": "Non-static class is never instantiated",
                  "markdown": "Non-static class is never instantiated"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticForLoopAnalysis",
                "shortDescription": {
                  "text": "for-loop-analysis clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wfor-loop-analysis clang diagnostic. Learn more...",
                  "markdown": "-Wfor-loop-analysis clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wfor-loop-analysis)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticBoolConversion",
                "shortDescription": {
                  "text": "bool-conversion clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wbool-conversion clang diagnostic. Learn more...",
                  "markdown": "-Wbool-conversion clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wbool-conversion)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Asp.DeadCode",
                "shortDescription": {
                  "text": "ASP.NET Dead Code"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://www.jetbrains.com/help/rider/Asp.DeadCode.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertDcl50Cpp",
                "shortDescription": {
                  "text": "cert-dcl50-cpp clang-tidy check"
                },
                "fullDescription": {
                  "text": "cert-dcl50-cpp clang-tidy check. Learn more...",
                  "markdown": "cert-dcl50-cpp clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/dcl50-cpp.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerApiModelingStdCLibraryFunctions",
                "shortDescription": {
                  "text": "apiModeling.StdCLibraryFunctions clang static analyzer check"
                },
                "fullDescription": {
                  "text": "apiModeling.StdCLibraryFunctions clang static analyzer check. Learn more...",
                  "markdown": "apiModeling.StdCLibraryFunctions clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBadControlBracesLineBreaks",
                "shortDescription": {
                  "text": "Incorrect line breaks (around statement braces)"
                },
                "fullDescription": {
                  "text": "Around statement braces",
                  "markdown": "Around statement braces"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeUseUncaughtExceptions",
                "shortDescription": {
                  "text": "modernize-use-uncaught-exceptions clang-tidy check"
                },
                "fullDescription": {
                  "text": "modernize-use-uncaught-exceptions clang-tidy check. Learn more...",
                  "markdown": "modernize-use-uncaught-exceptions clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-uncaught-exceptions.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OutdentIsOffPrevLevel",
                "shortDescription": {
                  "text": "Incorrect indent (line indent should be restored to the previous level elsewhere)"
                },
                "fullDescription": {
                  "text": "Line indent should be restored to the previous level elsewhere Learn more...",
                  "markdown": "Line indent should be restored to the previous level elsewhere [Learn more...](https://www.jetbrains.com/help/rider/OutdentIsOffPrevLevel.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithOfType.Any.2",
                "shortDescription": {
                  "text": "Replace with OfType<T>().Any() (replace with OfType(Of ..)().Any(..))"
                },
                "fullDescription": {
                  "text": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).Any(Function ($y$) $y$ IsNot Nothing AndAlso $expr$)",
                  "markdown": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).Any(Function ($y$) $y$ IsNot Nothing AndAlso $expr$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithOfType.Any.1",
                "shortDescription": {
                  "text": "Replace with OfType<T>().Any() (replace with OfType(Of ..)().Any())"
                },
                "fullDescription": {
                  "text": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).Any(Function ($y$) $y$ IsNot Nothing)",
                  "markdown": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).Any(Function ($y$) $y$ IsNot Nothing)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EscapedKeyword",
                "shortDescription": {
                  "text": "Keyword will be escaped during code generation"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "T4",
                      "index": 62,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseNullableAttributesSupportedByCompiler",
                "shortDescription": {
                  "text": "Use compiler-supported nullable attributes"
                },
                "fullDescription": {
                  "text": "Use compiler-supported attributes from System.Diagnostics.CodeAnalysis namespace to override annotations for nullable reference types",
                  "markdown": "Use compiler-supported attributes from System.Diagnostics.CodeAnalysis namespace to override annotations for nullable reference types"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyFuchsiaDefaultArgumentsCalls",
                "shortDescription": {
                  "text": "fuchsia-default-arguments-calls clang-tidy check"
                },
                "fullDescription": {
                  "text": "fuchsia-default-arguments-calls clang-tidy check. Learn more...",
                  "markdown": "fuchsia-default-arguments-calls clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/fuchsia/default-arguments-calls.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAlwaysInlineCoroutine",
                "shortDescription": {
                  "text": "always-inline-coroutine clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Walways-inline-coroutine clang diagnostic. Learn more...",
                  "markdown": "-Walways-inline-coroutine clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#walways-inline-coroutine)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnknownCudaVersion",
                "shortDescription": {
                  "text": "unknown-cuda-version clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunknown-cuda-version clang diagnostic. Learn more...",
                  "markdown": "-Wunknown-cuda-version clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunknown-cuda-version)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Html.Obsolete",
                "shortDescription": {
                  "text": "Obsolete or nonstandard element"
                },
                "fullDescription": {
                  "text": "Obsolete or nonstandard element",
                  "markdown": "Obsolete or nonstandard element"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GCSuppressFinalizeForTypeWithoutDestructor",
                "shortDescription": {
                  "text": "'GC.SuppressFinalize' is invoked for type without destructor"
                },
                "fullDescription": {
                  "text": "'GC.SuppressFinalize' is invoked for type without destructor Learn more...",
                  "markdown": "'GC.SuppressFinalize' is invoked for type without destructor [Learn more...](https://www.jetbrains.com/help/rider/GCSuppressFinalizeForTypeWithoutDestructor.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppHeaderHasBeenAlreadyIncluded",
                "shortDescription": {
                  "text": "Guarded header has already been included"
                },
                "fullDescription": {
                  "text": "Guarded header has already been included",
                  "markdown": "Guarded header has already been included"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.TestCaseSourceCannotBeResolved",
                "shortDescription": {
                  "text": "NUnit. Cannot resolve symbol in TestCaseSource or ValueSource attribute."
                },
                "fullDescription": {
                  "text": "Cannot resolve symbol specified in [TestCaseSource] or [ValueSource] attributes Learn more...",
                  "markdown": "Cannot resolve symbol specified in \\[TestCaseSource\\] or \\[ValueSource\\] attributes [Learn more...](https://www.jetbrains.com/help/rider/NUnit.TestCaseSourceCannotBeResolved.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ParameterTypeCanBeEnumerable.Global",
                "shortDescription": {
                  "text": "Parameter type can be IEnumerable<T> (non-private accessibility)"
                },
                "fullDescription": {
                  "text": "Parameter can be declared with IEnumerable type but it is declared with more specific type (e.g. List) Learn more...",
                  "markdown": "Parameter can be declared with IEnumerable type but it is declared with more specific type (e.g. List) [Learn more...](https://www.jetbrains.com/help/rider/ParameterTypeCanBeEnumerable.Global.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppPrecompiledHeaderNotFound",
                "shortDescription": {
                  "text": "Precompiled header is not found"
                },
                "fullDescription": {
                  "text": "No corresponding file with the 'Precompiled Header' property set to 'Create' (/Yc) is found",
                  "markdown": "No corresponding file with the 'Precompiled Header' property set to 'Create' (/Yc) is found"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithOfType.LongCount",
                "shortDescription": {
                  "text": "Replace with OfType<T>().LongCount()"
                },
                "fullDescription": {
                  "text": "$seq$.Select($x$ => $x$ as $T$).LongCount($y$ => $y$ != null)",
                  "markdown": "$seq$.Select($x$ =\\> $x$ as $T$).LongCount($y$ =\\> $y$ != null)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnicode",
                "shortDescription": {
                  "text": "unicode clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunicode clang diagnostic. Learn more...",
                  "markdown": "-Wunicode clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunicode)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMultipleMoveVbase",
                "shortDescription": {
                  "text": "multiple-move-vbase clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmultiple-move-vbase clang diagnostic. Learn more...",
                  "markdown": "-Wmultiple-move-vbase clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmultiple-move-vbase)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCstringFormatDirective",
                "shortDescription": {
                  "text": "cstring-format-directive clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wcstring-format-directive clang diagnostic. Learn more...",
                  "markdown": "-Wcstring-format-directive clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wcstring-format-directive)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityMisplacedArrayIndex",
                "shortDescription": {
                  "text": "readability-misplaced-array-index clang-tidy check"
                },
                "fullDescription": {
                  "text": "readability-misplaced-array-index clang-tidy check. Learn more...",
                  "markdown": "readability-misplaced-array-index clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/misplaced-array-index.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticThreadSafetyAttributes",
                "shortDescription": {
                  "text": "thread-safety-attributes clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wthread-safety-attributes clang diagnostic. Learn more...",
                  "markdown": "-Wthread-safety-attributes clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wthread-safety-attributes)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticExceptions",
                "shortDescription": {
                  "text": "exceptions clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wexceptions clang diagnostic. Learn more...",
                  "markdown": "-Wexceptions clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wexceptions)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppEnforceOverridingDestructorStyle",
                "shortDescription": {
                  "text": "Use preferred overriding function style (enforce overriding destructor style)"
                },
                "fullDescription": {
                  "text": "Enforce the 'virtual' and 'override' specifiers on overriding destructors",
                  "markdown": "Enforce the 'virtual' and 'override' specifiers on overriding destructors"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseWithExpressionToCopyStruct",
                "shortDescription": {
                  "text": "Use 'with' expression to copy struct"
                },
                "fullDescription": {
                  "text": "Use 'with' expression to create a modified instance of a struct",
                  "markdown": "Use 'with' expression to create a modified instance of a struct"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAbseilFasterStrsplitDelimiter",
                "shortDescription": {
                  "text": "abseil-faster-strsplit-delimiter clang-tidy check"
                },
                "fullDescription": {
                  "text": "abseil-faster-strsplit-delimiter clang-tidy check. Learn more...",
                  "markdown": "abseil-faster-strsplit-delimiter clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/faster-strsplit-delimiter.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDivisionByZero",
                "shortDescription": {
                  "text": "division-by-zero clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdivision-by-zero clang diagnostic. Learn more...",
                  "markdown": "-Wdivision-by-zero clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdivision-by-zero)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInterruptServiceRoutine",
                "shortDescription": {
                  "text": "interrupt-service-routine clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Winterrupt-service-routine clang diagnostic. Learn more...",
                  "markdown": "-Winterrupt-service-routine clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#winterrupt-service-routine)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PropertyFieldKeywordIsNeverUsed",
                "shortDescription": {
                  "text": "Backing field is assigned but never used"
                },
                "fullDescription": {
                  "text": "Backing field of property with 'field' keyword is assigned but never used",
                  "markdown": "Backing field of property with 'field' keyword is assigned but never used"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RouteTemplates.SymbolNotResolved",
                "shortDescription": {
                  "text": "Symbol not resolved"
                },
                "fullDescription": {
                  "text": "Symbol not resolved",
                  "markdown": "Symbol not resolved"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMissingSelectorName",
                "shortDescription": {
                  "text": "missing-selector-name clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmissing-selector-name clang diagnostic. Learn more...",
                  "markdown": "-Wmissing-selector-name clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmissing-selector-name)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DoubleNegationInPattern",
                "shortDescription": {
                  "text": "Simplify negated pattern"
                },
                "fullDescription": {
                  "text": "Suggest to replace `x is not not T` to `x is T` `!(x is not T)` to `x is T`",
                  "markdown": "Suggest to replace \\`x is not not T\\` to \\`x is T\\` \\`!(x is not T)\\` to \\`x is T\\`"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneDynamicStaticInitializers",
                "shortDescription": {
                  "text": "bugprone-dynamic-static-initializers clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-dynamic-static-initializers clang-tidy check. Learn more...",
                  "markdown": "bugprone-dynamic-static-initializers clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/dynamic-static-initializers.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFlexibleArrayExtensions",
                "shortDescription": {
                  "text": "flexible-array-extensions clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wflexible-array-extensions clang diagnostic. Learn more...",
                  "markdown": "-Wflexible-array-extensions clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wflexible-array-extensions)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PlaceAssignmentExpressionIntoBlock",
                "shortDescription": {
                  "text": "Place assignment expression into block"
                },
                "fullDescription": {
                  "text": "Place assignment expression into block to indicate the side-effect",
                  "markdown": "Place assignment expression into block to indicate the side-effect"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDynamicExceptionSpec",
                "shortDescription": {
                  "text": "dynamic-exception-spec clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdynamic-exception-spec clang diagnostic. Learn more...",
                  "markdown": "-Wdynamic-exception-spec clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdynamic-exception-spec)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSizeofArrayDecay",
                "shortDescription": {
                  "text": "sizeof-array-decay clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wsizeof-array-decay clang diagnostic. Learn more...",
                  "markdown": "-Wsizeof-array-decay clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wsizeof-array-decay)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PossibleUnintendedReferenceComparison",
                "shortDescription": {
                  "text": "Possible unintended reference comparison"
                },
                "fullDescription": {
                  "text": "Possible unintended reference comparison Learn more...",
                  "markdown": "Possible unintended reference comparison [Learn more...](https://www.jetbrains.com/help/rider/PossibleUnintendedReferenceComparison.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp14Extensions",
                "shortDescription": {
                  "text": "c++14-extensions clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wc++14-extensions clang diagnostic. Learn more...",
                  "markdown": "-Wc++14-extensions clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wc-14-extensions)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.NoNullCoalescing",
                "shortDescription": {
                  "text": "Possible unintended bypass of lifetime check of underlying Unity engine object ('??' on a type deriving from 'UnityEngine.Object' bypasses the lifetime check on the underlying Unity engine object)"
                },
                "fullDescription": {
                  "text": "The null coalescing operator does not call the custom equality operators defined on 'UnityEngine.Object', which will check to see if the underlying Unity engine object has been destroyed. Prefer an explicit null comparison or implicit bool comparison if the lifetime check is intended, or explicitly use 'object.ReferenceEquals()' for a standard (and quicker) CLR null check. Learn more...",
                  "markdown": "The null coalescing operator does not call the custom equality operators defined on 'UnityEngine.Object', which will check to see if the underlying Unity engine object has been destroyed. Prefer an explicit null comparison or implicit bool comparison if the lifetime check is intended, or explicitly use 'object.ReferenceEquals()' for a standard (and quicker) CLR null check. [Learn more...](https://github.com/JetBrains/resharper-unity/wiki/Possible-unintended-bypass-of-lifetime-check-of-underlying-Unity-engine-object)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.ExplicitTagComparison",
                "shortDescription": {
                  "text": "Use 'CompareTag' instead of explicit string comparison"
                },
                "fullDescription": {
                  "text": "Explicit string comparison with 'GameObject.tag' or 'Component.tag' is inefficient. Use the 'CompareTag' method instead. Learn more...",
                  "markdown": "Explicit string comparison with 'GameObject.tag' or 'Component.tag' is inefficient. Use the 'CompareTag' method instead. [Learn more...](https://github.com/JetBrains/resharper-unity/wiki/Use-CompareTag-instead-of-explicit-string-comparison)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppLongFloat",
                "shortDescription": {
                  "text": "'long' floats are not allowed by the C++ standard"
                },
                "fullDescription": {
                  "text": "Declaration specifier 'long' cannot be combined with 'float'",
                  "markdown": "Declaration specifier 'long' cannot be combined with 'float'"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppPossiblyUninitializedMember",
                "shortDescription": {
                  "text": "Possibly uninitialized class member"
                },
                "fullDescription": {
                  "text": "Class constructor does not initialize a field explicitly or implicitly",
                  "markdown": "Class constructor does not initialize a field explicitly or implicitly"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityStringCompare",
                "shortDescription": {
                  "text": "readability-string-compare clang-tidy check"
                },
                "fullDescription": {
                  "text": "readability-string-compare clang-tidy check. Learn more...",
                  "markdown": "readability-string-compare clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/string-compare.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticImplicitConversionFloatingPointToBool",
                "shortDescription": {
                  "text": "implicit-conversion-floating-point-to-bool clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wimplicit-conversion-floating-point-to-bool clang diagnostic. Learn more...",
                  "markdown": "-Wimplicit-conversion-floating-point-to-bool clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-conversion-floating-point-to-bool)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EnforceIfStatementBraces",
                "shortDescription": {
                  "text": "Use preferred braces style (enforce braces in 'if' statement)"
                },
                "fullDescription": {
                  "text": "Use braces to separate 'if' statement body Learn more...",
                  "markdown": "Use braces to separate 'if' statement body [Learn more...](https://www.jetbrains.com/help/rider/EnforceIfStatementBraces.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithSimpleAssignment.True",
                "shortDescription": {
                  "text": "Replace with simple assignment"
                },
                "fullDescription": {
                  "text": "$bool1$ |= true",
                  "markdown": "$bool1$ \\|= true"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDateTime",
                "shortDescription": {
                  "text": "date-time clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdate-time clang diagnostic. Learn more...",
                  "markdown": "-Wdate-time clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdate-time)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAlteraUnrollLoops",
                "shortDescription": {
                  "text": "altera-unroll-loops clang-tidy check"
                },
                "fullDescription": {
                  "text": "altera-unroll-loops clang-tidy check. Learn more...",
                  "markdown": "altera-unroll-loops clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/altera/unroll-loops.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedEnumCompare",
                "shortDescription": {
                  "text": "deprecated-enum-compare clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdeprecated-enum-compare clang diagnostic. Learn more...",
                  "markdown": "-Wdeprecated-enum-compare clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-enum-compare)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticReturnStackAddress",
                "shortDescription": {
                  "text": "return-stack-address clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wreturn-stack-address clang diagnostic. Learn more...",
                  "markdown": "-Wreturn-stack-address clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wreturn-stack-address)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.UnexpectedTextToken",
                "shortDescription": {
                  "text": "Unexpected text token error"
                },
                "fullDescription": {
                  "text": "Unexpected text token error",
                  "markdown": "Unexpected text token error"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBadListLineBreaks",
                "shortDescription": {
                  "text": "Incorrect line breaks (around comma in lists)"
                },
                "fullDescription": {
                  "text": "Around comma in lists",
                  "markdown": "Around comma in lists"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MissingBlankLines",
                "shortDescription": {
                  "text": "Incorrect blank lines (blank lines are missing elsewhere)"
                },
                "fullDescription": {
                  "text": "Blank lines are missing elsewhere Learn more...",
                  "markdown": "Blank lines are missing elsewhere [Learn more...](https://www.jetbrains.com/help/rider/MissingBlankLines.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrangeMissingParentheses",
                "shortDescription": {
                  "text": "Add parentheses to avoid non-obvious precedence"
                },
                "fullDescription": {
                  "text": "Parentheses can be safely added to expressions to clarify precedence Learn more...",
                  "markdown": "Parentheses can be safely added to expressions to clarify precedence [Learn more...](https://www.jetbrains.com/help/rider/ArrangeMissingParentheses.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerSecurityInsecureAPIVfork",
                "shortDescription": {
                  "text": "security.insecureAPI.vfork clang static analyzer check"
                },
                "fullDescription": {
                  "text": "security.insecureAPI.vfork clang static analyzer check. Learn more...",
                  "markdown": "security.insecureAPI.vfork clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppTabsOutsideIndent",
                "shortDescription": {
                  "text": "Incorrect spacing (tabs are prohibited except for indentation)"
                },
                "fullDescription": {
                  "text": "Tabs are prohibited except for indentation",
                  "markdown": "Tabs are prohibited except for indentation"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCoreFoundationCFRetainRelease",
                "shortDescription": {
                  "text": "osx.coreFoundation.CFRetainRelease clang static analyzer check"
                },
                "fullDescription": {
                  "text": "osx.coreFoundation.CFRetainRelease clang static analyzer check. Learn more...",
                  "markdown": "osx.coreFoundation.CFRetainRelease clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedMemberInSuper.Global",
                "shortDescription": {
                  "text": "Type member is never accessed via base type (non-private accessibility)"
                },
                "fullDescription": {
                  "text": "Type member is never used with base type or interface, it is always accessed via more specific type",
                  "markdown": "Type member is never used with base type or interface, it is always accessed via more specific type"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeDeprecatedIosBaseAliases",
                "shortDescription": {
                  "text": "modernize-deprecated-ios-base-aliases clang-tidy check"
                },
                "fullDescription": {
                  "text": "modernize-deprecated-ios-base-aliases clang-tidy check. Learn more...",
                  "markdown": "modernize-deprecated-ios-base-aliases clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/deprecated-ios-base-aliases.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInstantiationAfterSpecialization",
                "shortDescription": {
                  "text": "instantiation-after-specialization clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Winstantiation-after-specialization clang diagnostic. Learn more...",
                  "markdown": "-Winstantiation-after-specialization clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#winstantiation-after-specialization)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithSingleCallToLastOrDefault",
                "shortDescription": {
                  "text": "Replace with single call to LastOrDefault(..)"
                },
                "fullDescription": {
                  "text": "$seq$.Where($x$ => $expr$).LastOrDefault()",
                  "markdown": "$seq$.Where($x$ =\\> $expr$).LastOrDefault()"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SeparateControlTransferStatement",
                "shortDescription": {
                  "text": "Separate control transfer statement with blank line"
                },
                "fullDescription": {
                  "text": "Introduce vertical spacing to highlight control transfer statement",
                  "markdown": "Introduce vertical spacing to highlight control transfer statement"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticC99Extensions",
                "shortDescription": {
                  "text": "c99-extensions clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wc99-extensions clang diagnostic. Learn more...",
                  "markdown": "-Wc99-extensions clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wc99-extensions)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesInitVariables",
                "shortDescription": {
                  "text": "cppcoreguidelines-init-variables clang-tidy check"
                },
                "fullDescription": {
                  "text": "cppcoreguidelines-init-variables clang-tidy check. Learn more...",
                  "markdown": "cppcoreguidelines-init-variables clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/init-variables.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RiderSecurityErrorsInspection",
                "shortDescription": {
                  "text": "Rider project security errors"
                },
                "fullDescription": {
                  "text": "Reports potential security errors detected by Rider.",
                  "markdown": "Reports potential security errors detected by Rider."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPassFailed",
                "shortDescription": {
                  "text": "pass-failed clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wpass-failed clang diagnostic. Learn more...",
                  "markdown": "-Wpass-failed clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wpass-failed)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpinLockInReadonlyField",
                "shortDescription": {
                  "text": "Do not store SpinLock in readonly field"
                },
                "fullDescription": {
                  "text": "SpinLock should not be stored in readonly field because it is a struct and is copied when an instance method is called on it Learn more...",
                  "markdown": "SpinLock should not be stored in readonly field because it is a struct and is copied when an instance method is called on it [Learn more...](https://www.jetbrains.com/help/rider/SpinLockInReadonlyField.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticEnumEnumConversion",
                "shortDescription": {
                  "text": "enum-enum-conversion clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wenum-enum-conversion clang diagnostic. Learn more...",
                  "markdown": "-Wenum-enum-conversion clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wenum-enum-conversion)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MergeSequentialChecks",
                "shortDescription": {
                  "text": "Merge sequential checks into single conditional access check"
                },
                "fullDescription": {
                  "text": "Merge sequential null/type checks in && or || expressions into single conditional access check Learn more...",
                  "markdown": "Merge sequential null/type checks in \\&\\& or \\|\\| expressions into single conditional access check [Learn more...](https://www.jetbrains.com/help/rider/MergeSequentialChecks.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSuggestOverride",
                "shortDescription": {
                  "text": "suggest-override clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wsuggest-override clang diagnostic. Learn more...",
                  "markdown": "-Wsuggest-override clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wsuggest-override)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppDefaultInitializationWithNoUserConstructor",
                "shortDescription": {
                  "text": "Default initialization of a const-qualified object of a type without a user-provided default constructor"
                },
                "fullDescription": {
                  "text": "Default initialization of a const-qualified object of a type without a user-provided default constructor",
                  "markdown": "Default initialization of a const-qualified object of a type without a user-provided default constructor"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FSharpBuiltinFunctionReimplementation",
                "shortDescription": {
                  "text": "Lambda expression can be replaced with built-in function"
                },
                "fullDescription": {
                  "text": "Lambda expression can be replaced with built-in function.",
                  "markdown": "Lambda expression can be replaced with built-in function."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUseTypeTraitAlias",
                "shortDescription": {
                  "text": "Type trait can be simplified using a template alias or a variable template"
                },
                "fullDescription": {
                  "text": "A type trait can be simplified using a template alias or a variable template",
                  "markdown": "A type trait can be simplified using a template alias or a variable template"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MemberHidesInterfaceMemberWithDefaultImplementation",
                "shortDescription": {
                  "text": "Non-public member in implementation  class hides default implementation in interface"
                },
                "fullDescription": {
                  "text": "Member with the same signature and default implementation exists in an implemented interface",
                  "markdown": "Member with the same signature and default implementation exists in an implemented interface"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCoroutineMissingUnhandledException",
                "shortDescription": {
                  "text": "coroutine-missing-unhandled-exception clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wcoroutine-missing-unhandled-exception clang diagnostic. Learn more...",
                  "markdown": "-Wcoroutine-missing-unhandled-exception clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wcoroutine-missing-unhandled-exception)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSwitchEnum",
                "shortDescription": {
                  "text": "switch-enum clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wswitch-enum clang diagnostic. Learn more...",
                  "markdown": "-Wswitch-enum clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wswitch-enum)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.RedundantEventFunction",
                "shortDescription": {
                  "text": "Redundant Unity event function"
                },
                "fullDescription": {
                  "text": "Empty Unity event functions are still called from native code, which affects performance. Learn more...",
                  "markdown": "Empty Unity event functions are still called from native code, which affects performance. [Learn more...](https://github.com/JetBrains/resharper-unity/wiki/Redundant-Unity-event-function)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNullDereference",
                "shortDescription": {
                  "text": "null-dereference clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wnull-dereference clang diagnostic. Learn more...",
                  "markdown": "-Wnull-dereference clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wnull-dereference)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticJumpSehFinally",
                "shortDescription": {
                  "text": "jump-seh-finally clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wjump-seh-finally clang diagnostic. Learn more...",
                  "markdown": "-Wjump-seh-finally clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wjump-seh-finally)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnknownWarningOption",
                "shortDescription": {
                  "text": "unknown-warning-option clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunknown-warning-option clang diagnostic. Learn more...",
                  "markdown": "-Wunknown-warning-option clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunknown-warning-option)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSourceUsesOpenmp",
                "shortDescription": {
                  "text": "source-uses-openmp clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wsource-uses-openmp clang diagnostic. Learn more...",
                  "markdown": "-Wsource-uses-openmp clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wsource-uses-openmp)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppPointerToIntegralConversion",
                "shortDescription": {
                  "text": "Implicit pointer to integer conversion"
                },
                "fullDescription": {
                  "text": "Implicit pointer to integer conversion",
                  "markdown": "Implicit pointer to integer conversion"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VariableCanBeNotNullable",
                "shortDescription": {
                  "text": "Variable can be declared as non-nullable"
                },
                "fullDescription": {
                  "text": "Variable is declared as nullable but only never contains a nullable value",
                  "markdown": "Variable is declared as nullable but only never contains a nullable value"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ShiftExpressionRealShiftCountIsZero",
                "shortDescription": {
                  "text": "Actual shift count equals zero"
                },
                "fullDescription": {
                  "text": "Actual shift count equals zero. Left operand will remain unchanged.",
                  "markdown": "Actual shift count equals zero. Left operand will remain unchanged."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ResxNotResolved",
                "shortDescription": {
                  "text": "Cannot resolve symbol"
                },
                "fullDescription": {
                  "text": "Cannot resolve symbol.",
                  "markdown": "Cannot resolve symbol."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticBitwiseConditionalParentheses",
                "shortDescription": {
                  "text": "bitwise-conditional-parentheses clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wbitwise-conditional-parentheses clang diagnostic. Learn more...",
                  "markdown": "-Wbitwise-conditional-parentheses clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wbitwise-conditional-parentheses)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAndroidCloexecPipe",
                "shortDescription": {
                  "text": "android-cloexec-pipe clang-tidy check"
                },
                "fullDescription": {
                  "text": "android-cloexec-pipe clang-tidy check. Learn more...",
                  "markdown": "android-cloexec-pipe clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/android/cloexec-pipe.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantEmptyObjectCreationArgumentList",
                "shortDescription": {
                  "text": "Redundant empty argument list on object creation expression"
                },
                "fullDescription": {
                  "text": "When object creation uses object or collection initializer, empty argument list is redundant",
                  "markdown": "When object creation uses object or collection initializer, empty argument list is redundant"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.AssignNullToNotNullAttribute",
                "shortDescription": {
                  "text": "Possible 'null' assignment to non-nullable entity"
                },
                "fullDescription": {
                  "text": "An expression which can have 'null' value is assigned to an entity marked with 'Value cannot be null' attribute. In particular, this can happen when passing such value to a method whose parameter is marked with 'Value cannot be null' attribute.",
                  "markdown": "An expression which can have 'null' value is assigned to an entity marked with 'Value cannot be null' attribute. In particular, this can happen when passing such value to a method whose parameter is marked with 'Value cannot be null' attribute."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Constraints Violations",
                      "index": 43,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSizeofPointerDiv",
                "shortDescription": {
                  "text": "sizeof-pointer-div clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wsizeof-pointer-div clang diagnostic. Learn more...",
                  "markdown": "-Wsizeof-pointer-div clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wsizeof-pointer-div)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyMpiBufferDeref",
                "shortDescription": {
                  "text": "mpi-buffer-deref clang-tidy check"
                },
                "fullDescription": {
                  "text": "mpi-buffer-deref clang-tidy check. Learn more...",
                  "markdown": "mpi-buffer-deref clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/mpi/buffer-deref.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFormatNonliteral",
                "shortDescription": {
                  "text": "format-nonliteral clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wformat-nonliteral clang diagnostic. Learn more...",
                  "markdown": "-Wformat-nonliteral clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wformat-nonliteral)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantTernaryExpression",
                "shortDescription": {
                  "text": "Redundant conditional ternary expression usage"
                },
                "fullDescription": {
                  "text": "Redundant conditional ternary expression usage: \r\n  condition ? true : false",
                  "markdown": "Redundant conditional ternary expression usage:\n\n```\n\r\n  condition ? true : false\r\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAndroidCloexecDup",
                "shortDescription": {
                  "text": "android-cloexec-dup clang-tidy check"
                },
                "fullDescription": {
                  "text": "android-cloexec-dup clang-tidy check. Learn more...",
                  "markdown": "android-cloexec-dup clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/android/cloexec-dup.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConditionalAccessQualifierIsNonNullableAccordingToAPIContract",
                "shortDescription": {
                  "text": "Conditional access qualifier expression is not null according to nullable reference types' annotations"
                },
                "fullDescription": {
                  "text": "Conditional access qualifier expression is not null according to nullable reference types' annotations",
                  "markdown": "Conditional access qualifier expression is not null according to nullable reference types' annotations"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityQualifiedAuto",
                "shortDescription": {
                  "text": "readability-qualified-auto clang-tidy check"
                },
                "fullDescription": {
                  "text": "readability-qualified-auto clang-tidy check. Learn more...",
                  "markdown": "readability-qualified-auto clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/qualified-auto.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSelector",
                "shortDescription": {
                  "text": "selector clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wselector clang diagnostic. Learn more...",
                  "markdown": "-Wselector clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wselector)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppSmartPointerVsMakeFunction",
                "shortDescription": {
                  "text": "Constructor of smart pointer is used instead of its make function"
                },
                "fullDescription": {
                  "text": "Constructor of a smart pointer (boost/std::shared_ptr/unique_ptr) is used instead of the corresponding make_shared/make_unique. Make functions are exception-safe and more efficient.",
                  "markdown": "Constructor of a smart pointer (boost/std::shared_ptr/unique_ptr) is used instead of the corresponding make_shared/make_unique. Make functions are exception-safe and more efficient."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticStringPlusChar",
                "shortDescription": {
                  "text": "string-plus-char clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wstring-plus-char clang diagnostic. Learn more...",
                  "markdown": "-Wstring-plus-char clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wstring-plus-char)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppStaticSpecifierOnAnonymousNamespaceMember",
                "shortDescription": {
                  "text": "Redundant 'static' specifier on an anonymous namespace member"
                },
                "fullDescription": {
                  "text": "Redundant 'static' specifier on an anonymous namespace member",
                  "markdown": "Redundant 'static' specifier on an anonymous namespace member"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticShiftCountOverflow",
                "shortDescription": {
                  "text": "shift-count-overflow clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wshift-count-overflow clang diagnostic. Learn more...",
                  "markdown": "-Wshift-count-overflow clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wshift-count-overflow)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCppCompat",
                "shortDescription": {
                  "text": "c++-compat clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wc++-compat clang diagnostic. Learn more...",
                  "markdown": "-Wc++-compat clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wc--compat)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInvalidTokenPaste",
                "shortDescription": {
                  "text": "invalid-token-paste clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Winvalid-token-paste clang diagnostic. Learn more...",
                  "markdown": "-Winvalid-token-paste clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#winvalid-token-paste)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp11ExtraSemi",
                "shortDescription": {
                  "text": "c++11-extra-semi clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wc++11-extra-semi clang diagnostic. Learn more...",
                  "markdown": "-Wc++11-extra-semi clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wc-11-extra-semi)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNonportableVectorInitialization",
                "shortDescription": {
                  "text": "nonportable-vector-initialization clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wnonportable-vector-initialization clang diagnostic. Learn more...",
                  "markdown": "-Wnonportable-vector-initialization clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wnonportable-vector-initialization)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.RedundantBindingModeAttribute",
                "shortDescription": {
                  "text": "Binding mode is equal to default"
                },
                "fullDescription": {
                  "text": "Binding mode is equal to default",
                  "markdown": "Binding mode is equal to default"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBWarnings__WME006",
                "shortDescription": {
                  "text": "Namespace should be default namespace of this project"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBadDeclarationBracesLineBreaks",
                "shortDescription": {
                  "text": "Incorrect line breaks (around declaration braces)"
                },
                "fullDescription": {
                  "text": "Around declaration braces",
                  "markdown": "Around declaration braces"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityNonConstParameter",
                "shortDescription": {
                  "text": "readability-non-const-parameter clang-tidy check"
                },
                "fullDescription": {
                  "text": "readability-non-const-parameter clang-tidy check. Learn more...",
                  "markdown": "readability-non-const-parameter clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/non-const-parameter.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneDanglingHandle",
                "shortDescription": {
                  "text": "bugprone-dangling-handle clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-dangling-handle clang-tidy check. Learn more...",
                  "markdown": "bugprone-dangling-handle clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/dangling-handle.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftDrectveSection",
                "shortDescription": {
                  "text": "microsoft-drectve-section clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmicrosoft-drectve-section clang diagnostic. Learn more...",
                  "markdown": "-Wmicrosoft-drectve-section clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-drectve-section)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDocumentationHtml",
                "shortDescription": {
                  "text": "documentation-html clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdocumentation-html clang diagnostic. Learn more...",
                  "markdown": "-Wdocumentation-html clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdocumentation-html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSuspiciousBzero",
                "shortDescription": {
                  "text": "suspicious-bzero clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wsuspicious-bzero clang diagnostic. Learn more...",
                  "markdown": "-Wsuspicious-bzero clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wsuspicious-bzero)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerSecurityFloatLoopCounter",
                "shortDescription": {
                  "text": "security.FloatLoopCounter clang static analyzer check"
                },
                "fullDescription": {
                  "text": "security.FloatLoopCounter clang static analyzer check. Learn more...",
                  "markdown": "security.FloatLoopCounter clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithSingleAssignment.True",
                "shortDescription": {
                  "text": "Replace with single assignment"
                },
                "fullDescription": {
                  "text": "$T$ $x$ = true; if($bool1$) $x$ = false; Learn more...",
                  "markdown": "$T$ $x$ = true; if($bool1$) $x$ = false; [Learn more...](https://www.jetbrains.com/help/rider/ReplaceWithSingleAssignment.True.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OptionalParameterHierarchyMismatch",
                "shortDescription": {
                  "text": "Mismatch of optional parameter value in overridden method"
                },
                "fullDescription": {
                  "text": "Mismatch of optional parameter value in overridden method",
                  "markdown": "Mismatch of optional parameter value in overridden method"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticVla",
                "shortDescription": {
                  "text": "vla clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wvla clang diagnostic. Learn more...",
                  "markdown": "-Wvla clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wvla)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantBooleanExpressionArgument",
                "shortDescription": {
                  "text": "Redundant argument in conditional expression"
                },
                "fullDescription": {
                  "text": "Redundant argument in conditional expression",
                  "markdown": "Redundant argument in conditional expression"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticBuiltinRequiresHeader",
                "shortDescription": {
                  "text": "builtin-requires-header clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wbuiltin-requires-header clang diagnostic. Learn more...",
                  "markdown": "-Wbuiltin-requires-header clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wbuiltin-requires-header)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StackAllocInsideLoop",
                "shortDescription": {
                  "text": "Using stackalloc inside loop"
                },
                "fullDescription": {
                  "text": "Memory stack allocation inside a loop can cause a temporary memory leak because the allocated memory is freed only when the method returns",
                  "markdown": "Memory stack allocation inside a loop can cause a temporary memory leak because the allocated memory is freed only when the method returns"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCoreCallAndMessage",
                "shortDescription": {
                  "text": "core.CallAndMessage clang static analyzer check"
                },
                "fullDescription": {
                  "text": "core.CallAndMessage clang static analyzer check. Learn more...",
                  "markdown": "core.CallAndMessage clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CDeclarationWithImplicitIntType",
                "shortDescription": {
                  "text": "Type-specifier missing, defaults to int"
                },
                "fullDescription": {
                  "text": "No type-specifier found in a declaration. Defaults to 'int'.",
                  "markdown": "No type-specifier found in a declaration. Defaults to 'int'."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.RangeStepSignMismatch",
                "shortDescription": {
                  "text": "NUnit. Mismatch of the range step sign."
                },
                "fullDescription": {
                  "text": "NUnit. The sign of the 'step' parameter of [Range] does not match the range values. Learn more...",
                  "markdown": "NUnit. The sign of the 'step' parameter of \\[Range\\] does not match the range values. [Learn more...](https://www.jetbrains.com/help/rider/NUnit.RangeStepSignMismatch.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantNamespaceDefinition",
                "shortDescription": {
                  "text": "Namespace definition containing single class specialization"
                },
                "fullDescription": {
                  "text": "Don't introduce a namespace definition only for class specialization, specialization can be defined using qualified class name",
                  "markdown": "Don't introduce a namespace definition only for class specialization, specialization can be defined using qualified class name"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppStringLiteralToCharPointerConversion",
                "shortDescription": {
                  "text": "String literal to char pointer conversion"
                },
                "fullDescription": {
                  "text": "String literal to char pointer conversion",
                  "markdown": "String literal to char pointer conversion"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticImplicitFallthroughPerFunction",
                "shortDescription": {
                  "text": "implicit-fallthrough-per-function clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wimplicit-fallthrough-per-function clang diagnostic. Learn more...",
                  "markdown": "-Wimplicit-fallthrough-per-function clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-fallthrough-per-function)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDynamicClassMemaccess",
                "shortDescription": {
                  "text": "dynamic-class-memaccess clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdynamic-class-memaccess clang diagnostic. Learn more...",
                  "markdown": "-Wdynamic-class-memaccess clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdynamic-class-memaccess)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantAccessorBody",
                "shortDescription": {
                  "text": "Redundant accessor body"
                },
                "fullDescription": {
                  "text": "Accessor body with simple 'field' keyword return or assignment is redundant",
                  "markdown": "Accessor body with simple 'field' keyword return or assignment is redundant"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCompoundTokenSplitByMacro",
                "shortDescription": {
                  "text": "compound-token-split-by-macro clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wcompound-token-split-by-macro clang diagnostic. Learn more...",
                  "markdown": "-Wcompound-token-split-by-macro clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wcompound-token-split-by-macro)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNewReturnsNull",
                "shortDescription": {
                  "text": "new-returns-null clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wnew-returns-null clang diagnostic. Learn more...",
                  "markdown": "-Wnew-returns-null clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wnew-returns-null)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppNotAllPathsReturnValue",
                "shortDescription": {
                  "text": "Not all control paths return a value"
                },
                "fullDescription": {
                  "text": "Not all control paths inside a function or a lambda return a value",
                  "markdown": "Not all control paths inside a function or a lambda return a value"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WebConfig.UnusedRemoveOrClearTag",
                "shortDescription": {
                  "text": "Redundant remove or clear element"
                },
                "fullDescription": {
                  "text": "Element does not clear anything and can be safely removed",
                  "markdown": "Element does not clear anything and can be safely removed"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppEnforceDoStatementBraces",
                "shortDescription": {
                  "text": "Use preferred braces style (enforce braces in 'do-while' statement)"
                },
                "fullDescription": {
                  "text": "Use braces to separate 'do-while' statement body",
                  "markdown": "Use braces to separate 'do-while' statement body"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnusedVolatileLvalue",
                "shortDescription": {
                  "text": "unused-volatile-lvalue clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunused-volatile-lvalue clang diagnostic. Learn more...",
                  "markdown": "-Wunused-volatile-lvalue clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-volatile-lvalue)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyLlvmNamespaceComment",
                "shortDescription": {
                  "text": "llvm-namespace-comment clang-tidy check"
                },
                "fullDescription": {
                  "text": "llvm-namespace-comment clang-tidy check. Learn more...",
                  "markdown": "llvm-namespace-comment clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/llvm/namespace-comment.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnsupportedAvailabilityGuard",
                "shortDescription": {
                  "text": "unsupported-availability-guard clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunsupported-availability-guard clang diagnostic. Learn more...",
                  "markdown": "-Wunsupported-availability-guard clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunsupported-availability-guard)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnsupportedCb",
                "shortDescription": {
                  "text": "unsupported-cb clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunsupported-cb clang diagnostic. Learn more...",
                  "markdown": "-Wunsupported-cb clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunsupported-cb)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FSharpExpressionCanBeReplacedWithCondition",
                "shortDescription": {
                  "text": "'if' expression can be replaced with its condition"
                },
                "fullDescription": {
                  "text": "'if' expression can be replaced with its condition.",
                  "markdown": "'if' expression can be replaced with its condition."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MultipleOrderBy",
                "shortDescription": {
                  "text": "Multiple sequential 'OrderBy' invocation"
                },
                "fullDescription": {
                  "text": "Multiple sequential 'OrderBy' invocation is meaningless, probably 'ThenBy' is implied",
                  "markdown": "Multiple sequential 'OrderBy' invocation is meaningless, probably 'ThenBy' is implied"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticBuiltinMemcpyChkSize",
                "shortDescription": {
                  "text": "builtin-memcpy-chk-size clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wbuiltin-memcpy-chk-size clang diagnostic. Learn more...",
                  "markdown": "-Wbuiltin-memcpy-chk-size clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wbuiltin-memcpy-chk-size)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyDarwinAvoidSpinlock",
                "shortDescription": {
                  "text": "darwin-avoid-spinlock clang-tidy check"
                },
                "fullDescription": {
                  "text": "darwin-avoid-spinlock clang-tidy check. Learn more...",
                  "markdown": "darwin-avoid-spinlock clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/darwin/avoid-spinlock.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticExplicitInitializeCall",
                "shortDescription": {
                  "text": "explicit-initialize-call clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wexplicit-initialize-call clang diagnostic. Learn more...",
                  "markdown": "-Wexplicit-initialize-call clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wexplicit-initialize-call)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyGoogleDefaultArguments",
                "shortDescription": {
                  "text": "google-default-arguments clang-tidy check"
                },
                "fullDescription": {
                  "text": "google-default-arguments clang-tidy check. Learn more...",
                  "markdown": "google-default-arguments clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/default-arguments.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuFlexibleArrayInitializer",
                "shortDescription": {
                  "text": "gnu-flexible-array-initializer clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wgnu-flexible-array-initializer clang diagnostic. Learn more...",
                  "markdown": "-Wgnu-flexible-array-initializer clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-flexible-array-initializer)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppReturnNoValueInNonVoidFunction",
                "shortDescription": {
                  "text": "A function or a lambda with non-void return type should return a value"
                },
                "fullDescription": {
                  "text": "A function or a lambda with non-void return type should return a value",
                  "markdown": "A function or a lambda with non-void return type should return a value"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUndefinedInternal",
                "shortDescription": {
                  "text": "undefined-internal clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wundefined-internal clang diagnostic. Learn more...",
                  "markdown": "-Wundefined-internal clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wundefined-internal)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LocalizableElement",
                "shortDescription": {
                  "text": "Element is localizable"
                },
                "fullDescription": {
                  "text": "You can move this element to a resource Learn more...",
                  "markdown": "You can move this element to a resource [Learn more...](https://www.jetbrains.com/help/rider/LocalizableElement.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPropertyAttributeMismatch",
                "shortDescription": {
                  "text": "property-attribute-mismatch clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wproperty-attribute-mismatch clang diagnostic. Learn more...",
                  "markdown": "-Wproperty-attribute-mismatch clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wproperty-attribute-mismatch)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppLocalVariableWithNonTrivialDtorIsNeverUsed",
                "shortDescription": {
                  "text": "Local variable is never used, but may have side-effects in its destructor"
                },
                "fullDescription": {
                  "text": "Local variable is never used, but may have side-effects in its destructor",
                  "markdown": "Local variable is never used, but may have side-effects in its destructor"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertOop58Cpp",
                "shortDescription": {
                  "text": "cert-oop58-cpp clang-tidy check"
                },
                "fullDescription": {
                  "text": "cert-oop58-cpp clang-tidy check. Learn more...",
                  "markdown": "cert-oop58-cpp clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/oop58-cpp.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticC2xExtensions",
                "shortDescription": {
                  "text": "c2x-extensions clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wc2x-extensions clang diagnostic. Learn more...",
                  "markdown": "-Wc2x-extensions clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wc2x-extensions)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBadExpressionBracesLineBreaks",
                "shortDescription": {
                  "text": "Incorrect line breaks (around expression braces)"
                },
                "fullDescription": {
                  "text": "Around expression braces",
                  "markdown": "Around expression braces"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticShadow",
                "shortDescription": {
                  "text": "shadow clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wshadow clang diagnostic. Learn more...",
                  "markdown": "-Wshadow clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wshadow)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CanSimplifyDictionaryLookupWithTryGetValue",
                "shortDescription": {
                  "text": "Can simplify dictionary lookup with 'TryGetValue' method"
                },
                "fullDescription": {
                  "text": "Can simplify dictionary lookup with 'TryGetValue' method",
                  "markdown": "Can simplify dictionary lookup with 'TryGetValue' method"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticOverAligned",
                "shortDescription": {
                  "text": "over-aligned clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wover-aligned clang diagnostic. Learn more...",
                  "markdown": "-Wover-aligned clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wover-aligned)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppVariableCanBeMadeConstexpr",
                "shortDescription": {
                  "text": "Variable can be made constexpr"
                },
                "fullDescription": {
                  "text": "Variable can be made constexpr",
                  "markdown": "Variable can be made constexpr"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InlineTemporaryVariable",
                "shortDescription": {
                  "text": "Inline temporary variable"
                },
                "fullDescription": {
                  "text": "Inline temporary variable initialized with a value of other variable/parameter to reduce the amount of different names used to reference the same value",
                  "markdown": "Inline temporary variable initialized with a value of other variable/parameter to reduce the amount of different names used to reference the same value"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnderalignedExceptionObject",
                "shortDescription": {
                  "text": "underaligned-exception-object clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunderaligned-exception-object clang diagnostic. Learn more...",
                  "markdown": "-Wunderaligned-exception-object clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunderaligned-exception-object)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppAbstractFinalClass",
                "shortDescription": {
                  "text": "Abstract final class"
                },
                "fullDescription": {
                  "text": "An abstract final class is marked as 'final' or 'sealed'",
                  "markdown": "An abstract final class is marked as 'final' or 'sealed'"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StaticMemberInitializerReferesToMemberBelow",
                "shortDescription": {
                  "text": "Static member initializer refers to static member below or in other part"
                },
                "fullDescription": {
                  "text": "Static field/auto-property/event initializer refers to a static field/auto-property/event below or in another part",
                  "markdown": "Static field/auto-property/event initializer refers to a static field/auto-property/event below or in another part"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUsingResultOfAssignmentAsCondition",
                "shortDescription": {
                  "text": "Result of assignment is used as condition"
                },
                "fullDescription": {
                  "text": "Result of assignment is used as condition",
                  "markdown": "Result of assignment is used as condition"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RouteTemplates.ControllerRouteParameterIsNotPassedToMethods",
                "shortDescription": {
                  "text": "Controller's route parameter can be passed to methods"
                },
                "fullDescription": {
                  "text": "Controller's route parameter can be passed to methods",
                  "markdown": "Controller's route parameter can be passed to methods"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EqualExpressionComparison",
                "shortDescription": {
                  "text": "Similar expressions comparison"
                },
                "fullDescription": {
                  "text": "Compare to similar expression for equality is usually senseless",
                  "markdown": "Compare to similar expression for equality is usually senseless"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFloatZeroConversion",
                "shortDescription": {
                  "text": "float-zero-conversion clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wfloat-zero-conversion clang diagnostic. Learn more...",
                  "markdown": "-Wfloat-zero-conversion clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wfloat-zero-conversion)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantBaseClassInitializer",
                "shortDescription": {
                  "text": "Redundant base class initializer"
                },
                "fullDescription": {
                  "text": "Redundant base class initializer in a member initializer list.",
                  "markdown": "Redundant base class initializer in a member initializer list."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSizeofPointerMemaccess",
                "shortDescription": {
                  "text": "sizeof-pointer-memaccess clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wsizeof-pointer-memaccess clang diagnostic. Learn more...",
                  "markdown": "-Wsizeof-pointer-memaccess clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wsizeof-pointer-memaccess)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneSuspiciousEnumUsage",
                "shortDescription": {
                  "text": "bugprone-suspicious-enum-usage clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-suspicious-enum-usage clang-tidy check. Learn more...",
                  "markdown": "bugprone-suspicious-enum-usage clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/suspicious-enum-usage.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPsabi",
                "shortDescription": {
                  "text": "psabi clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wpsabi clang diagnostic. Learn more...",
                  "markdown": "-Wpsabi clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wpsabi)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantEmptyObjectOrCollectionInitializer",
                "shortDescription": {
                  "text": "Redundant empty object or collection initializer"
                },
                "fullDescription": {
                  "text": "Redundant empty object or collection initializer",
                  "markdown": "Redundant empty object or collection initializer"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnknownArgument",
                "shortDescription": {
                  "text": "unknown-argument clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunknown-argument clang diagnostic. Learn more...",
                  "markdown": "-Wunknown-argument clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunknown-argument)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppUseNullptr",
                "shortDescription": {
                  "text": "hicpp-use-nullptr clang-tidy check"
                },
                "fullDescription": {
                  "text": "hicpp-use-nullptr clang-tidy check. Learn more...",
                  "markdown": "hicpp-use-nullptr clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/use-nullptr.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseNullableReferenceTypesAnnotationSyntax",
                "shortDescription": {
                  "text": "Use type annotation syntax"
                },
                "fullDescription": {
                  "text": "Replace nullness attributes such as [CanBeNull] or [ItemCanBeNull] with nullable reference types' annotation syntax",
                  "markdown": "Replace nullness attributes such as \\[CanBeNull\\] or \\[ItemCanBeNull\\] with nullable reference types' annotation syntax"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IntVariableOverflowInCheckedContext",
                "shortDescription": {
                  "text": "Possible overflow in checked context"
                },
                "fullDescription": {
                  "text": "Possible overflow in checked context",
                  "markdown": "Possible overflow in checked context"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPreCpp20CompatPedantic",
                "shortDescription": {
                  "text": "pre-c++20-compat-pedantic clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wpre-c++20-compat-pedantic clang diagnostic. Learn more...",
                  "markdown": "-Wpre-c++20-compat-pedantic clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wpre-c-20-compat-pedantic)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClassCanBeSealed.Local",
                "shortDescription": {
                  "text": "Class can be made sealed (non-inheritable) (private accessibility)"
                },
                "fullDescription": {
                  "text": "Class has no inheritors and can be marked sealed (non-inheritable)",
                  "markdown": "Class has no inheritors and can be marked sealed (non-inheritable)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FunctionRecursiveOnAllPaths",
                "shortDescription": {
                  "text": "Function is recursive on all execution paths"
                },
                "fullDescription": {
                  "text": "Function or type initialization is recursive on all execution paths",
                  "markdown": "Function or type initialization is recursive on all execution paths"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.PreferGenericMethodOverload",
                "shortDescription": {
                  "text": "String based lookup of component type is inefficient"
                },
                "fullDescription": {
                  "text": "Using a string type name to look up a component is slower than specifying the type as a generic type parameter Learn more...",
                  "markdown": "Using a string type name to look up a component is slower than specifying the type as a generic type parameter [Learn more...](https://github.com/JetBrains/resharper-unity/wiki/Prefer-using-generic-method-overload-instead-of-string)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TabsAreDisallowed",
                "shortDescription": {
                  "text": "Usage of tabulation character for indentation is prohibited"
                },
                "fullDescription": {
                  "text": "Use this inspection to prohibit use of tabulation character for code indentation",
                  "markdown": "Use this inspection to prohibit use of tabulation character for code indentation"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticStringConcatenation",
                "shortDescription": {
                  "text": "string-concatenation clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wstring-concatenation clang diagnostic. Learn more...",
                  "markdown": "-Wstring-concatenation clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wstring-concatenation)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppPrecompiledHeaderIsNotIncluded",
                "shortDescription": {
                  "text": "Precompiled header is not included"
                },
                "fullDescription": {
                  "text": "Precompiled header must be included at the top of source file",
                  "markdown": "Precompiled header must be included at the top of source file"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppNoDiscardExpression",
                "shortDescription": {
                  "text": "Result of nodiscard function is not used"
                },
                "fullDescription": {
                  "text": "Result of nodiscard function is not used",
                  "markdown": "Result of nodiscard function is not used"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuStatementExpressionFromMacroExpansion",
                "shortDescription": {
                  "text": "gnu-statement-expression-from-macro-expansion clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wgnu-statement-expression-from-macro-expansion clang diagnostic. Learn more...",
                  "markdown": "-Wgnu-statement-expression-from-macro-expansion clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-statement-expression-from-macro-expansion)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantParentheses",
                "shortDescription": {
                  "text": "Remove redundant parentheses"
                },
                "fullDescription": {
                  "text": "Parentheses can be safely removed from expressions without changing code semantics",
                  "markdown": "Parentheses can be safely removed from expressions without changing code semantics"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedMemberInSuper.Local",
                "shortDescription": {
                  "text": "Type member is never accessed via base type (private accessibility)"
                },
                "fullDescription": {
                  "text": "Type member is never used with base type or interface, it is always accessed via more specific type",
                  "markdown": "Type member is never used with base type or interface, it is always accessed via more specific type"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticVlaExtension",
                "shortDescription": {
                  "text": "vla-extension clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wvla-extension clang diagnostic. Learn more...",
                  "markdown": "-Wvla-extension clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wvla-extension)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesProTypeStaticCastDowncast",
                "shortDescription": {
                  "text": "cppcoreguidelines-pro-type-static-cast-downcast clang-tidy check"
                },
                "fullDescription": {
                  "text": "cppcoreguidelines-pro-type-static-cast-downcast clang-tidy check. Learn more...",
                  "markdown": "cppcoreguidelines-pro-type-static-cast-downcast clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/pro-type-static-cast-downcast.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CompareOfFloatsByEqualityOperator",
                "shortDescription": {
                  "text": "Equality comparison of floating point numbers"
                },
                "fullDescription": {
                  "text": "Equality comparison of floating point numbers Learn more...",
                  "markdown": "Equality comparison of floating point numbers [Learn more...](https://www.jetbrains.com/help/rider/CompareOfFloatsByEqualityOperator.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityDuplicateInclude",
                "shortDescription": {
                  "text": "readability-duplicate-include clang-tidy check"
                },
                "fullDescription": {
                  "text": "readability-duplicate-include clang-tidy check. Learn more...",
                  "markdown": "readability-duplicate-include clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/duplicate-include.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertDcl03C",
                "shortDescription": {
                  "text": "cert-dcl03-c clang-tidy check"
                },
                "fullDescription": {
                  "text": "cert-dcl03-c clang-tidy check. Learn more...",
                  "markdown": "cert-dcl03-c clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/dcl03-c.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnreachableCodeGenericAssoc",
                "shortDescription": {
                  "text": "unreachable-code-generic-assoc clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunreachable-code-generic-assoc clang diagnostic. Learn more...",
                  "markdown": "-Wunreachable-code-generic-assoc clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunreachable-code-generic-assoc)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertDcl54Cpp",
                "shortDescription": {
                  "text": "cert-dcl54-cpp clang-tidy check"
                },
                "fullDescription": {
                  "text": "cert-dcl54-cpp clang-tidy check. Learn more...",
                  "markdown": "cert-dcl54-cpp clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/dcl54-cpp.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMissingFieldInitializers",
                "shortDescription": {
                  "text": "missing-field-initializers clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmissing-field-initializers clang diagnostic. Learn more...",
                  "markdown": "-Wmissing-field-initializers clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmissing-field-initializers)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonParsableElement",
                "shortDescription": {
                  "text": "Part of the code cannot be parsed"
                },
                "fullDescription": {
                  "text": "Part of the code cannot be parsed because of deep nesting",
                  "markdown": "Part of the code cannot be parsed because of deep nesting"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MemberInitializerValueIgnored",
                "shortDescription": {
                  "text": "Member initialized value ignored"
                },
                "fullDescription": {
                  "text": "Member initializer value is ignored because the member is always initialized in all constructors Learn more...",
                  "markdown": "Member initializer value is ignored because the member is always initialized in all constructors [Learn more...](https://www.jetbrains.com/help/rider/MemberInitializerValueIgnored.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticConstantLogicalOperand",
                "shortDescription": {
                  "text": "constant-logical-operand clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wconstant-logical-operand clang diagnostic. Learn more...",
                  "markdown": "-Wconstant-logical-operand clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wconstant-logical-operand)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckNamespace",
                "shortDescription": {
                  "text": "Namespace does not correspond to file location"
                },
                "fullDescription": {
                  "text": "Namespace in file does not have a form of 'project Default Namespace plus folder names in the path to the file'. You can configure which folders form the namespace on the folder's Properties page. Learn more...",
                  "markdown": "Namespace in file does not have a form of 'project Default Namespace plus folder names in the path to the file'. You can configure which folders form the namespace on the folder's Properties page. [Learn more...](https://www.jetbrains.com/help/rider/CheckNamespace.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Constraints Violations",
                      "index": 43,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithSingleCallToAny",
                "shortDescription": {
                  "text": "Replace with single call to Any(..)"
                },
                "fullDescription": {
                  "text": "$seq$.Where($x$ => $expr$).Any()",
                  "markdown": "$seq$.Where($x$ =\\> $expr$).Any()"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertToAutoProperty",
                "shortDescription": {
                  "text": "Convert property into auto-property"
                },
                "fullDescription": {
                  "text": "Converts property declaration into C# auto-property syntax Learn more...",
                  "markdown": "Converts property declaration into C# auto-property syntax [Learn more...](https://www.jetbrains.com/help/rider/ConvertToAutoProperty.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NotAccessedOutParameterVariable",
                "shortDescription": {
                  "text": "Non-accessed local variable only used to discard the 'out' parameter value"
                },
                "fullDescription": {
                  "text": "Non-accessed local variable only used to discard the 'out' parameter value",
                  "markdown": "Non-accessed local variable only used to discard the 'out' parameter value"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBUseFirstInstead",
                "shortDescription": {
                  "text": "Use First() instead"
                },
                "fullDescription": {
                  "text": "$enumerable$.FirstOrDefault().$method$(...)",
                  "markdown": "$enumerable$.FirstOrDefault().$method$(...)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RouteTemplates.RouteTokenNotResolved",
                "shortDescription": {
                  "text": "Route token not resolved"
                },
                "fullDescription": {
                  "text": "Route token not resolved",
                  "markdown": "Route token not resolved"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPreCpp14Compat",
                "shortDescription": {
                  "text": "pre-c++14-compat clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wpre-c++14-compat clang diagnostic. Learn more...",
                  "markdown": "-Wpre-c++14-compat clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wpre-c-14-compat)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedVariable.Compiler",
                "shortDescription": {
                  "text": "Unused local variable"
                },
                "fullDescription": {
                  "text": "Local variable is never used (compiler warning)",
                  "markdown": "Local variable is never used (compiler warning)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyGeneralCatchClause",
                "shortDescription": {
                  "text": "Empty general catch clause"
                },
                "fullDescription": {
                  "text": "A catch clause that catches System.Exception and has an empty body Learn more...",
                  "markdown": "A catch clause that catches System.Exception and has an empty body [Learn more...](https://www.jetbrains.com/help/rider/EmptyGeneralCatchClause.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RiderSolutionErrorsInspection",
                "shortDescription": {
                  "text": "Rider toolset and environment errors"
                },
                "fullDescription": {
                  "text": "Reports toolset and environment errors detected by Rider.",
                  "markdown": "Reports toolset and environment errors detected by Rider."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftUnqualifiedFriend",
                "shortDescription": {
                  "text": "microsoft-unqualified-friend clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmicrosoft-unqualified-friend clang diagnostic. Learn more...",
                  "markdown": "-Wmicrosoft-unqualified-friend clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-unqualified-friend)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIgnoredQualifiers",
                "shortDescription": {
                  "text": "ignored-qualifiers clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wignored-qualifiers clang diagnostic. Learn more...",
                  "markdown": "-Wignored-qualifiers clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wignored-qualifiers)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuLineMarker",
                "shortDescription": {
                  "text": "gnu-line-marker clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wgnu-line-marker clang diagnostic. Learn more...",
                  "markdown": "-Wgnu-line-marker clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-line-marker)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PossibleMultipleEnumeration",
                "shortDescription": {
                  "text": "Possible multiple enumeration"
                },
                "fullDescription": {
                  "text": "Possible multiple enumeration of IEnumerable or IAsyncEnumerable Learn more...",
                  "markdown": "Possible multiple enumeration of IEnumerable or IAsyncEnumerable [Learn more...](https://www.jetbrains.com/help/rider/PossibleMultipleEnumeration.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AutoPropertyCanBeMadeGetOnly.Global",
                "shortDescription": {
                  "text": "Auto-property can be made get-only (non-private accessibility)"
                },
                "fullDescription": {
                  "text": "Auto-property has no write usages after initialization and can be made get-only Learn more...",
                  "markdown": "Auto-property has no write usages after initialization and can be made get-only [Learn more...](https://www.jetbrains.com/help/rider/AutoPropertyCanBeMadeGetOnly.Global.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticEnumFloatConversion",
                "shortDescription": {
                  "text": "enum-float-conversion clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wenum-float-conversion clang diagnostic. Learn more...",
                  "markdown": "-Wenum-float-conversion clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wenum-float-conversion)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBWarnings__BC42105,BC42106,BC42107",
                "shortDescription": {
                  "text": "Function doesn't return a reference type value on all code paths"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://www.jetbrains.com/help/rider/VBWarnings_BC42105_BC42106_BC42107.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PassStringInterpolation",
                "shortDescription": {
                  "text": "Pass string interpolation expression"
                },
                "fullDescription": {
                  "text": "Replace formatting method arguments by passing string interpolation expression. Learn more...",
                  "markdown": "Replace formatting method arguments by passing string interpolation expression. [Learn more...](https://www.jetbrains.com/help/rider/PassStringInterpolation.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBadChildStatementIndent",
                "shortDescription": {
                  "text": "Incorrect indent (around child statement)"
                },
                "fullDescription": {
                  "text": "Around child statement",
                  "markdown": "Around child statement"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyGoogleReadabilityBracesAroundStatements",
                "shortDescription": {
                  "text": "google-readability-braces-around-statements clang-tidy check"
                },
                "fullDescription": {
                  "text": "google-readability-braces-around-statements clang-tidy check. Learn more...",
                  "markdown": "google-readability-braces-around-statements clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/readability-braces-around-statements.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantArrayCreationExpression",
                "shortDescription": {
                  "text": "Array creation can be replaced with array initializer"
                },
                "fullDescription": {
                  "text": "When initializing explicitly typed local variable or field of array type, array creation expression can be replaced with array initializer",
                  "markdown": "When initializing explicitly typed local variable or field of array type, array creation expression can be replaced with array initializer"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertIfStatementToReturnStatement",
                "shortDescription": {
                  "text": "'if-return' statement can be rewritten as 'return' statement"
                },
                "fullDescription": {
                  "text": "Convert the following code: \r\n  if (condition) return expr1;\r\n  return expr2;\r\n To: \r\n  return condition ? expr1 : expr2;\r\n Learn more...",
                  "markdown": "Convert the following code:\n\n```\n\r\n  if (condition) return expr1;\r\n  return expr2;\r\n```\n\nTo:\n\n```\n\r\n  return condition ? expr1 : expr2;\r\n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/ConvertIfStatementToReturnStatement.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UlTagContainsNonLiElements",
                "shortDescription": {
                  "text": "Elements not allowed in context (<ul> contains elements other than <li> or <li> is unclosed)"
                },
                "fullDescription": {
                  "text": "$cont1$([)$cont2$(])$cont3$",
                  "markdown": "$cont1$(\\[)$cont2$(\\])$cont3$"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MultipleStatementsOnOneLine",
                "shortDescription": {
                  "text": "Incorrect line breaks (multiple statements on one line)"
                },
                "fullDescription": {
                  "text": "Multiple statements on one line Learn more...",
                  "markdown": "Multiple statements on one line [Learn more...](https://www.jetbrains.com/help/rider/MultipleStatementsOnOneLine.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseNameOfInsteadOfTypeOf",
                "shortDescription": {
                  "text": "Use 'nameof' expression to reference type name"
                },
                "fullDescription": {
                  "text": "Replace 'typeof(T).Name' expression with constant 'nameof' expression",
                  "markdown": "Replace 'typeof(T).Name' expression with constant 'nameof' expression"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBWarnings__BC40056",
                "shortDescription": {
                  "text": "Namespace or type specified in the Imports 'name' doesn't contain any public member or cannot be found"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://msdn.microsoft.com/en-us/library/ms234657.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticRangeLoopAnalysis",
                "shortDescription": {
                  "text": "range-loop-analysis clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wrange-loop-analysis clang diagnostic. Learn more...",
                  "markdown": "-Wrange-loop-analysis clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wrange-loop-analysis)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseImplicitByValModifier",
                "shortDescription": {
                  "text": "Use implicit 'ByVal' modifier"
                },
                "fullDescription": {
                  "text": "Use implicit 'ByVal' modifier in parameter declaration",
                  "markdown": "Use implicit 'ByVal' modifier in parameter declaration"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppNodiscardFunctionWithoutReturnValue",
                "shortDescription": {
                  "text": "[[nodiscard]] cannot be applied to functions without a return value"
                },
                "fullDescription": {
                  "text": "The [[nodiscard]] attribute cannot be applied to functions without a return value",
                  "markdown": "The \\[\\[nodiscard\\]\\] attribute cannot be applied to functions without a return value"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantImmediateDelegateInvocation",
                "shortDescription": {
                  "text": "Immediate delegate invocation"
                },
                "fullDescription": {
                  "text": "Immediate delegate invocation is redundant",
                  "markdown": "Immediate delegate invocation is redundant"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrangeTypeMemberModifiers",
                "shortDescription": {
                  "text": "Use explicit or implicit modifier definition for type members"
                },
                "fullDescription": {
                  "text": "'private' modifier can be safely added/removed from type members without changing code semantics Learn more...",
                  "markdown": "'private' modifier can be safely added/removed from type members without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeTypeMemberModifiers.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBadSpacesAfterKeyword",
                "shortDescription": {
                  "text": "Incorrect spacing (between keyword and parenthesis)"
                },
                "fullDescription": {
                  "text": "Between keyword and parenthesis",
                  "markdown": "Between keyword and parenthesis"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IntroduceOptionalParameters.Local",
                "shortDescription": {
                  "text": "Introduce optional parameters (private accessibility)"
                },
                "fullDescription": {
                  "text": "Introduce optional parameters to overload method Learn more...",
                  "markdown": "Introduce optional parameters to overload method [Learn more...](https://www.jetbrains.com/help/rider/IntroduceOptionalParameters.Local.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.AutoFixture.RedundantArgumentInInlineAutoDataAttribute",
                "shortDescription": {
                  "text": "NUnit.AutoFixture. Redundant argument in InlineAutoData attribute."
                },
                "fullDescription": {
                  "text": "NUnit.AutoFixture. According to the test method signature, the argument in the [InlineAutoData] attribute is redundant.",
                  "markdown": "NUnit.AutoFixture. According to the test method signature, the argument in the \\[InlineAutoData\\] attribute is redundant."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOptinCplusplusVirtualCall",
                "shortDescription": {
                  "text": "optin.cplusplus.VirtualCall clang static analyzer check"
                },
                "fullDescription": {
                  "text": "optin.cplusplus.VirtualCall clang static analyzer check. Learn more...",
                  "markdown": "optin.cplusplus.VirtualCall clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNullabilityExtension",
                "shortDescription": {
                  "text": "nullability-extension clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wnullability-extension clang diagnostic. Learn more...",
                  "markdown": "-Wnullability-extension clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wnullability-extension)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticClangClPch",
                "shortDescription": {
                  "text": "clang-cl-pch clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wclang-cl-pch clang diagnostic. Learn more...",
                  "markdown": "-Wclang-cl-pch clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wclang-cl-pch)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppEntityUsedOnlyInUnevaluatedContext",
                "shortDescription": {
                  "text": "Declarator is used only in unevaluated context"
                },
                "fullDescription": {
                  "text": "A declarator is used only in unevaluated context",
                  "markdown": "A declarator is used only in unevaluated context"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantFixedPointerDeclaration",
                "shortDescription": {
                  "text": "Redundant fixed pointer declaration"
                },
                "fullDescription": {
                  "text": "Fixed pointer declaration is redundant because accessing elements of fixed size buffer does not require pinning Learn more...",
                  "markdown": "Fixed pointer declaration is redundant because accessing elements of fixed size buffer does not require pinning [Learn more...](https://www.jetbrains.com/help/rider/RedundantFixedPointerDeclaration.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Html.Warning",
                "shortDescription": {
                  "text": "HTML Warning"
                },
                "fullDescription": {
                  "text": "HTML Warning",
                  "markdown": "HTML Warning"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantControlFlowJump",
                "shortDescription": {
                  "text": "Redundant control flow jump statement"
                },
                "fullDescription": {
                  "text": "Redundant control flow jump statement",
                  "markdown": "Redundant control flow jump statement"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticBranchProtection",
                "shortDescription": {
                  "text": "branch-protection clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wbranch-protection clang diagnostic. Learn more...",
                  "markdown": "-Wbranch-protection clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wbranch-protection)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertToUsingDeclaration",
                "shortDescription": {
                  "text": "Convert into 'using' declaration"
                },
                "fullDescription": {
                  "text": "Replace 'using' statement with 'using' declaration",
                  "markdown": "Replace 'using' statement with 'using' declaration"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerWebkitUncountedLambdaCapturesChecker",
                "shortDescription": {
                  "text": "webkit.UncountedLambdaCapturesChecker clang static analyzer check"
                },
                "fullDescription": {
                  "text": "webkit.UncountedLambdaCapturesChecker clang static analyzer check. Learn more...",
                  "markdown": "webkit.UncountedLambdaCapturesChecker clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftInclude",
                "shortDescription": {
                  "text": "microsoft-include clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmicrosoft-include clang diagnostic. Learn more...",
                  "markdown": "-Wmicrosoft-include clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-include)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticLiteralConversion",
                "shortDescription": {
                  "text": "literal-conversion clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wliteral-conversion clang diagnostic. Learn more...",
                  "markdown": "-Wliteral-conversion clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wliteral-conversion)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAddressOfPackedMember",
                "shortDescription": {
                  "text": "address-of-packed-member clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Waddress-of-packed-member clang diagnostic. Learn more...",
                  "markdown": "-Waddress-of-packed-member clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#waddress-of-packed-member)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuFoldingConstant",
                "shortDescription": {
                  "text": "gnu-folding-constant clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wgnu-folding-constant clang diagnostic. Learn more...",
                  "markdown": "-Wgnu-folding-constant clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-folding-constant)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityImplicitBoolConversion",
                "shortDescription": {
                  "text": "readability-implicit-bool-conversion clang-tidy check"
                },
                "fullDescription": {
                  "text": "readability-implicit-bool-conversion clang-tidy check. Learn more...",
                  "markdown": "readability-implicit-bool-conversion clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/implicit-bool-conversion.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAmbiguousDelete",
                "shortDescription": {
                  "text": "ambiguous-delete clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wambiguous-delete clang diagnostic. Learn more...",
                  "markdown": "-Wambiguous-delete clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wambiguous-delete)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticOpenclUnsupportedRgba",
                "shortDescription": {
                  "text": "opencl-unsupported-rgba clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wopencl-unsupported-rgba clang diagnostic. Learn more...",
                  "markdown": "-Wopencl-unsupported-rgba clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wopencl-unsupported-rgba)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticThreadSafetyReference",
                "shortDescription": {
                  "text": "thread-safety-reference clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wthread-safety-reference clang diagnostic. Learn more...",
                  "markdown": "-Wthread-safety-reference clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wthread-safety-reference)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticOpenmpClauses",
                "shortDescription": {
                  "text": "openmp-clauses clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wopenmp-clauses clang diagnostic. Learn more...",
                  "markdown": "-Wopenmp-clauses clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wopenmp-clauses)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticOpenmpTarget",
                "shortDescription": {
                  "text": "openmp-target clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wopenmp-target clang diagnostic. Learn more...",
                  "markdown": "-Wopenmp-target clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wopenmp-target)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyEmbeddedStatement",
                "shortDescription": {
                  "text": "Empty control statement body"
                },
                "fullDescription": {
                  "text": "Empty control statement body Learn more...",
                  "markdown": "Empty control statement body [Learn more...](https://www.jetbrains.com/help/rider/EmptyEmbeddedStatement.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8123",
                "shortDescription": {
                  "text": "The tuple element name is ignored because a different name or no name is specified by the target type."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyFuchsiaTrailingReturn",
                "shortDescription": {
                  "text": "fuchsia-trailing-return clang-tidy check"
                },
                "fullDescription": {
                  "text": "fuchsia-trailing-return clang-tidy check. Learn more...",
                  "markdown": "fuchsia-trailing-return clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/fuchsia/trailing-return.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCoreDivideZero",
                "shortDescription": {
                  "text": "core.DivideZero clang static analyzer check"
                },
                "fullDescription": {
                  "text": "core.DivideZero clang static analyzer check. Learn more...",
                  "markdown": "core.DivideZero clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneUndefinedMemoryManipulation",
                "shortDescription": {
                  "text": "bugprone-undefined-memory-manipulation clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-undefined-memory-manipulation clang-tidy check. Learn more...",
                  "markdown": "bugprone-undefined-memory-manipulation clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/undefined-memory-manipulation.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OperatorIsCanBeUsed",
                "shortDescription": {
                  "text": "Operator 'is'/'Type Of ... Is ...' can be used"
                },
                "fullDescription": {
                  "text": "Operator 'is'/'Type Of ... Is ...' can be used instead of comparing objects GetType() and instance of System.Type object",
                  "markdown": "Operator 'is'/'Type Of ... Is ...' can be used instead of comparing objects GetType() and instance of System.Type object"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MethodSupportsCancellation",
                "shortDescription": {
                  "text": "Method supports cancellation"
                },
                "fullDescription": {
                  "text": "Method has overload with 'CancellationToken'",
                  "markdown": "Method has overload with 'CancellationToken'"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneArgumentComment",
                "shortDescription": {
                  "text": "bugprone-argument-comment clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-argument-comment clang-tidy check. Learn more...",
                  "markdown": "bugprone-argument-comment clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/argument-comment.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppSpecialMemberFunctions",
                "shortDescription": {
                  "text": "hicpp-special-member-functions clang-tidy check"
                },
                "fullDescription": {
                  "text": "hicpp-special-member-functions clang-tidy check. Learn more...",
                  "markdown": "hicpp-special-member-functions clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/special-member-functions.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAssignEnum",
                "shortDescription": {
                  "text": "assign-enum clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wassign-enum clang diagnostic. Learn more...",
                  "markdown": "-Wassign-enum clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wassign-enum)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticTypeSafety",
                "shortDescription": {
                  "text": "type-safety clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wtype-safety clang diagnostic. Learn more...",
                  "markdown": "-Wtype-safety clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wtype-safety)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantStaticSpecifierOnMemberAllocationFunction",
                "shortDescription": {
                  "text": "Redundant 'static' specifier on a member allocation/deallocation function"
                },
                "fullDescription": {
                  "text": "The 'static' specifier is optional for member allocation/deallocation functions",
                  "markdown": "The 'static' specifier is optional for member allocation/deallocation functions"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAmbiguousReversedOperator",
                "shortDescription": {
                  "text": "ambiguous-reversed-operator clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wambiguous-reversed-operator clang diagnostic. Learn more...",
                  "markdown": "-Wambiguous-reversed-operator clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wambiguous-reversed-operator)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantParams",
                "shortDescription": {
                  "text": "'params' modifier is always ignored on overrides"
                },
                "fullDescription": {
                  "text": "'params' modifier is always ignored on overrides",
                  "markdown": "'params' modifier is always ignored on overrides"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIncompatibleExceptionSpec",
                "shortDescription": {
                  "text": "incompatible-exception-spec clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wincompatible-exception-spec clang diagnostic. Learn more...",
                  "markdown": "-Wincompatible-exception-spec clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wincompatible-exception-spec)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMisexpect",
                "shortDescription": {
                  "text": "misexpect clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmisexpect clang diagnostic. Learn more...",
                  "markdown": "-Wmisexpect clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmisexpect)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerUnixAPI",
                "shortDescription": {
                  "text": "unix.API clang static analyzer check"
                },
                "fullDescription": {
                  "text": "unix.API clang static analyzer check. Learn more...",
                  "markdown": "unix.API clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LoopCanBePartlyConvertedToQuery",
                "shortDescription": {
                  "text": "Part of loop's body can be converted into LINQ-expression"
                },
                "fullDescription": {
                  "text": "Part of 'foreach' ('For Each' for VB.NET) statement's body can be converted into a LINQ-expression",
                  "markdown": "Part of 'foreach' ('For Each' for VB.NET) statement's body can be converted into a LINQ-expression"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCoreNonNullParamChecker",
                "shortDescription": {
                  "text": "core.NonNullParamChecker clang static analyzer check"
                },
                "fullDescription": {
                  "text": "core.NonNullParamChecker clang static analyzer check. Learn more...",
                  "markdown": "core.NonNullParamChecker clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadChildStatementIndent",
                "shortDescription": {
                  "text": "Incorrect indent (around child statement)"
                },
                "fullDescription": {
                  "text": "Around child statement Learn more...",
                  "markdown": "Around child statement [Learn more...](https://www.jetbrains.com/help/rider/BadChildStatementIndent.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyGoogleObjcGlobalVariableDeclaration",
                "shortDescription": {
                  "text": "google-objc-global-variable-declaration clang-tidy check"
                },
                "fullDescription": {
                  "text": "google-objc-global-variable-declaration clang-tidy check. Learn more...",
                  "markdown": "google-objc-global-variable-declaration clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/objc-global-variable-declaration.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticLongLong",
                "shortDescription": {
                  "text": "long-long clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wlong-long clang diagnostic. Learn more...",
                  "markdown": "-Wlong-long clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wlong-long)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppMemberFunctionMayBeConst",
                "shortDescription": {
                  "text": "Member function can be made const"
                },
                "fullDescription": {
                  "text": "Member function can be made const",
                  "markdown": "Member function can be made const"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp98CompatExtraSemi",
                "shortDescription": {
                  "text": "c++98-compat-extra-semi clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wc++98-compat-extra-semi clang diagnostic. Learn more...",
                  "markdown": "-Wc++98-compat-extra-semi clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wc-98-compat-extra-semi)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMissingNoescape",
                "shortDescription": {
                  "text": "missing-noescape clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmissing-noescape clang diagnostic. Learn more...",
                  "markdown": "-Wmissing-noescape clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmissing-noescape)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIntToVoidPointerCast",
                "shortDescription": {
                  "text": "int-to-void-pointer-cast clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wint-to-void-pointer-cast clang diagnostic. Learn more...",
                  "markdown": "-Wint-to-void-pointer-cast clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wint-to-void-pointer-cast)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1522",
                "shortDescription": {
                  "text": "Empty switch block"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://msdn.microsoft.com/en-us/library/x68b4s45.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArgumentsStyleNamedExpression",
                "shortDescription": {
                  "text": "Use preferred argument style for named expressions"
                },
                "fullDescription": {
                  "text": "Prefer using named/positional argument for named expressions Learn more...",
                  "markdown": "Prefer using named/positional argument for named expressions [Learn more...](https://www.jetbrains.com/help/rider/ArgumentsStyleNamedExpression.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantOverload.Local",
                "shortDescription": {
                  "text": "Redundant method overload (private accessibility)"
                },
                "fullDescription": {
                  "text": "Redundant method overload. Use another method with optional parameters.",
                  "markdown": "Redundant method overload. Use another method with optional parameters."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyMiscUnusedParameters",
                "shortDescription": {
                  "text": "misc-unused-parameters clang-tidy check"
                },
                "fullDescription": {
                  "text": "misc-unused-parameters clang-tidy check. Learn more...",
                  "markdown": "misc-unused-parameters clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/unused-parameters.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ExpressionIsAlwaysNull",
                "shortDescription": {
                  "text": "Expression is always 'null'"
                },
                "fullDescription": {
                  "text": "The expression is always evaluated to 'null' at this point",
                  "markdown": "The expression is always evaluated to 'null' at this point"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAlteraStructPackAlign",
                "shortDescription": {
                  "text": "altera-struct-pack-align clang-tidy check"
                },
                "fullDescription": {
                  "text": "altera-struct-pack-align clang-tidy check. Learn more...",
                  "markdown": "altera-struct-pack-align clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/altera/struct-pack-align.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyLlvmPreferRegisterOverUnsigned",
                "shortDescription": {
                  "text": "llvm-prefer-register-over-unsigned clang-tidy check"
                },
                "fullDescription": {
                  "text": "llvm-prefer-register-over-unsigned clang-tidy check. Learn more...",
                  "markdown": "llvm-prefer-register-over-unsigned clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/llvm/prefer-register-over-unsigned.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesNoMalloc",
                "shortDescription": {
                  "text": "cppcoreguidelines-no-malloc clang-tidy check"
                },
                "fullDescription": {
                  "text": "cppcoreguidelines-no-malloc clang-tidy check. Learn more...",
                  "markdown": "cppcoreguidelines-no-malloc clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/no-malloc.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUseAuto",
                "shortDescription": {
                  "text": "Use preferred 'auto' style (type can be replaced with auto)"
                },
                "fullDescription": {
                  "text": "Type can be replaced with 'auto'",
                  "markdown": "Type can be replaced with 'auto'"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNonLiteralNullConversion",
                "shortDescription": {
                  "text": "non-literal-null-conversion clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wnon-literal-null-conversion clang diagnostic. Learn more...",
                  "markdown": "-Wnon-literal-null-conversion clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wnon-literal-null-conversion)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MemberCanBeProtected.Local",
                "shortDescription": {
                  "text": "Member can be made protected (private accessibility)"
                },
                "fullDescription": {
                  "text": "Member can be made protected Learn more...",
                  "markdown": "Member can be made protected [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBeProtected.Local.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCoreUninitializedAssign",
                "shortDescription": {
                  "text": "core.uninitialized.Assign clang static analyzer check"
                },
                "fullDescription": {
                  "text": "core.uninitialized.Assign clang static analyzer check. Learn more...",
                  "markdown": "core.uninitialized.Assign clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAndroidCloexecSocket",
                "shortDescription": {
                  "text": "android-cloexec-socket clang-tidy check"
                },
                "fullDescription": {
                  "text": "android-cloexec-socket clang-tidy check. Learn more...",
                  "markdown": "android-cloexec-socket clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/android/cloexec-socket.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuggestBaseTypeForParameterInConstructor",
                "shortDescription": {
                  "text": "Parameter can be declared with the base type"
                },
                "fullDescription": {
                  "text": "Parameter can be declared with the base type. Note that when the base type is IEnumerable, another inspection 'Parameter type can be IEnumerable' will be applied.",
                  "markdown": "Parameter can be declared with the base type. Note that when the base type is IEnumerable, another inspection 'Parameter type can be IEnumerable' will be applied."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppUseOverride",
                "shortDescription": {
                  "text": "hicpp-use-override clang-tidy check"
                },
                "fullDescription": {
                  "text": "hicpp-use-override clang-tidy check. Learn more...",
                  "markdown": "hicpp-use-override clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/use-override.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NotObservableAnnotationRedundancy",
                "shortDescription": {
                  "text": "Nullability attribute used with declaration that cannot be directly referenced from other code"
                },
                "fullDescription": {
                  "text": "Redundant nullability attribute used with declaration that cannot be directly referenced from other code",
                  "markdown": "Redundant nullability attribute used with declaration that cannot be directly referenced from other code"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuppressNullableWarningExpressionAsInvertedIsExpression",
                "shortDescription": {
                  "text": "Nullable warning suppression operator might be confused with inverted 'is' expression"
                },
                "fullDescription": {
                  "text": "'!is' looks like an inverted 'is' expression but instead applies nullable warning suppression operator to its operand",
                  "markdown": "'!is' looks like an inverted 'is' expression but instead applies nullable warning suppression operator to its operand"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp2bExtensions",
                "shortDescription": {
                  "text": "c++2b-extensions clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wc++2b-extensions clang diagnostic. Learn more...",
                  "markdown": "-Wc++2b-extensions clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wc-2b-extensions)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneNotNullTerminatedResult",
                "shortDescription": {
                  "text": "bugprone-not-null-terminated-result clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-not-null-terminated-result clang-tidy check. Learn more...",
                  "markdown": "bugprone-not-null-terminated-result clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/not-null-terminated-result.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadPreprocessorIndent",
                "shortDescription": {
                  "text": "Incorrect indent (around preprocessor directive)"
                },
                "fullDescription": {
                  "text": "Around preprocessor directive Learn more...",
                  "markdown": "Around preprocessor directive [Learn more...](https://www.jetbrains.com/help/rider/BadPreprocessorIndent.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.PerformanceCriticalCodeCameraMain",
                "shortDescription": {
                  "text": "'Camera.main' is expensive"
                },
                "fullDescription": {
                  "text": "'Camera.main' is slow and does not cache its result. Using 'Camera.main' in frequently called methods is very inefficient. Prefer caching the result in 'Start()' or 'Awake()'. Learn more...",
                  "markdown": "'Camera.main' is slow and does not cache its result. Using 'Camera.main' in frequently called methods is very inefficient. Prefer caching the result in 'Start()' or 'Awake()'. [Learn more...](https://github.com/JetBrains/resharper-unity/wiki/Camera.main-is-inefficient-in-frequently-called-methods)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity Performance Inspections",
                      "index": 67,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FieldCanBeMadeReadOnly.Local",
                "shortDescription": {
                  "text": "Field can be made readonly (private accessibility)"
                },
                "fullDescription": {
                  "text": "Field has no write usages after initialization and can be made readonly Learn more...",
                  "markdown": "Field has no write usages after initialization and can be made readonly [Learn more...](https://www.jetbrains.com/help/rider/FieldCanBeMadeReadOnly.Local.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPointerCompare",
                "shortDescription": {
                  "text": "pointer-compare clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wpointer-compare clang diagnostic. Learn more...",
                  "markdown": "-Wpointer-compare clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wpointer-compare)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantTemplateKeyword",
                "shortDescription": {
                  "text": "Redundant 'template' keyword"
                },
                "fullDescription": {
                  "text": "Redundant 'template' keyword",
                  "markdown": "Redundant 'template' keyword"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAbstractVbaseInit",
                "shortDescription": {
                  "text": "abstract-vbase-init clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wabstract-vbase-init clang diagnostic. Learn more...",
                  "markdown": "-Wabstract-vbase-init clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wabstract-vbase-init)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInvalidOrNonexistentDirectory",
                "shortDescription": {
                  "text": "invalid-or-nonexistent-directory clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Winvalid-or-nonexistent-directory clang diagnostic. Learn more...",
                  "markdown": "-Winvalid-or-nonexistent-directory clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#winvalid-or-nonexistent-directory)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantJumpStatement",
                "shortDescription": {
                  "text": "Redundant control flow jump statement"
                },
                "fullDescription": {
                  "text": "Redundant control flow jump statement Learn more...",
                  "markdown": "Redundant control flow jump statement [Learn more...](https://www.jetbrains.com/help/rider/RedundantJumpStatement.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertToLambdaExpression",
                "shortDescription": {
                  "text": "Convert into lambda expression"
                },
                "fullDescription": {
                  "text": "Convert statement-bodied lambda into expression-bodied. Does not suggest the conversion when the expression contains nested closures or explicit side-effects. Learn more...",
                  "markdown": "Convert statement-bodied lambda into expression-bodied. Does not suggest the conversion when the expression contains nested closures or explicit side-effects. [Learn more...](https://www.jetbrains.com/help/rider/ConvertToLambdaExpression.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyLinuxkernelMustCheckErrs",
                "shortDescription": {
                  "text": "linuxkernel-must-check-errs clang-tidy check"
                },
                "fullDescription": {
                  "text": "linuxkernel-must-check-errs clang-tidy check. Learn more...",
                  "markdown": "linuxkernel-must-check-errs clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/linuxkernel/must-check-errs.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticLogicalOpParentheses",
                "shortDescription": {
                  "text": "logical-op-parentheses clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wlogical-op-parentheses clang diagnostic. Learn more...",
                  "markdown": "-Wlogical-op-parentheses clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wlogical-op-parentheses)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1587",
                "shortDescription": {
                  "text": "XML comment is not placed on a valid language element"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://msdn.microsoft.com/en-us/library/d3x6ez1z.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1589",
                "shortDescription": {
                  "text": "Unable to include XML fragment"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://msdn.microsoft.com/en-us/library/3y857kz5.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1584",
                "shortDescription": {
                  "text": "Syntax error in XML comment"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://msdn.microsoft.com/en-us/library/hz13h4se.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1580",
                "shortDescription": {
                  "text": "Incorrect signature in XML comment"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://msdn.microsoft.com/en-us/library/03t96cfx.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPotentiallyEvaluatedExpression",
                "shortDescription": {
                  "text": "potentially-evaluated-expression clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wpotentially-evaluated-expression clang diagnostic. Learn more...",
                  "markdown": "-Wpotentially-evaluated-expression clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wpotentially-evaluated-expression)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MISMATCHED_ASMDEF_FILENAME",
                "shortDescription": {
                  "text": "File name should match the name of the assembly"
                },
                "fullDescription": {
                  "text": "To avoid confusion, the name of the assembly definition file should match the name of the assembly being defined.",
                  "markdown": "To avoid confusion, the name of the assembly definition file should match the name of the assembly being defined."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantBaseConstructorCall",
                "shortDescription": {
                  "text": "Redundant base constructor call"
                },
                "fullDescription": {
                  "text": "Explicit call to the base class constructor with no arguments. It is generated by the compiler by default and can be omitted.",
                  "markdown": "Explicit call to the base class constructor with no arguments. It is generated by the compiler by default and can be omitted."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticComment",
                "shortDescription": {
                  "text": "comment clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wcomment clang diagnostic. Learn more...",
                  "markdown": "-Wcomment clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wcomment)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantUsingDirective",
                "shortDescription": {
                  "text": "Redundant using directive"
                },
                "fullDescription": {
                  "text": "Using directive is not required by the code and can be safely removed Learn more...",
                  "markdown": "Using directive is not required by the code and can be safely removed [Learn more...](https://www.jetbrains.com/help/rider/RedundantUsingDirective.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticTypedefRedefinition",
                "shortDescription": {
                  "text": "typedef-redefinition clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wtypedef-redefinition clang diagnostic. Learn more...",
                  "markdown": "-Wtypedef-redefinition clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wtypedef-redefinition)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyFuchsiaMultipleInheritance",
                "shortDescription": {
                  "text": "fuchsia-multiple-inheritance clang-tidy check"
                },
                "fullDescription": {
                  "text": "fuchsia-multiple-inheritance clang-tidy check. Learn more...",
                  "markdown": "fuchsia-multiple-inheritance clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/fuchsia/multiple-inheritance.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantQueryOrderByAscendingKeyword",
                "shortDescription": {
                  "text": "Redundant 'orderby' clause 'ascending' keyword"
                },
                "fullDescription": {
                  "text": "LINQ query syntax 'orderby' clause sorting is 'ascending' by default",
                  "markdown": "LINQ query syntax 'orderby' clause sorting is 'ascending' by default"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1590",
                "shortDescription": {
                  "text": "Invalid XML include element"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://msdn.microsoft.com/en-us/library/549c3y6s.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1591",
                "shortDescription": {
                  "text": "Missing XML comment for publicly visible type or member"
                },
                "fullDescription": {
                  "text": "Compiler only produces XML documentation related warnings when 'XML Documentation' output generation option is enabled in project configuration settings (Project | Properties) Learn more...",
                  "markdown": "Compiler only produces XML documentation related warnings when 'XML Documentation' output generation option is enabled in project configuration settings (Project \\| Properties) [Learn more...](https://msdn.microsoft.com/en-us/library/zk18c1w9.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticStaticInlineExplicitInstantiation",
                "shortDescription": {
                  "text": "static-inline-explicit-instantiation clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wstatic-inline-explicit-instantiation clang diagnostic. Learn more...",
                  "markdown": "-Wstatic-inline-explicit-instantiation clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wstatic-inline-explicit-instantiation)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1592",
                "shortDescription": {
                  "text": "Badly formed XML in included comments file"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://msdn.microsoft.com/en-us/library/89c331t3.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CollectionNeverQueried.Global",
                "shortDescription": {
                  "text": "Collection content is never queried (non-private accessibility)"
                },
                "fullDescription": {
                  "text": "Elements are only added to the collection but never used Learn more...",
                  "markdown": "Elements are only added to the collection but never used [Learn more...](https://www.jetbrains.com/help/rider/CollectionNeverQueried.Global.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BaseMemberHasParams",
                "shortDescription": {
                  "text": "Base member has 'params' parameter, but the overrider does not have it"
                },
                "fullDescription": {
                  "text": "Base member has 'params' parameter, but the overrider does not have it",
                  "markdown": "Base member has 'params' parameter, but the overrider does not have it"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnusedExceptionParameter",
                "shortDescription": {
                  "text": "unused-exception-parameter clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunused-exception-parameter clang diagnostic. Learn more...",
                  "markdown": "-Wunused-exception-parameter clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-exception-parameter)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppZeroConstantCanBeReplacedWithNullptr",
                "shortDescription": {
                  "text": "Zero constant can be replaced with nullptr"
                },
                "fullDescription": {
                  "text": "Zero constant can be replaced with nullptr",
                  "markdown": "Zero constant can be replaced with nullptr"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AnnotationConflictInHierarchy",
                "shortDescription": {
                  "text": "Annotation conflict in hierarchy"
                },
                "fullDescription": {
                  "text": "There is base member that has conflicting nullness annotation",
                  "markdown": "There is base member that has conflicting nullness annotation"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Mvc.InvalidModelType",
                "shortDescription": {
                  "text": "MVC (mismatch Model Type)"
                },
                "fullDescription": {
                  "text": "Mismatch ASP.NET MVC Model Type",
                  "markdown": "Mismatch ASP.NET MVC Model Type"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneMultipleStatementMacro",
                "shortDescription": {
                  "text": "bugprone-multiple-statement-macro clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-multiple-statement-macro clang-tidy check. Learn more...",
                  "markdown": "bugprone-multiple-statement-macro clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/multiple-statement-macro.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticOrderedCompareFunctionPointers",
                "shortDescription": {
                  "text": "ordered-compare-function-pointers clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wordered-compare-function-pointers clang diagnostic. Learn more...",
                  "markdown": "-Wordered-compare-function-pointers clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wordered-compare-function-pointers)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedDynamicExceptionSpec",
                "shortDescription": {
                  "text": "deprecated-dynamic-exception-spec clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdeprecated-dynamic-exception-spec clang diagnostic. Learn more...",
                  "markdown": "-Wdeprecated-dynamic-exception-spec clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-dynamic-exception-spec)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOptinPortabilityUnixAPI",
                "shortDescription": {
                  "text": "optin.portability.UnixAPI clang static analyzer check"
                },
                "fullDescription": {
                  "text": "optin.portability.UnixAPI clang static analyzer check. Learn more...",
                  "markdown": "optin.portability.UnixAPI clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InactivePreprocessorBranch",
                "shortDescription": {
                  "text": "Inactive preprocessor branch"
                },
                "fullDescription": {
                  "text": "Inactive preprocessor branch",
                  "markdown": "Inactive preprocessor branch"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InvocationIsSkipped",
                "shortDescription": {
                  "text": "Method invocation is skipped"
                },
                "fullDescription": {
                  "text": "Method invocation is skipped. Compiler will not generate method invocation because the method is conditional, or it is a partial method without implementation. Learn more...",
                  "markdown": "Method invocation is skipped. Compiler will not generate method invocation because the method is conditional, or it is a partial method without implementation. [Learn more...](https://www.jetbrains.com/help/rider/InvocationIsSkipped.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCoreFoundationCFNumber",
                "shortDescription": {
                  "text": "osx.coreFoundation.CFNumber clang static analyzer check"
                },
                "fullDescription": {
                  "text": "osx.coreFoundation.CFNumber clang static analyzer check. Learn more...",
                  "markdown": "osx.coreFoundation.CFNumber clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeleteNonVirtualDtor",
                "shortDescription": {
                  "text": "delete-non-virtual-dtor clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdelete-non-virtual-dtor clang diagnostic. Learn more...",
                  "markdown": "-Wdelete-non-virtual-dtor clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdelete-non-virtual-dtor)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftCharize",
                "shortDescription": {
                  "text": "microsoft-charize clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmicrosoft-charize clang diagnostic. Learn more...",
                  "markdown": "-Wmicrosoft-charize clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-charize)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCalledOnceParameter",
                "shortDescription": {
                  "text": "called-once-parameter clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wcalled-once-parameter clang diagnostic. Learn more...",
                  "markdown": "-Wcalled-once-parameter clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wcalled-once-parameter)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1571",
                "shortDescription": {
                  "text": "Duplicate param tag in XML comment"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://msdn.microsoft.com/en-us/library/a5c6cbk0.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1572",
                "shortDescription": {
                  "text": "XML comment has a 'param' tag for 'Parameter', but there is no parameter by that name"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1573",
                "shortDescription": {
                  "text": "Parameter has no matching param tag in the XML comment"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://msdn.microsoft.com/en-us/library/01248w2b.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1574",
                "shortDescription": {
                  "text": "Ambiguous reference in XML comment"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://msdn.microsoft.com/en-us/library/26x4hk2a.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReturnTypeCanBeEnumerable.Global",
                "shortDescription": {
                  "text": "Return type can be IEnumerable<T> (non-private accessibility)"
                },
                "fullDescription": {
                  "text": "All usages of a method (or read-only property/indexer) use returned value as IEnumerable, but it is declared with more specific type (e.g. List) Learn more...",
                  "markdown": "All usages of a method (or read-only property/indexer) use returned value as IEnumerable, but it is declared with more specific type (e.g. List) [Learn more...](https://www.jetbrains.com/help/rider/ReturnTypeCanBeEnumerable.Global.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1570",
                "shortDescription": {
                  "text": "Invalid XML in XML comment"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://msdn.microsoft.com/en-us/library/c20zzdxx.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBWarnings__BC40000",
                "shortDescription": {
                  "text": "Use obsolete member"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBWarnings__BC40008",
                "shortDescription": {
                  "text": "Use obsolete member (without message)"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://msdn.microsoft.com/en-us/library/s5f0ewa6.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFormatExtraArgs",
                "shortDescription": {
                  "text": "format-extra-args clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wformat-extra-args clang diagnostic. Learn more...",
                  "markdown": "-Wformat-extra-args clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wformat-extra-args)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithOfType.First.1",
                "shortDescription": {
                  "text": "Replace with OfType<T>().First()"
                },
                "fullDescription": {
                  "text": "$seq$.Select($x$ => $x$ as $T$).First($y$ => $y$ != null)",
                  "markdown": "$seq$.Select($x$ =\\> $x$ as $T$).First($y$ =\\> $y$ != null)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithOfType.First.2",
                "shortDescription": {
                  "text": "Replace with OfType<T>().First() (replace with OfType<T>().First(..))"
                },
                "fullDescription": {
                  "text": "$seq$.Select($x$ => $x$ as $T$).First($y$ => $y$ != null && $expr$)",
                  "markdown": "$seq$.Select($x$ =\\> $x$ as $T$).First($y$ =\\> $y$ != null \\&\\& $expr$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBStringIndexOfIsCultureSpecific.1",
                "shortDescription": {
                  "text": "String.IndexOf is culture-specific (string.IndexOf(string) is culture-specific)"
                },
                "fullDescription": {
                  "text": "$s$.IndexOf($sarg$)",
                  "markdown": "$s$.IndexOf($sarg$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBStringIndexOfIsCultureSpecific.3",
                "shortDescription": {
                  "text": "String.IndexOf is culture-specific (string.IndexOf(string, int) is culture-specific)"
                },
                "fullDescription": {
                  "text": "$s$.IndexOf($sarg$, $iarg1$, $iarg2$)",
                  "markdown": "$s$.IndexOf($sarg$, $iarg1$, $iarg2$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAndroidCloexecEpollCreate1",
                "shortDescription": {
                  "text": "android-cloexec-epoll-create1 clang-tidy check"
                },
                "fullDescription": {
                  "text": "android-cloexec-epoll-create1 clang-tidy check. Learn more...",
                  "markdown": "android-cloexec-epoll-create1 clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/android/cloexec-epoll-create1.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBStringIndexOfIsCultureSpecific.2",
                "shortDescription": {
                  "text": "String.IndexOf is culture-specific (string.IndexOf(string, int) is culture-specific)"
                },
                "fullDescription": {
                  "text": "$s$.IndexOf($sarg$, $iarg1$)",
                  "markdown": "$s$.IndexOf($sarg$, $iarg1$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneSwappedArguments",
                "shortDescription": {
                  "text": "bugprone-swapped-arguments clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-swapped-arguments clang-tidy check. Learn more...",
                  "markdown": "bugprone-swapped-arguments clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/swapped-arguments.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppReplaceMemsetWithZeroInitialization",
                "shortDescription": {
                  "text": "Zero initialization can be used instead of memset"
                },
                "fullDescription": {
                  "text": "Zero initialization can be used instead of memset",
                  "markdown": "Zero initialization can be used instead of memset"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantVerbatimStringPrefix",
                "shortDescription": {
                  "text": "Redundant verbatim string prefix"
                },
                "fullDescription": {
                  "text": "String can be converted into a regular string without any changes",
                  "markdown": "String can be converted into a regular string without any changes"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnusablePartialSpecialization",
                "shortDescription": {
                  "text": "unusable-partial-specialization clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunusable-partial-specialization clang diagnostic. Learn more...",
                  "markdown": "-Wunusable-partial-specialization clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunusable-partial-specialization)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CA2252",
                "shortDescription": {
                  "text": "Opt in to preview features before using them."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IsExpressionAlwaysTrue",
                "shortDescription": {
                  "text": "The given expression of 'is' operator is always of the provided type"
                },
                "fullDescription": {
                  "text": "The expression of 'is' operator is always of the provided type Learn more...",
                  "markdown": "The expression of 'is' operator is always of the provided type [Learn more...](https://www.jetbrains.com/help/rider/IsExpressionAlwaysTrue.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppPrintfMissedArg",
                "shortDescription": {
                  "text": "Not enough arguments in a call to printf"
                },
                "fullDescription": {
                  "text": "Not enough arguments in a call to printf. Some format directives do not have matching arguments.",
                  "markdown": "Not enough arguments in a call to printf. Some format directives do not have matching arguments."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantBoolCompare",
                "shortDescription": {
                  "text": "Redundant boolean comparison"
                },
                "fullDescription": {
                  "text": "Comparison of a boolean value with 'true' or 'false' constant",
                  "markdown": "Comparison of a boolean value with 'true' or 'false' constant"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AccessToModifiedClosure",
                "shortDescription": {
                  "text": "Access to modified captured variable"
                },
                "fullDescription": {
                  "text": "Access to captured variable from anonymous method when the variable is modified externally Learn more...",
                  "markdown": "Access to captured variable from anonymous method when the variable is modified externally [Learn more...](https://www.jetbrains.com/help/rider/AccessToModifiedClosure.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantStringFormatCall",
                "shortDescription": {
                  "text": "Redundant 'string.Format()' call"
                },
                "fullDescription": {
                  "text": "Redundant 'string.Format()' call Learn more...",
                  "markdown": "Redundant 'string.Format()' call [Learn more...](https://www.jetbrains.com/help/rider/RedundantStringFormatCall.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LambdaExpressionMustBeStatic",
                "shortDescription": {
                  "text": "Lambda expression/anonymous method must be 'static' to avoid allocations"
                },
                "fullDescription": {
                  "text": "Lambda expression/anonymous method passed to parameter annotated by '[RequireStaticDelegate]' must be 'static' to help avoid introducing heap allocations",
                  "markdown": "Lambda expression/anonymous method passed to parameter annotated by '\\[RequireStaticDelegate\\]' must be 'static' to help avoid introducing heap allocations"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnknownSanitizers",
                "shortDescription": {
                  "text": "unknown-sanitizers clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunknown-sanitizers clang diagnostic. Learn more...",
                  "markdown": "-Wunknown-sanitizers clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunknown-sanitizers)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PossibleUnintendedLinearSearchInSet",
                "shortDescription": {
                  "text": "Possibly unintended linear search in set"
                },
                "fullDescription": {
                  "text": "Usage of 'Enumerable.Contains' extension method will perform a linear search. Consider providing equality comparer to the set's constructor and using its own '.Contains' method.",
                  "markdown": "Usage of 'Enumerable.Contains' extension method will perform a linear search. Consider providing equality comparer to the set's constructor and using its own '.Contains' method."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EnforceForeachStatementBraces",
                "shortDescription": {
                  "text": "Use preferred braces style (enforce braces in 'foreach' statement)"
                },
                "fullDescription": {
                  "text": "Use braces to separate 'foreach' statement body Learn more...",
                  "markdown": "Use braces to separate 'foreach' statement body [Learn more...](https://www.jetbrains.com/help/rider/EnforceForeachStatementBraces.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyPerformanceUnnecessaryCopyInitialization",
                "shortDescription": {
                  "text": "performance-unnecessary-copy-initialization clang-tidy check"
                },
                "fullDescription": {
                  "text": "performance-unnecessary-copy-initialization clang-tidy check. Learn more...",
                  "markdown": "performance-unnecessary-copy-initialization clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/unnecessary-copy-initialization.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppEntityAssignedButNoRead",
                "shortDescription": {
                  "text": "Declarator is only assigned but never accessed"
                },
                "fullDescription": {
                  "text": "A declarator is only assigned but never accessed",
                  "markdown": "A declarator is only assigned but never accessed"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnusedGetterReturnValue",
                "shortDescription": {
                  "text": "unused-getter-return-value clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunused-getter-return-value clang diagnostic. Learn more...",
                  "markdown": "-Wunused-getter-return-value clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-getter-return-value)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAmbiguousEllipsis",
                "shortDescription": {
                  "text": "ambiguous-ellipsis clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wambiguous-ellipsis clang diagnostic. Learn more...",
                  "markdown": "-Wambiguous-ellipsis clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wambiguous-ellipsis)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFloatEqual",
                "shortDescription": {
                  "text": "float-equal clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wfloat-equal clang diagnostic. Learn more...",
                  "markdown": "-Wfloat-equal clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wfloat-equal)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DefaultValueAttributeForOptionalParameter",
                "shortDescription": {
                  "text": "Possibly misleading 'DefaultValueAttribute' usage to define optional parameter value"
                },
                "fullDescription": {
                  "text": "Possibly misleading 'DefaultValueAttribute' usage to define optional parameter value. 'DefaultParameterValueAttribute' must be used instead.",
                  "markdown": "Possibly misleading 'DefaultValueAttribute' usage to define optional parameter value. 'DefaultParameterValueAttribute' must be used instead."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMisleadingIndentation",
                "shortDescription": {
                  "text": "misleading-indentation clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmisleading-indentation clang diagnostic. Learn more...",
                  "markdown": "-Wmisleading-indentation clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmisleading-indentation)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityRedundantSmartptrGet",
                "shortDescription": {
                  "text": "readability-redundant-smartptr-get clang-tidy check"
                },
                "fullDescription": {
                  "text": "readability-redundant-smartptr-get clang-tidy check. Learn more...",
                  "markdown": "readability-redundant-smartptr-get clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/redundant-smartptr-get.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDanglingInitializerList",
                "shortDescription": {
                  "text": "dangling-initializer-list clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdangling-initializer-list clang diagnostic. Learn more...",
                  "markdown": "-Wdangling-initializer-list clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdangling-initializer-list)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIncompatibleLibraryRedeclaration",
                "shortDescription": {
                  "text": "incompatible-library-redeclaration clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wincompatible-library-redeclaration clang diagnostic. Learn more...",
                  "markdown": "-Wincompatible-library-redeclaration clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wincompatible-library-redeclaration)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FSharpConsWithEmptyListPat",
                "shortDescription": {
                  "text": "Redundant concatenation with empty list"
                },
                "fullDescription": {
                  "text": "Redundant concatenation with empty list.",
                  "markdown": "Redundant concatenation with empty list."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantTemplateArguments",
                "shortDescription": {
                  "text": "Redundant template arguments"
                },
                "fullDescription": {
                  "text": "Redundant template arguments",
                  "markdown": "Redundant template arguments"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftExceptionSpec",
                "shortDescription": {
                  "text": "microsoft-exception-spec clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmicrosoft-exception-spec clang diagnostic. Learn more...",
                  "markdown": "-Wmicrosoft-exception-spec clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-exception-spec)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp14BinaryLiteral",
                "shortDescription": {
                  "text": "c++14-binary-literal clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wc++14-binary-literal clang diagnostic. Learn more...",
                  "markdown": "-Wc++14-binary-literal clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wc-14-binary-literal)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedAutoPropertyAccessor.Global",
                "shortDescription": {
                  "text": "Auto-property accessor is never used (non-private accessibility)"
                },
                "fullDescription": {
                  "text": "Accessor in auto-property is never used",
                  "markdown": "Accessor in auto-property is never used"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyDarwinDispatchOnceNonstatic",
                "shortDescription": {
                  "text": "darwin-dispatch-once-nonstatic clang-tidy check"
                },
                "fullDescription": {
                  "text": "darwin-dispatch-once-nonstatic clang-tidy check. Learn more...",
                  "markdown": "darwin-dispatch-once-nonstatic clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/darwin/dispatch-once-nonstatic.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithSingleCallToFirst",
                "shortDescription": {
                  "text": "Replace with single call to First(..)"
                },
                "fullDescription": {
                  "text": "$seq$.Where($x$ => $expr$).First()",
                  "markdown": "$seq$.Where($x$ =\\> $expr$).First()"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecateLaxVecConvAll",
                "shortDescription": {
                  "text": "deprecate-lax-vec-conv-all clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdeprecate-lax-vec-conv-all clang diagnostic. Learn more...",
                  "markdown": "-Wdeprecate-lax-vec-conv-all clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecate-lax-vec-conv-all)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyLlvmElseAfterReturn",
                "shortDescription": {
                  "text": "llvm-else-after-return clang-tidy check"
                },
                "fullDescription": {
                  "text": "llvm-else-after-return clang-tidy check. Learn more...",
                  "markdown": "llvm-else-after-return clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/llvm/else-after-return.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticEnumCompareConditional",
                "shortDescription": {
                  "text": "enum-compare-conditional clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wenum-compare-conditional clang diagnostic. Learn more...",
                  "markdown": "-Wenum-compare-conditional clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wenum-compare-conditional)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCoveredSwitchDefault",
                "shortDescription": {
                  "text": "covered-switch-default clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wcovered-switch-default clang diagnostic. Learn more...",
                  "markdown": "-Wcovered-switch-default clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wcovered-switch-default)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Mvc.ViewComponentNotResolved",
                "shortDescription": {
                  "text": "MVC (unknown view component)"
                },
                "fullDescription": {
                  "text": "Unknown ASP.NET MVC View Component",
                  "markdown": "Unknown ASP.NET MVC View Component"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticReturnType",
                "shortDescription": {
                  "text": "return-type clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wreturn-type clang diagnostic. Learn more...",
                  "markdown": "-Wreturn-type clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wreturn-type)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseNameofExpressionForPartOfTheString",
                "shortDescription": {
                  "text": "Use 'nameof' expression to reference name in part of the string literal"
                },
                "fullDescription": {
                  "text": "Replace part of the string literal with statically typed 'nameof' expression",
                  "markdown": "Replace part of the string literal with statically typed 'nameof' expression"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerApiModelingErrno",
                "shortDescription": {
                  "text": "apiModeling.Errno clang static analyzer check"
                },
                "fullDescription": {
                  "text": "apiModeling.Errno clang static analyzer check. Learn more...",
                  "markdown": "apiModeling.Errno clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CannotApplyEqualityOperatorToType",
                "shortDescription": {
                  "text": "Compare with '==' types marked by 'CannotApplyEqualityOperatorAttribute'"
                },
                "fullDescription": {
                  "text": "Type is marked by 'CannotApplyEqualityOperatorAttribute' attribute but it is compared using '==' or '!=' operators Learn more...",
                  "markdown": "Type is marked by 'CannotApplyEqualityOperatorAttribute' attribute but it is compared using '==' or '!=' operators [Learn more...](https://www.jetbrains.com/help/rider/CannotApplyEqualityOperatorToType.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Constraints Violations",
                      "index": 43,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantAttributeParentheses",
                "shortDescription": {
                  "text": "Parentheses are redundant if attribute has no arguments"
                },
                "fullDescription": {
                  "text": "Parentheses are redundant if attribute has no arguments Learn more...",
                  "markdown": "Parentheses are redundant if attribute has no arguments [Learn more...](https://www.jetbrains.com/help/rider/RedundantAttributeParentheses.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftSealed",
                "shortDescription": {
                  "text": "microsoft-sealed clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmicrosoft-sealed clang diagnostic. Learn more...",
                  "markdown": "-Wmicrosoft-sealed clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-sealed)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerSecurityInsecureAPIBcopy",
                "shortDescription": {
                  "text": "security.insecureAPI.bcopy clang static analyzer check"
                },
                "fullDescription": {
                  "text": "security.insecureAPI.bcopy clang static analyzer check. Learn more...",
                  "markdown": "security.insecureAPI.bcopy clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp2aExtensions",
                "shortDescription": {
                  "text": "c++2a-extensions clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wc++2a-extensions clang diagnostic. Learn more...",
                  "markdown": "-Wc++2a-extensions clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wc-2a-extensions)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFloatOverflowConversion",
                "shortDescription": {
                  "text": "float-overflow-conversion clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wfloat-overflow-conversion clang diagnostic. Learn more...",
                  "markdown": "-Wfloat-overflow-conversion clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wfloat-overflow-conversion)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FSharpRedundantBackticks",
                "shortDescription": {
                  "text": "Redundant identifier escaping"
                },
                "fullDescription": {
                  "text": "Redundant use of `` escaping sequences.",
                  "markdown": "Redundant use of \\`\\` escaping sequences."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnknownDirectives",
                "shortDescription": {
                  "text": "unknown-directives clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunknown-directives clang diagnostic. Learn more...",
                  "markdown": "-Wunknown-directives clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunknown-directives)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OtherTagsInsideUnclosedScript",
                "shortDescription": {
                  "text": "Script tag errors (unclosed <script> with other tags inside)"
                },
                "fullDescription": {
                  "text": "<([)script(]) $a1$>$c1$",
                  "markdown": "\\<(\\[)script(\\]) $a1$\\>$c1$"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Html.AttributeNotResolved",
                "shortDescription": {
                  "text": "Unknown attribute"
                },
                "fullDescription": {
                  "text": "Unknown attribute in HTML and related technologies",
                  "markdown": "Unknown attribute in HTML and related technologies"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrangeDefaultValueWhenTypeNotEvident",
                "shortDescription": {
                  "text": "Use preferred style of default value expression when type is not evident"
                },
                "fullDescription": {
                  "text": "Add or remove explicit type specification in default value expression when type is not evident from the usage",
                  "markdown": "Add or remove explicit type specification in default value expression when type is not evident from the usage"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMissingVariableDeclarations",
                "shortDescription": {
                  "text": "missing-variable-declarations clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmissing-variable-declarations clang diagnostic. Learn more...",
                  "markdown": "-Wmissing-variable-declarations clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmissing-variable-declarations)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPrivateHeader",
                "shortDescription": {
                  "text": "private-header clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wprivate-header clang diagnostic. Learn more...",
                  "markdown": "-Wprivate-header clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wprivate-header)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadSpacesAfterKeyword",
                "shortDescription": {
                  "text": "Incorrect spacing (between keyword and parenthesis)"
                },
                "fullDescription": {
                  "text": "Between keyword and parenthesis Learn more...",
                  "markdown": "Between keyword and parenthesis [Learn more...](https://www.jetbrains.com/help/rider/BadSpacesAfterKeyword.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCoreBuiltinNoReturnFunctions",
                "shortDescription": {
                  "text": "core.builtin.NoReturnFunctions clang static analyzer check"
                },
                "fullDescription": {
                  "text": "core.builtin.NoReturnFunctions clang static analyzer check. Learn more...",
                  "markdown": "core.builtin.NoReturnFunctions clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertExp42C",
                "shortDescription": {
                  "text": "cert-exp42-c clang-tidy check"
                },
                "fullDescription": {
                  "text": "cert-exp42-c clang-tidy check. Learn more...",
                  "markdown": "cert-exp42-c clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/exp42-c.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.StyleClassNotFound",
                "shortDescription": {
                  "text": "Style class not found"
                },
                "fullDescription": {
                  "text": "Style class not found",
                  "markdown": "Style class not found"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8947",
                "shortDescription": {
                  "text": "Parameter occurs after interpolated string handler parameter in the parameter list."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantElaboratedTypeSpecifier",
                "shortDescription": {
                  "text": "Redundant elaborated type specifier"
                },
                "fullDescription": {
                  "text": "Elaborated type specifier is redundant and can be deleted",
                  "markdown": "Elaborated type specifier is redundant and can be deleted"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBStringStartsWithIsCultureSpecific",
                "shortDescription": {
                  "text": "String.StartsWith is culture-specific (string.StartsWith(string) is culture-specific)"
                },
                "fullDescription": {
                  "text": "$s$.StartsWith($sarg$)",
                  "markdown": "$s$.StartsWith($sarg$)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticConstexprNotConst",
                "shortDescription": {
                  "text": "constexpr-not-const clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wconstexpr-not-const clang diagnostic. Learn more...",
                  "markdown": "-Wconstexpr-not-const clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wconstexpr-not-const)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpInspections",
                "shortDescription": {
                  "text": "Regular Expression Inspections"
                },
                "fullDescription": {
                  "text": "Regular Expression language inspections",
                  "markdown": "Regular Expression language inspections"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticOptionIgnored",
                "shortDescription": {
                  "text": "option-ignored clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Woption-ignored clang diagnostic. Learn more...",
                  "markdown": "-Woption-ignored clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#woption-ignored)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.PreferAddressByIdToGraphicsParams",
                "shortDescription": {
                  "text": "String based graphics property lookup is inefficient"
                },
                "fullDescription": {
                  "text": "String based property lookup is inefficient, as each time the method is called, the string name is converted into an integer value. Prefer calculating the integer value once and caching the result. Learn more...",
                  "markdown": "String based property lookup is inefficient, as each time the method is called, the string name is converted into an integer value. Prefer calculating the integer value once and caching the result. [Learn more...](https://github.com/JetBrains/resharper-unity/wiki/Avoid-using-string-based-names-for-setting-and-getting-properties-on-Animators,-Shaders-and-Materials)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFloatConversion",
                "shortDescription": {
                  "text": "float-conversion clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wfloat-conversion clang diagnostic. Learn more...",
                  "markdown": "-Wfloat-conversion clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wfloat-conversion)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0197",
                "shortDescription": {
                  "text": "Taking address of marshal-by-reference class field"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://msdn.microsoft.com/en-us/library/y545659k.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.MappedPathHighlighting",
                "shortDescription": {
                  "text": "Mapped path"
                },
                "fullDescription": {
                  "text": "Path is mapped to a different path in project settings",
                  "markdown": "Path is mapped to a different path in project settings"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppAccessSpecifierWithNoDeclarations",
                "shortDescription": {
                  "text": "Access specifier does not affect any declaration"
                },
                "fullDescription": {
                  "text": "An access specifier does not affect any declaration and is redundant",
                  "markdown": "An access specifier does not affect any declaration and is redundant"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StructuredMessageTemplateProblem",
                "shortDescription": {
                  "text": "Structured message template problems"
                },
                "fullDescription": {
                  "text": "Structured message template syntax errors (unescaped braces, unused arguments, etc.)",
                  "markdown": "Structured message template syntax errors (unescaped braces, unused arguments, etc.)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticVisibility",
                "shortDescription": {
                  "text": "visibility clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wvisibility clang diagnostic. Learn more...",
                  "markdown": "-Wvisibility clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wvisibility)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDanglingGsl",
                "shortDescription": {
                  "text": "dangling-gsl clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdangling-gsl clang diagnostic. Learn more...",
                  "markdown": "-Wdangling-gsl clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdangling-gsl)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EntityNameCapturedOnly.Global",
                "shortDescription": {
                  "text": "Entity is only used to capture its name (non-private accessibility)"
                },
                "fullDescription": {
                  "text": "Local variable/parameter is only used to capture its name via 'nameof' expression",
                  "markdown": "Local variable/parameter is only used to capture its name via 'nameof' expression"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCocoaIncompatibleMethodTypes",
                "shortDescription": {
                  "text": "osx.cocoa.IncompatibleMethodTypes clang static analyzer check"
                },
                "fullDescription": {
                  "text": "osx.cocoa.IncompatibleMethodTypes clang static analyzer check. Learn more...",
                  "markdown": "osx.cocoa.IncompatibleMethodTypes clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyPerformanceUnnecessaryValueParam",
                "shortDescription": {
                  "text": "performance-unnecessary-value-param clang-tidy check"
                },
                "fullDescription": {
                  "text": "performance-unnecessary-value-param clang-tidy check. Learn more...",
                  "markdown": "performance-unnecessary-value-param clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/unnecessary-value-param.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppEnforceWhileStatementBraces",
                "shortDescription": {
                  "text": "Use preferred braces style (enforce braces in 'while' statement)"
                },
                "fullDescription": {
                  "text": "Use braces to separate 'while' statement body",
                  "markdown": "Use braces to separate 'while' statement body"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertToNullCoalescingCompoundAssignment",
                "shortDescription": {
                  "text": "Use compound assignment"
                },
                "fullDescription": {
                  "text": "Replace null-coalescing expression with compound assignment",
                  "markdown": "Replace null-coalescing expression with compound assignment"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseStringInterpolation",
                "shortDescription": {
                  "text": "Use string interpolation expression"
                },
                "fullDescription": {
                  "text": "Replace string construction by 'String.Format()' method invocation with string interpolation expression Learn more...",
                  "markdown": "Replace string construction by 'String.Format()' method invocation with string interpolation expression [Learn more...](https://www.jetbrains.com/help/rider/UseStringInterpolation.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilitySimplifySubscriptExpr",
                "shortDescription": {
                  "text": "readability-simplify-subscript-expr clang-tidy check"
                },
                "fullDescription": {
                  "text": "readability-simplify-subscript-expr clang-tidy check. Learn more...",
                  "markdown": "readability-simplify-subscript-expr clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/simplify-subscript-expr.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIgnoredPragmaOptimize",
                "shortDescription": {
                  "text": "ignored-pragma-optimize clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wignored-pragma-optimize clang diagnostic. Learn more...",
                  "markdown": "-Wignored-pragma-optimize clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wignored-pragma-optimize)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedPragma",
                "shortDescription": {
                  "text": "deprecated-pragma clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdeprecated-pragma clang diagnostic. Learn more...",
                  "markdown": "-Wdeprecated-pragma clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-pragma)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FSharpRedundantStringInterpolation",
                "shortDescription": {
                  "text": "Redundant string interpolation"
                },
                "fullDescription": {
                  "text": "String interpolation expression without arguments is redundant.",
                  "markdown": "String interpolation expression without arguments is redundant."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MultipleSpaces",
                "shortDescription": {
                  "text": "Incorrect spacing (multiple spaces are prohibited)"
                },
                "fullDescription": {
                  "text": "Multiple spaces are prohibited Learn more...",
                  "markdown": "Multiple spaces are prohibited [Learn more...](https://www.jetbrains.com/help/rider/MultipleSpaces.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertConditionalTernaryExpressionToSwitchExpression",
                "shortDescription": {
                  "text": "Replace ternary expression with 'switch' expression"
                },
                "fullDescription": {
                  "text": "Replace chain of ternary expressions with 'switch' expression",
                  "markdown": "Replace chain of ternary expressions with 'switch' expression"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyGoogleGlobalNamesInHeaders",
                "shortDescription": {
                  "text": "google-global-names-in-headers clang-tidy check"
                },
                "fullDescription": {
                  "text": "google-global-names-in-headers clang-tidy check. Learn more...",
                  "markdown": "google-global-names-in-headers clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/global-names-in-headers.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnusedValue",
                "shortDescription": {
                  "text": "unused-value clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunused-value clang diagnostic. Learn more...",
                  "markdown": "-Wunused-value clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunused-value)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticOdr",
                "shortDescription": {
                  "text": "odr clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wodr clang diagnostic. Learn more...",
                  "markdown": "-Wodr clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wodr)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BuiltInTypeReferenceStyleForMemberAccess",
                "shortDescription": {
                  "text": "Replace built-in type reference with a CLR type name or a keyword in static member access expressions"
                },
                "fullDescription": {
                  "text": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics Learn more...",
                  "markdown": "CLR type names and corresponding C# keyword are interchangeable and do not affect code semantics [Learn more...](https://www.jetbrains.com/help/rider/BuiltInTypeReferenceStyleForMemberAccess.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedIncrementBool",
                "shortDescription": {
                  "text": "deprecated-increment-bool clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdeprecated-increment-bool clang diagnostic. Learn more...",
                  "markdown": "-Wdeprecated-increment-bool clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-increment-bool)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpecifyStringComparison",
                "shortDescription": {
                  "text": "Specify string comparison explicitly"
                },
                "fullDescription": {
                  "text": "Specify string comparison explicitly Learn more...",
                  "markdown": "Specify string comparison explicitly [Learn more...](https://www.jetbrains.com/help/rider/SpecifyStringComparison.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.RedundantAttributeOnTarget",
                "shortDescription": {
                  "text": "Redundant attribute usage (attribute is redundant when applied to this declaration type)"
                },
                "fullDescription": {
                  "text": "The attribute does not define any restrictions on valid targets, but is only useful when applied to specific declarations, e.g. field, class or method. Learn more...",
                  "markdown": "The attribute does not define any restrictions on valid targets, but is only useful when applied to specific declarations, e.g. field, class or method. [Learn more...](https://github.com/JetBrains/resharper-unity/wiki/Attribute-is-redundant-when-applied-to-this-declaration-type)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerSecurityInsecureAPIRand",
                "shortDescription": {
                  "text": "security.insecureAPI.rand clang static analyzer check"
                },
                "fullDescription": {
                  "text": "security.insecureAPI.rand clang static analyzer check. Learn more...",
                  "markdown": "security.insecureAPI.rand clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantVerbatimPrefix",
                "shortDescription": {
                  "text": "Redundant verbatim prefix"
                },
                "fullDescription": {
                  "text": "'@' prefix can be safely removed from identifier",
                  "markdown": "'@' prefix can be safely removed from identifier"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Mvc.ControllerNotResolved",
                "shortDescription": {
                  "text": "MVC (unknown controller)"
                },
                "fullDescription": {
                  "text": "Unknown ASP.NET MVC Controller",
                  "markdown": "Unknown ASP.NET MVC Controller"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantEmptySwitchSection",
                "shortDescription": {
                  "text": "Redundant empty switch section"
                },
                "fullDescription": {
                  "text": "Redundant default switch branch: \r\n  switch (foo)\r\n  {\r\n    case Bar:\r\n      DoSomething;\r\n      break;\r\n    default: // here\r\n      break;\r\n  }\r\n Learn more...",
                  "markdown": "Redundant default switch branch:\n\n```\n\r\n  switch (foo)\r\n  {\r\n    case Bar:\r\n      DoSomething;\r\n      break;\r\n    default: // here\r\n      break;\r\n  }\r\n```\n\n[Learn more...](https://www.jetbrains.com/help/rider/RedundantEmptySwitchSection.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInfiniteRecursion",
                "shortDescription": {
                  "text": "infinite-recursion clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Winfinite-recursion clang diagnostic. Learn more...",
                  "markdown": "-Winfinite-recursion clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#winfinite-recursion)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SimplifyConditionalOperator",
                "shortDescription": {
                  "text": "Simplify conditional operator"
                },
                "fullDescription": {
                  "text": "Conditional operator contains 'True' or 'False' in result branch, for example \r\n                If(condition, True, elseBranch)\r\n                If(condition, thenBranch : True)",
                  "markdown": "Conditional operator contains 'True' or 'False' in result branch, for example\n\n```\n\r\n                If(condition, True, elseBranch)\r\n                If(condition, thenBranch : True)\r\n              \n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertDcl51Cpp",
                "shortDescription": {
                  "text": "cert-dcl51-cpp clang-tidy check"
                },
                "fullDescription": {
                  "text": "cert-dcl51-cpp clang-tidy check. Learn more...",
                  "markdown": "cert-dcl51-cpp clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/dcl51-cpp.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NegativeIndex",
                "shortDescription": {
                  "text": "Possible 'System.ArgumentOutOfRangeException'. Index must be a non-negative integer."
                },
                "fullDescription": {
                  "text": "'System.Index' requires a non-negative argument",
                  "markdown": "'System.Index' requires a non-negative argument"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppUseEqualsDelete",
                "shortDescription": {
                  "text": "hicpp-use-equals-delete clang-tidy check"
                },
                "fullDescription": {
                  "text": "hicpp-use-equals-delete clang-tidy check. Learn more...",
                  "markdown": "hicpp-use-equals-delete clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/use-equals-delete.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8971",
                "shortDescription": {
                  "text": "[InterpolatedStringHandlerArgument] has no effect when applied to lambda parameters and will be ignored at the call site."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuNullPointerArithmetic",
                "shortDescription": {
                  "text": "gnu-null-pointer-arithmetic clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wgnu-null-pointer-arithmetic clang diagnostic. Learn more...",
                  "markdown": "-Wgnu-null-pointer-arithmetic clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-null-pointer-arithmetic)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.MethodWithParametersAndTestAttribute",
                "shortDescription": {
                  "text": "NUnit. Values for test method parameters are not provided."
                },
                "fullDescription": {
                  "text": "Parameters of NUnit test method must be provided with values through either [Values] or [TestCase] attribute. Learn more...",
                  "markdown": "Parameters of NUnit test method must be provided with values through either \\[Values\\] or \\[TestCase\\] attribute. [Learn more...](https://www.jetbrains.com/help/rider/NUnit.MethodWithParametersAndTestAttribute.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Asp.CustomPageParserFilterType",
                "shortDescription": {
                  "text": "Unsupported pageParserFilterType"
                },
                "fullDescription": {
                  "text": "ReSharper does not support pageParserFilterType specified in web.config",
                  "markdown": "ReSharper does not support pageParserFilterType specified in web.config"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDistributedObjectModifiers",
                "shortDescription": {
                  "text": "distributed-object-modifiers clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdistributed-object-modifiers clang diagnostic. Learn more...",
                  "markdown": "-Wdistributed-object-modifiers clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdistributed-object-modifiers)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadGenericBracketsSpaces",
                "shortDescription": {
                  "text": "Incorrect spacing (around generic brackets)"
                },
                "fullDescription": {
                  "text": "Around generic brackets Learn more...",
                  "markdown": "Around generic brackets [Learn more...](https://www.jetbrains.com/help/rider/BadGenericBracketsSpaces.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyFuchsiaHeaderAnonNamespaces",
                "shortDescription": {
                  "text": "fuchsia-header-anon-namespaces clang-tidy check"
                },
                "fullDescription": {
                  "text": "fuchsia-header-anon-namespaces clang-tidy check. Learn more...",
                  "markdown": "fuchsia-header-anon-namespaces clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/fuchsia/header-anon-namespaces.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantOverriddenMember",
                "shortDescription": {
                  "text": "Redundant member override"
                },
                "fullDescription": {
                  "text": "Override of a virtual member is redundant because it consists of only a call to the base member Learn more...",
                  "markdown": "Override of a virtual member is redundant because it consists of only a call to the base member [Learn more...](https://www.jetbrains.com/help/rider/RedundantOverriddenMember.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticImplicitFallthrough",
                "shortDescription": {
                  "text": "implicit-fallthrough clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wimplicit-fallthrough clang diagnostic. Learn more...",
                  "markdown": "-Wimplicit-fallthrough clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-fallthrough)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NotResolvedInText",
                "shortDescription": {
                  "text": "Cannot resolve symbol in text argument"
                },
                "fullDescription": {
                  "text": "Cannot resolve symbol in text argument Learn more...",
                  "markdown": "Cannot resolve symbol in text argument [Learn more...](https://www.jetbrains.com/help/rider/NotResolvedInText.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppCompileTimeConstantCanBeReplacedWithBooleanConstant",
                "shortDescription": {
                  "text": "Compile-time constant expression can be replaced with either 'true' or 'false'"
                },
                "fullDescription": {
                  "text": "Compile-time integral constant expression or nullptr is converted to bool and can be replaced with 'true' or 'false'",
                  "markdown": "Compile-time integral constant expression or nullptr is converted to bool and can be replaced with 'true' or 'false'"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticExcessInitializers",
                "shortDescription": {
                  "text": "excess-initializers clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wexcess-initializers clang diagnostic. Learn more...",
                  "markdown": "-Wexcess-initializers clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wexcess-initializers)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedImportClause",
                "shortDescription": {
                  "text": "Unused import clause"
                },
                "fullDescription": {
                  "text": "Import clause is not used in the file and could be safely removed",
                  "markdown": "Import clause is not used in the file and could be safely removed"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithOfType.Where",
                "shortDescription": {
                  "text": "Replace with OfType<T>().Where() (replace with OfType<T>().Where(..))"
                },
                "fullDescription": {
                  "text": "$seq$.Select($x$ => $x$ as $T$).Where($y$ => $y$ != null && $expr$)",
                  "markdown": "$seq$.Select($x$ =\\> $x$ as $T$).Where($y$ =\\> $y$ != null \\&\\& $expr$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8981",
                "shortDescription": {
                  "text": "The type name only contains lower-cased ASCII characters. Such names may become reserved for the language"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseImplicitlyTypedVariable",
                "shortDescription": {
                  "text": "Use implicitly typed variable declaration"
                },
                "fullDescription": {
                  "text": "Use implicitly typed variable declaration",
                  "markdown": "Use implicitly typed variable declaration"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticBuiltinAssumeAlignedAlignment",
                "shortDescription": {
                  "text": "builtin-assume-aligned-alignment clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wbuiltin-assume-aligned-alignment clang diagnostic. Learn more...",
                  "markdown": "-Wbuiltin-assume-aligned-alignment clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wbuiltin-assume-aligned-alignment)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerWebkitNoUncountedMemberChecker",
                "shortDescription": {
                  "text": "webkit.NoUncountedMemberChecker clang static analyzer check"
                },
                "fullDescription": {
                  "text": "webkit.NoUncountedMemberChecker clang static analyzer check. Learn more...",
                  "markdown": "webkit.NoUncountedMemberChecker clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUndef",
                "shortDescription": {
                  "text": "undef clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wundef clang diagnostic. Learn more...",
                  "markdown": "-Wundef clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wundef)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticImplicitlyUnsignedLiteral",
                "shortDescription": {
                  "text": "implicitly-unsigned-literal clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wimplicitly-unsigned-literal clang diagnostic. Learn more...",
                  "markdown": "-Wimplicitly-unsigned-literal clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wimplicitly-unsigned-literal)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.RedundantCollectionProperty",
                "shortDescription": {
                  "text": "Redundant empty collection property setter"
                },
                "fullDescription": {
                  "text": "Empty collection property setter is redundant and can be safely removed",
                  "markdown": "Empty collection property setter is redundant and can be safely removed"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnavailableDeclarations",
                "shortDescription": {
                  "text": "unavailable-declarations clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunavailable-declarations clang diagnostic. Learn more...",
                  "markdown": "-Wunavailable-declarations clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunavailable-declarations)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyObjcForbiddenSubclassing",
                "shortDescription": {
                  "text": "objc-forbidden-subclassing clang-tidy check"
                },
                "fullDescription": {
                  "text": "objc-forbidden-subclassing clang-tidy check. Learn more...",
                  "markdown": "objc-forbidden-subclassing clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/objc/forbidden-subclassing.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Asp.Entity",
                "shortDescription": {
                  "text": "Unknown HTML entity"
                },
                "fullDescription": {
                  "text": "Unknown HTML entity",
                  "markdown": "Unknown HTML entity"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneUnusedReturnValue",
                "shortDescription": {
                  "text": "bugprone-unused-return-value clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-unused-return-value clang-tidy check. Learn more...",
                  "markdown": "bugprone-unused-return-value clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/unused-return-value.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeRedundantVoidArg",
                "shortDescription": {
                  "text": "modernize-redundant-void-arg clang-tidy check"
                },
                "fullDescription": {
                  "text": "modernize-redundant-void-arg clang-tidy check. Learn more...",
                  "markdown": "modernize-redundant-void-arg clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/redundant-void-arg.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClassCannotBeInstantiated",
                "shortDescription": {
                  "text": "Class cannot be instantiated"
                },
                "fullDescription": {
                  "text": "Remove 'sealed' modifier or make constructor public or internal",
                  "markdown": "Remove 'sealed' modifier or make constructor public or internal"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8966",
                "shortDescription": {
                  "text": "The CallerArgumentExpressionAttribute will have no effect because it applies to a member that is used in contexts that do not allow optional arguments"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8965",
                "shortDescription": {
                  "text": "The CallerArgumentExpressionAttribute applied to parameter will have no effect because it's self-referential"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrangeTrailingCommaInMultilineLists",
                "shortDescription": {
                  "text": "Use preferred style for trailing comma before new line in multiline lists"
                },
                "fullDescription": {
                  "text": "Add or remove trailing comma before new line in multiline lists according to code style settings Learn more...",
                  "markdown": "Add or remove trailing comma before new line in multiline lists according to code style settings [Learn more...](https://www.jetbrains.com/help/rider/ArrangeTrailingCommaInMultilineLists.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8963",
                "shortDescription": {
                  "text": "The CallerArgumentExpressionAttribute is applied with an invalid parameter name."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyGoogleObjcAvoidNsobjectNew",
                "shortDescription": {
                  "text": "google-objc-avoid-nsobject-new clang-tidy check"
                },
                "fullDescription": {
                  "text": "google-objc-avoid-nsobject-new clang-tidy check. Learn more...",
                  "markdown": "google-objc-avoid-nsobject-new clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/google/objc-avoid-nsobject-new.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneStringIntegerAssignment",
                "shortDescription": {
                  "text": "bugprone-string-integer-assignment clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-string-integer-assignment clang-tidy check. Learn more...",
                  "markdown": "bugprone-string-integer-assignment clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/string-integer-assignment.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8962",
                "shortDescription": {
                  "text": "The CallerArgumentExpressionAttribute will have no effect; it is overridden by the CallerMemberNameAttribute"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeUseNodiscard",
                "shortDescription": {
                  "text": "modernize-use-nodiscard clang-tidy check"
                },
                "fullDescription": {
                  "text": "modernize-use-nodiscard clang-tidy check. Learn more...",
                  "markdown": "modernize-use-nodiscard clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-nodiscard.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8961",
                "shortDescription": {
                  "text": "The CallerArgumentExpressionAttribute will have no effect; it is overridden by the CallerFilePathAttribute"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8960",
                "shortDescription": {
                  "text": "The CallerArgumentExpressionAttribute will have no effect; it is overridden by the CallerLineNumberAttribute"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedAnonEnumEnumConversion",
                "shortDescription": {
                  "text": "deprecated-anon-enum-enum-conversion clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdeprecated-anon-enum-enum-conversion clang diagnostic. Learn more...",
                  "markdown": "-Wdeprecated-anon-enum-enum-conversion clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-anon-enum-enum-conversion)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFormatNonIso",
                "shortDescription": {
                  "text": "format-non-iso clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wformat-non-iso clang diagnostic. Learn more...",
                  "markdown": "-Wformat-non-iso clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wformat-non-iso)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EnforceForStatementBraces",
                "shortDescription": {
                  "text": "Use preferred braces style (enforce braces in 'for' statement)"
                },
                "fullDescription": {
                  "text": "Use braces to separate 'for' statement body Learn more...",
                  "markdown": "Use braces to separate 'for' statement body [Learn more...](https://www.jetbrains.com/help/rider/EnforceForStatementBraces.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseAwaitUsing",
                "shortDescription": {
                  "text": "Convert into 'await using' statement or declaration"
                },
                "fullDescription": {
                  "text": "Replace 'using' statement or declaration with 'await using' form",
                  "markdown": "Replace 'using' statement or declaration with 'await using' form"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantRecordBody",
                "shortDescription": {
                  "text": "Redundant 'record' type declaration body"
                },
                "fullDescription": {
                  "text": "Empty 'record' type declaration can be replaced with semicolon",
                  "markdown": "Empty 'record' type declaration can be replaced with semicolon"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppOutdentIsOffPrevLevel",
                "shortDescription": {
                  "text": "Incorrect indent (line indent should be restored to the previous level elsewhere)"
                },
                "fullDescription": {
                  "text": "Line indent should be restored to the previous level elsewhere",
                  "markdown": "Line indent should be restored to the previous level elsewhere"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyPerformanceMoveConstructorInit",
                "shortDescription": {
                  "text": "performance-move-constructor-init clang-tidy check"
                },
                "fullDescription": {
                  "text": "performance-move-constructor-init clang-tidy check. Learn more...",
                  "markdown": "performance-move-constructor-init clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/move-constructor-init.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LambdaShouldNotCaptureContext",
                "shortDescription": {
                  "text": "Lambda expression/anonymous method must not have captures of the containing context"
                },
                "fullDescription": {
                  "text": "Lambda expression/anonymous method passed to parameter annotated by '[RequireStaticDelegate]' attribute must not have captures of the containing context (local variables, local functions, 'this' reference) to avoid heap allocations Learn more...",
                  "markdown": "Lambda expression/anonymous method passed to parameter annotated by '\\[RequireStaticDelegate\\]' attribute must not have captures of the containing context (local variables, local functions, 'this' reference) to avoid heap allocations [Learn more...](https://www.jetbrains.com/help/rider/LambdaShouldNotCaptureContext.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp11Extensions",
                "shortDescription": {
                  "text": "c++11-extensions clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wc++11-extensions clang diagnostic. Learn more...",
                  "markdown": "-Wc++11-extensions clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wc-11-extensions)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadColonSpaces",
                "shortDescription": {
                  "text": "Incorrect spacing (around colon)"
                },
                "fullDescription": {
                  "text": "Around colon Learn more...",
                  "markdown": "Around colon [Learn more...](https://www.jetbrains.com/help/rider/BadColonSpaces.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyMiscConstCorrectness",
                "shortDescription": {
                  "text": "misc-const-correctness clang-tidy check"
                },
                "fullDescription": {
                  "text": "misc-const-correctness clang-tidy check. Learn more...",
                  "markdown": "misc-const-correctness clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc/const-correctness.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantSetterValueParameterDeclaration",
                "shortDescription": {
                  "text": "Explicit 'value' parameter declaration is redundant"
                },
                "fullDescription": {
                  "text": "Explicit set accessor 'value' parameter declaration is redundant",
                  "markdown": "Explicit set accessor 'value' parameter declaration is redundant"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithOfType.FirstOrDefault.2",
                "shortDescription": {
                  "text": "Replace with OfType<T>().FirstOrDefault() (replace with OfType(Of ..)().FirstOrDefault(..))"
                },
                "fullDescription": {
                  "text": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).FirstOrDefault(Function ($y$) $y$ IsNot Nothing AndAlso $expr$)",
                  "markdown": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).FirstOrDefault(Function ($y$) $y$ IsNot Nothing AndAlso $expr$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithOfType.FirstOrDefault.1",
                "shortDescription": {
                  "text": "Replace with OfType<T>().FirstOrDefault() (replace with OfType(Of ..)().FirstOrDefault())"
                },
                "fullDescription": {
                  "text": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).FirstOrDefault(Function ($y$) $y$ IsNot Nothing)",
                  "markdown": "$seq$.Select(Function ($x$) TryCast($x$, $T$)).FirstOrDefault(Function ($y$) $y$ IsNot Nothing)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPragmaSystemHeaderOutsideHeader",
                "shortDescription": {
                  "text": "pragma-system-header-outside-header clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wpragma-system-header-outside-header clang diagnostic. Learn more...",
                  "markdown": "-Wpragma-system-header-outside-header clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wpragma-system-header-outside-header)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithOfType.Last.1",
                "shortDescription": {
                  "text": "Replace with OfType<T>().Last()"
                },
                "fullDescription": {
                  "text": "$seq$.Select($x$ => $x$ as $T$).Last($y$ => $y$ != null)",
                  "markdown": "$seq$.Select($x$ =\\> $x$ as $T$).Last($y$ =\\> $y$ != null)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithOfType.Last.2",
                "shortDescription": {
                  "text": "Replace with OfType<T>().Last() (replace with OfType<T>().Last(..))"
                },
                "fullDescription": {
                  "text": "$seq$.Select($x$ => $x$ as $T$).Last($y$ => $y$ != null && $expr$)",
                  "markdown": "$seq$.Select($x$ =\\> $x$ as $T$).Last($y$ =\\> $y$ != null \\&\\& $expr$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftFlexibleArray",
                "shortDescription": {
                  "text": "microsoft-flexible-array clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmicrosoft-flexible-array clang diagnostic. Learn more...",
                  "markdown": "-Wmicrosoft-flexible-array clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-flexible-array)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnableToOpenStatsFile",
                "shortDescription": {
                  "text": "unable-to-open-stats-file clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunable-to-open-stats-file clang diagnostic. Learn more...",
                  "markdown": "-Wunable-to-open-stats-file clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunable-to-open-stats-file)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PossibleWriteToMe",
                "shortDescription": {
                  "text": "Possible write to 'Me'"
                },
                "fullDescription": {
                  "text": "Possible write to 'Me'.",
                  "markdown": "Possible write to 'Me'."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ByRefArgumentIsVolatileField",
                "shortDescription": {
                  "text": "Captured reference to 'volatile' field will not be treated as 'volatile'"
                },
                "fullDescription": {
                  "text": "Captured reference to 'volatile' field will not be treated as 'volatile'",
                  "markdown": "Captured reference to 'volatile' field will not be treated as 'volatile'"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppMissingBlankLines",
                "shortDescription": {
                  "text": "Incorrect blank lines (blank lines are missing elsewhere)"
                },
                "fullDescription": {
                  "text": "Blank lines are missing elsewhere",
                  "markdown": "Blank lines are missing elsewhere"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticHlslExtensions",
                "shortDescription": {
                  "text": "hlsl-extensions clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Whlsl-extensions clang diagnostic. Learn more...",
                  "markdown": "-Whlsl-extensions clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#whlsl-extensions)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAbseilStringFindStartswith",
                "shortDescription": {
                  "text": "abseil-string-find-startswith clang-tidy check"
                },
                "fullDescription": {
                  "text": "abseil-string-find-startswith clang-tidy check. Learn more...",
                  "markdown": "abseil-string-find-startswith clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/string-find-startswith.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WebConfig.UnusedAddTag",
                "shortDescription": {
                  "text": "Redundant add element"
                },
                "fullDescription": {
                  "text": "Add element is redundant because it is cleared later and can be safely removed",
                  "markdown": "Add element is redundant because it is cleared later and can be safely removed"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantCatchClause",
                "shortDescription": {
                  "text": "Redundant catch clause"
                },
                "fullDescription": {
                  "text": "Catch clause with single 'throw' statement is redundant Learn more...",
                  "markdown": "Catch clause with single 'throw' statement is redundant [Learn more...](https://www.jetbrains.com/help/rider/RedundantCatchClause.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.FieldModifierRequiresNameAttribute",
                "shortDescription": {
                  "text": "x:FieldModifier attribute requires x:Name attribute"
                },
                "fullDescription": {
                  "text": "x:FieldModifier attribute requires x:Name attribute",
                  "markdown": "x:FieldModifier attribute requires x:Name attribute"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticArcBridgeCastsDisallowedInNonarc",
                "shortDescription": {
                  "text": "arc-bridge-casts-disallowed-in-nonarc clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Warc-bridge-casts-disallowed-in-nonarc clang diagnostic. Learn more...",
                  "markdown": "-Warc-bridge-casts-disallowed-in-nonarc clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#warc-bridge-casts-disallowed-in-nonarc)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyObjcSuperSelf",
                "shortDescription": {
                  "text": "objc-super-self clang-tidy check"
                },
                "fullDescription": {
                  "text": "objc-super-self clang-tidy check. Learn more...",
                  "markdown": "objc-super-self clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/objc/super-self.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUE4BlueprintCallableFunctionMayBeConst",
                "shortDescription": {
                  "text": "BlueprintCallable function can be made const"
                },
                "fullDescription": {
                  "text": "BlueprintCallable function can be made const",
                  "markdown": "BlueprintCallable function can be made const"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unreal Engine",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAbsoluteValue",
                "shortDescription": {
                  "text": "absolute-value clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wabsolute-value clang diagnostic. Learn more...",
                  "markdown": "-Wabsolute-value clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wabsolute-value)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppNonExplicitConversionOperator",
                "shortDescription": {
                  "text": "Non-explicit conversion operator"
                },
                "fullDescription": {
                  "text": "Non-explicit conversion operator",
                  "markdown": "Non-explicit conversion operator"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedThisCapture",
                "shortDescription": {
                  "text": "deprecated-this-capture clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdeprecated-this-capture clang diagnostic. Learn more...",
                  "markdown": "-Wdeprecated-this-capture clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-this-capture)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNullability",
                "shortDescription": {
                  "text": "nullability clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wnullability clang diagnostic. Learn more...",
                  "markdown": "-Wnullability clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wnullability)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertDcl16C",
                "shortDescription": {
                  "text": "cert-dcl16-c clang-tidy check"
                },
                "fullDescription": {
                  "text": "cert-dcl16-c clang-tidy check. Learn more...",
                  "markdown": "cert-dcl16-c clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/dcl16-c.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticLogicalNotParentheses",
                "shortDescription": {
                  "text": "logical-not-parentheses clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wlogical-not-parentheses clang diagnostic. Learn more...",
                  "markdown": "-Wlogical-not-parentheses clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wlogical-not-parentheses)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAutoImport",
                "shortDescription": {
                  "text": "auto-import clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wauto-import clang diagnostic. Learn more...",
                  "markdown": "-Wauto-import clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wauto-import)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUPropertyMacroCallHasNoEffect",
                "shortDescription": {
                  "text": "UPROPERTY macro call has no effect"
                },
                "fullDescription": {
                  "text": "UPROPERTY macro call has no effect outside of UCLASS or USTRUCT",
                  "markdown": "UPROPERTY macro call has no effect outside of UCLASS or USTRUCT"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unreal Engine",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyOpenmpExceptionEscape",
                "shortDescription": {
                  "text": "openmp-exception-escape clang-tidy check"
                },
                "fullDescription": {
                  "text": "openmp-exception-escape clang-tidy check. Learn more...",
                  "markdown": "openmp-exception-escape clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/openmp/exception-escape.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticTautologicalPointerCompare",
                "shortDescription": {
                  "text": "tautological-pointer-compare clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wtautological-pointer-compare clang diagnostic. Learn more...",
                  "markdown": "-Wtautological-pointer-compare clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wtautological-pointer-compare)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OlTagContainsNonLiElements",
                "shortDescription": {
                  "text": "Elements not allowed in context (<ol> contains elements other than <li> or <li> is unclosed)"
                },
                "fullDescription": {
                  "text": "$cont1$([)$cont2$(])$cont3$",
                  "markdown": "$cont1$(\\[)$cont2$(\\])$cont3$"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticC99Designator",
                "shortDescription": {
                  "text": "c99-designator clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wc99-designator clang diagnostic. Learn more...",
                  "markdown": "-Wc99-designator clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wc99-designator)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadMemberAccessSpaces",
                "shortDescription": {
                  "text": "Incorrect spacing (around member access symbols)"
                },
                "fullDescription": {
                  "text": "Around member access symbols Learn more...",
                  "markdown": "Around member access symbols [Learn more...](https://www.jetbrains.com/help/rider/BadMemberAccessSpaces.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xunit.XunitTestWithConsoleOutput",
                "shortDescription": {
                  "text": "Console output in Xunit tests"
                },
                "fullDescription": {
                  "text": "Xunit tests should use ITestOutputHelper instead of System.Console. Learn more...",
                  "markdown": "Xunit tests should use ITestOutputHelper instead of System.Console. [Learn more...](https://www.jetbrains.com/help/rider/Xunit.XunitTestWithConsoleOutput.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Xunit",
                      "index": 84,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNonnull",
                "shortDescription": {
                  "text": "nonnull clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wnonnull clang diagnostic. Learn more...",
                  "markdown": "-Wnonnull clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wnonnull)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertIfToOrExpression",
                "shortDescription": {
                  "text": "Convert 'if' into '||'"
                },
                "fullDescription": {
                  "text": "Suggest to replace bool result = x > 0; if (y > 0) result = true; To bool result = x > 0 || y > 0; Learn more...",
                  "markdown": "Suggest to replace bool result = x \\> 0; if (y \\> 0) result = true; To bool result = x \\> 0 \\|\\| y \\> 0; [Learn more...](https://www.jetbrains.com/help/rider/ConvertIfToOrExpression.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantInclude",
                "shortDescription": {
                  "text": "Redundant include"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "T4",
                      "index": 62,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInvalidInitializerFromSystemHeader",
                "shortDescription": {
                  "text": "invalid-initializer-from-system-header clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Winvalid-initializer-from-system-header clang diagnostic. Learn more...",
                  "markdown": "-Winvalid-initializer-from-system-header clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#winvalid-initializer-from-system-header)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneSuspiciousMemsetUsage",
                "shortDescription": {
                  "text": "bugprone-suspicious-memset-usage clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-suspicious-memset-usage clang-tidy check. Learn more...",
                  "markdown": "bugprone-suspicious-memset-usage clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/suspicious-memset-usage.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedArrayCompare",
                "shortDescription": {
                  "text": "deprecated-array-compare clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdeprecated-array-compare clang diagnostic. Learn more...",
                  "markdown": "-Wdeprecated-array-compare clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-array-compare)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithSingleCallToCount",
                "shortDescription": {
                  "text": "Replace with single call to Count(..)"
                },
                "fullDescription": {
                  "text": "$seq$.Where($x$ => $expr$).Count()",
                  "markdown": "$seq$.Where($x$ =\\> $expr$).Count()"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppAbstractVirtualFunctionCallInCtor",
                "shortDescription": {
                  "text": "Call to a virtual function inside a constructor/destructor will result in a pure virtual function call"
                },
                "fullDescription": {
                  "text": "Calls to pure virtual functions inside constructors and destructors will result in runtime errors",
                  "markdown": "Calls to pure virtual functions inside constructors and destructors will result in runtime errors"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.BurstSharedStaticCreate",
                "shortDescription": {
                  "text": "Some SharedStatic`1.GetOrCreate overloads cause compiler errors"
                },
                "fullDescription": {
                  "text": "Some SharedStatic`1.GetOrCreate overloads cause compiler errors",
                  "markdown": "Some SharedStatic\\`1.GetOrCreate overloads cause compiler errors"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity Burst Compiler Warnings",
                      "index": 34,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppStaticAssert",
                "shortDescription": {
                  "text": "hicpp-static-assert clang-tidy check"
                },
                "fullDescription": {
                  "text": "hicpp-static-assert clang-tidy check. Learn more...",
                  "markdown": "hicpp-static-assert clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/static-assert.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InvalidValueType",
                "shortDescription": {
                  "text": "Resource value type is invalid"
                },
                "fullDescription": {
                  "text": "Resource in base culture has another value type",
                  "markdown": "Resource in base culture has another value type"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantPropertyParentheses",
                "shortDescription": {
                  "text": "Parameterless property parentheses are redundant"
                },
                "fullDescription": {
                  "text": "Parameterless property parameter parentheses are redundant",
                  "markdown": "Parameterless property parameter parentheses are redundant"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ContainerAnnotationRedundancy",
                "shortDescription": {
                  "text": "Container nullability attribute usage with declaration of non-container type"
                },
                "fullDescription": {
                  "text": "Container nullability attribute usage with declaration of non-container type does not affect code analysis",
                  "markdown": "Container nullability attribute usage with declaration of non-container type does not affect code analysis"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBUseArrayCreationExpression.1",
                "shortDescription": {
                  "text": "Use array creation expression"
                },
                "fullDescription": {
                  "text": "Array.CreateInstance(GetType($T$), $long$)",
                  "markdown": "Array.CreateInstance(GetType($T$), $long$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBUseArrayCreationExpression.2",
                "shortDescription": {
                  "text": "Use array creation expression"
                },
                "fullDescription": {
                  "text": "Array.CreateInstance(GetType($T$), $long$, $long2$)",
                  "markdown": "Array.CreateInstance(GetType($T$), $long$, $long2$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGlobalIsel",
                "shortDescription": {
                  "text": "global-isel clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wglobal-isel clang diagnostic. Learn more...",
                  "markdown": "-Wglobal-isel clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wglobal-isel)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ParameterOnlyUsedForPreconditionCheck.Local",
                "shortDescription": {
                  "text": "Parameter is only used for precondition check (private accessibility)"
                },
                "fullDescription": {
                  "text": "Parameter is only used for precondition check",
                  "markdown": "Parameter is only used for precondition check"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TryCastAlwaysSucceeds",
                "shortDescription": {
                  "text": "Safe cast expression always succeeds"
                },
                "fullDescription": {
                  "text": "Safe cast expression always succeeds and can be replaced with a direct cast Learn more...",
                  "markdown": "Safe cast expression always succeeds and can be replaced with a direct cast [Learn more...](https://www.jetbrains.com/help/rider/TryCastAlwaysSucceeds.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftCppMacro",
                "shortDescription": {
                  "text": "microsoft-cpp-macro clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmicrosoft-cpp-macro clang diagnostic. Learn more...",
                  "markdown": "-Wmicrosoft-cpp-macro clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-cpp-macro)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedCopyWithDtor",
                "shortDescription": {
                  "text": "deprecated-copy-with-dtor clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdeprecated-copy-with-dtor clang diagnostic. Learn more...",
                  "markdown": "-Wdeprecated-copy-with-dtor clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-copy-with-dtor)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSelfMove",
                "shortDescription": {
                  "text": "self-move clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wself-move clang diagnostic. Learn more...",
                  "markdown": "-Wself-move clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wself-move)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCocoaNSError",
                "shortDescription": {
                  "text": "osx.cocoa.NSError clang static analyzer check"
                },
                "fullDescription": {
                  "text": "osx.cocoa.NSError clang static analyzer check. Learn more...",
                  "markdown": "osx.cocoa.NSError clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GenericEnumeratorNotDisposed",
                "shortDescription": {
                  "text": "Instance of IEnumerator is never disposed"
                },
                "fullDescription": {
                  "text": "Instance of IEnumerator is never disposed",
                  "markdown": "Instance of IEnumerator is never disposed"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnreachableCode",
                "shortDescription": {
                  "text": "unreachable-code clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunreachable-code clang diagnostic. Learn more...",
                  "markdown": "-Wunreachable-code clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunreachable-code)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PossibleInvalidCastException",
                "shortDescription": {
                  "text": "Possible 'System.InvalidCastException'"
                },
                "fullDescription": {
                  "text": "Possible cast expression of incompatible type",
                  "markdown": "Possible cast expression of incompatible type"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesProTypeVararg",
                "shortDescription": {
                  "text": "cppcoreguidelines-pro-type-vararg clang-tidy check"
                },
                "fullDescription": {
                  "text": "cppcoreguidelines-pro-type-vararg clang-tidy check. Learn more...",
                  "markdown": "cppcoreguidelines-pro-type-vararg clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/pro-type-vararg.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertIfDoToWhile",
                "shortDescription": {
                  "text": "Convert 'if do while' into 'while'"
                },
                "fullDescription": {
                  "text": "Simplify statement",
                  "markdown": "Simplify statement"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantToStringCall",
                "shortDescription": {
                  "text": "Redundant 'object.ToString()' call"
                },
                "fullDescription": {
                  "text": "Use of ToString() call in a context where it would be generated by the compiler automatically. For example, in a concatenation with a string or as an argument of a string.Format() call.",
                  "markdown": "Use of ToString() call in a context where it would be generated by the compiler automatically. For example, in a concatenation with a string or as an argument of a string.Format() call."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneUncheckedOptionalAccess",
                "shortDescription": {
                  "text": "bugprone-unchecked-optional-access clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-unchecked-optional-access clang-tidy check. Learn more...",
                  "markdown": "bugprone-unchecked-optional-access clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/unchecked-optional-access.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBSimplifyLinqExpression.10",
                "shortDescription": {
                  "text": "Simplify expression"
                },
                "fullDescription": {
                  "text": "!$seq$.All(Function ($x$) $expr$ = $expr2$)",
                  "markdown": "!$seq$.All(Function ($x$) $expr$ = $expr2$)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedPositionalParameterCompiler",
                "shortDescription": {
                  "text": "Unused positional parameter"
                },
                "fullDescription": {
                  "text": "Parameter of the primary constructor is declared but never used",
                  "markdown": "Parameter of the primary constructor is declared but never used"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticZeroAsNullPointerConstant",
                "shortDescription": {
                  "text": "zero-as-null-pointer-constant clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wzero-as-null-pointer-constant clang diagnostic. Learn more...",
                  "markdown": "-Wzero-as-null-pointer-constant clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wzero-as-null-pointer-constant)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerUnixVfork",
                "shortDescription": {
                  "text": "unix.Vfork clang static analyzer check"
                },
                "fullDescription": {
                  "text": "unix.Vfork clang static analyzer check. Learn more...",
                  "markdown": "unix.Vfork clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.InvalidResourceType",
                "shortDescription": {
                  "text": "XAML resource of invalid type"
                },
                "fullDescription": {
                  "text": "XAML resource of invalid type",
                  "markdown": "XAML resource of invalid type"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSwitch",
                "shortDescription": {
                  "text": "switch clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wswitch clang diagnostic. Learn more...",
                  "markdown": "-Wswitch clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wswitch)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeMacroToEnum",
                "shortDescription": {
                  "text": "modernize-macro-to-enum clang-tidy check"
                },
                "fullDescription": {
                  "text": "modernize-macro-to-enum clang-tidy check. Learn more...",
                  "markdown": "modernize-macro-to-enum clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/macro-to-enum.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyNamespace",
                "shortDescription": {
                  "text": "Empty namespace declaration"
                },
                "fullDescription": {
                  "text": "Empty namespace declaration is redundant Learn more...",
                  "markdown": "Empty namespace declaration is redundant [Learn more...](https://www.jetbrains.com/help/rider/EmptyNamespace.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseEmptyTypesField",
                "shortDescription": {
                  "text": "Use 'Type.EmptyTypes'"
                },
                "fullDescription": {
                  "text": "Replace an empty array allocation with a use of the predefined 'Type.EmptyTypes' field",
                  "markdown": "Replace an empty array allocation with a use of the predefined 'Type.EmptyTypes' field"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppWrongIncludesOrder",
                "shortDescription": {
                  "text": "Use preferred include directive style (order of #include directives does not match code style settings)"
                },
                "fullDescription": {
                  "text": "Order of #include directives does not match code style settings",
                  "markdown": "Order of #include directives does not match code style settings"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantStringType",
                "shortDescription": {
                  "text": "Redundant string type"
                },
                "fullDescription": {
                  "text": "Explicitly specifying System.String as the type of a data entry is redundant Learn more...",
                  "markdown": "Explicitly specifying System.String as the type of a data entry is redundant [Learn more...](https://www.jetbrains.com/help/rider/RedundantStringType.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppDereferenceOperatorLimitExceeded",
                "shortDescription": {
                  "text": "Dereference operator limit is exceeded"
                },
                "fullDescription": {
                  "text": "Dereference operator limit is exceeded",
                  "markdown": "Dereference operator limit is exceeded"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp2aCompatPedantic",
                "shortDescription": {
                  "text": "c++2a-compat-pedantic clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wc++2a-compat-pedantic clang diagnostic. Learn more...",
                  "markdown": "-Wc++2a-compat-pedantic clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wc-2a-compat-pedantic)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedType.Local",
                "shortDescription": {
                  "text": "Type is never used (private accessibility)"
                },
                "fullDescription": {
                  "text": "Type is never used Learn more...",
                  "markdown": "Type is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedType.Local.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IteratorNeverReturns",
                "shortDescription": {
                  "text": "Iterator never returns"
                },
                "fullDescription": {
                  "text": "Iterator function does not reach its end or a 'return' statement by any of possible execution paths",
                  "markdown": "Iterator function does not reach its end or a 'return' statement by any of possible execution paths"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyLlvmTwineLocal",
                "shortDescription": {
                  "text": "llvm-twine-local clang-tidy check"
                },
                "fullDescription": {
                  "text": "llvm-twine-local clang-tidy check. Learn more...",
                  "markdown": "llvm-twine-local clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/llvm/twine-local.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.RedundantFormerlySerializedAsAttribute",
                "shortDescription": {
                  "text": "Redundant attribute usage (redundant 'FormerlySerializedAs' attribute)"
                },
                "fullDescription": {
                  "text": "The 'FormerlySerializedAs' attribute is only valid on Unity serialized fields. It can also be redundant if the name argument matches the current name of the field. Learn more...",
                  "markdown": "The 'FormerlySerializedAs' attribute is only valid on Unity serialized fields. It can also be redundant if the name argument matches the current name of the field. [Learn more...](https://github.com/JetBrains/resharper-unity/wiki/Redundant-FormerlySerializedAs-attribute)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUE4CodingStandardNamingViolationWarning",
                "shortDescription": {
                  "text": "Inconsistent Unreal Engine Naming"
                },
                "fullDescription": {
                  "text": "Name doesn't match the Unreal Engine's coding standard naming style. Learn more…",
                  "markdown": "Name doesn't match the Unreal Engine's coding standard naming style. [Learn more...](https://docs.unrealengine.com/en-us/Programming/Development/CodingStandard#namingconventions)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unreal Engine",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TabsOutsideIndent",
                "shortDescription": {
                  "text": "Incorrect spacing (tabs are prohibited here)"
                },
                "fullDescription": {
                  "text": "Tabs are prohibited here Learn more...",
                  "markdown": "Tabs are prohibited here [Learn more...](https://www.jetbrains.com/help/rider/TabsOutsideIndent.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.BurstDebugLogInvalidArgument",
                "shortDescription": {
                  "text": "Debug logging functions accepts only strings"
                },
                "fullDescription": {
                  "text": "Debug logging functions accepts only strings",
                  "markdown": "Debug logging functions accepts only strings"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity Burst Compiler Warnings",
                      "index": 34,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppExplicitSpecializationInNonNamespaceScope",
                "shortDescription": {
                  "text": "Explicit specialization in non-namespace scope"
                },
                "fullDescription": {
                  "text": "Explicit specializations of a template in non-namespace scope",
                  "markdown": "Explicit specializations of a template in non-namespace scope"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAbseilNoNamespace",
                "shortDescription": {
                  "text": "abseil-no-namespace clang-tidy check"
                },
                "fullDescription": {
                  "text": "abseil-no-namespace clang-tidy check. Learn more...",
                  "markdown": "abseil-no-namespace clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/no-namespace.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PossiblyMistakenUseOfInterpolatedStringInsert",
                "shortDescription": {
                  "text": "Possibly unintended string interpolation instead of format string template"
                },
                "fullDescription": {
                  "text": "Interpolated string that could be a valid format string detected. Possibly intended to be a format string template literal. Learn more...",
                  "markdown": "Interpolated string that could be a valid format string detected. Possibly intended to be a format string template literal. [Learn more...](https://www.jetbrains.com/help/rider/PossiblyMistakenUseOfInterpolatedStringInsert.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMain",
                "shortDescription": {
                  "text": "main clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmain clang diagnostic. Learn more...",
                  "markdown": "-Wmain clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmain)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticThreadSafetyNegative",
                "shortDescription": {
                  "text": "thread-safety-negative clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wthread-safety-negative clang diagnostic. Learn more...",
                  "markdown": "-Wthread-safety-negative clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wthread-safety-negative)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LongLiteralEndingLowerL",
                "shortDescription": {
                  "text": "The 'l' suffix is easily confused with the digit '1'"
                },
                "fullDescription": {
                  "text": "The 'l' suffix is easily confused with the digit '1', use 'L' for clarity",
                  "markdown": "The 'l' suffix is easily confused with the digit '1', use 'L' for clarity"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnclosedScript",
                "shortDescription": {
                  "text": "Script tag errors (unclosed <script>)"
                },
                "fullDescription": {
                  "text": "<([)script(]) $a1$>$c1$",
                  "markdown": "\\<(\\[)script(\\]) $a1$\\>$c1$"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppTemplateArgumentsCanBeDeduced",
                "shortDescription": {
                  "text": "Template arguments can be deduced"
                },
                "fullDescription": {
                  "text": "Template arguments can be deduced",
                  "markdown": "Template arguments can be deduced"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAlteraSingleWorkItemBarrier",
                "shortDescription": {
                  "text": "altera-single-work-item-barrier clang-tidy check"
                },
                "fullDescription": {
                  "text": "altera-single-work-item-barrier clang-tidy check. Learn more...",
                  "markdown": "altera-single-work-item-barrier clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/altera/single-work-item-barrier.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeUseBoolLiterals",
                "shortDescription": {
                  "text": "modernize-use-bool-literals clang-tidy check"
                },
                "fullDescription": {
                  "text": "modernize-use-bool-literals clang-tidy check. Learn more...",
                  "markdown": "modernize-use-bool-literals clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-bool-literals.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppDefaultedSpecialMemberFunctionIsImplicitlyDeleted",
                "shortDescription": {
                  "text": "Defaulted special member function is implicitly deleted"
                },
                "fullDescription": {
                  "text": "Explicitly defaulted special member function is implicitly deleted",
                  "markdown": "Explicitly defaulted special member function is implicitly deleted"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDtorName",
                "shortDescription": {
                  "text": "dtor-name clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdtor-name clang diagnostic. Learn more...",
                  "markdown": "-Wdtor-name clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdtor-name)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnsupportedVisibility",
                "shortDescription": {
                  "text": "unsupported-visibility clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunsupported-visibility clang diagnostic. Learn more...",
                  "markdown": "-Wunsupported-visibility clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunsupported-visibility)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuCompoundLiteralInitializer",
                "shortDescription": {
                  "text": "gnu-compound-literal-initializer clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wgnu-compound-literal-initializer clang diagnostic. Learn more...",
                  "markdown": "-Wgnu-compound-literal-initializer clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-compound-literal-initializer)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIntToPointerCast",
                "shortDescription": {
                  "text": "int-to-pointer-cast clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wint-to-pointer-cast clang diagnostic. Learn more...",
                  "markdown": "-Wint-to-pointer-cast clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wint-to-pointer-cast)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAsmOperandWidths",
                "shortDescription": {
                  "text": "asm-operand-widths clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wasm-operand-widths clang diagnostic. Learn more...",
                  "markdown": "-Wasm-operand-widths clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wasm-operand-widths)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticHeaderHygiene",
                "shortDescription": {
                  "text": "header-hygiene clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wheader-hygiene clang diagnostic. Learn more...",
                  "markdown": "-Wheader-hygiene clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wheader-hygiene)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuAutoType",
                "shortDescription": {
                  "text": "gnu-auto-type clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wgnu-auto-type clang diagnostic. Learn more...",
                  "markdown": "-Wgnu-auto-type clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wgnu-auto-type)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Mvc.ViewComponentViewNotResolved",
                "shortDescription": {
                  "text": "MVC (unknown view component view)"
                },
                "fullDescription": {
                  "text": "Unknown ASP.NET MVC View Component View",
                  "markdown": "Unknown ASP.NET MVC View Component View"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftTemplateShadow",
                "shortDescription": {
                  "text": "microsoft-template-shadow clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmicrosoft-template-shadow clang diagnostic. Learn more...",
                  "markdown": "-Wmicrosoft-template-shadow clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-template-shadow)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerUnixMismatchedDeallocator",
                "shortDescription": {
                  "text": "unix.MismatchedDeallocator clang static analyzer check"
                },
                "fullDescription": {
                  "text": "unix.MismatchedDeallocator clang static analyzer check. Learn more...",
                  "markdown": "unix.MismatchedDeallocator clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppPossiblyUnintendedObjectSlicing",
                "shortDescription": {
                  "text": "Possibly unintended object slicing"
                },
                "fullDescription": {
                  "text": "Possibly unintended object slicing",
                  "markdown": "Possibly unintended object slicing"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUnsignedZeroComparison",
                "shortDescription": {
                  "text": "Comparison of unsigned expression with 0"
                },
                "fullDescription": {
                  "text": "Comparison of unsigned expression with 0",
                  "markdown": "Comparison of unsigned expression with 0"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FSharpRedundantAttributeSuffix",
                "shortDescription": {
                  "text": "Redundant 'Attribute' suffix"
                },
                "fullDescription": {
                  "text": "Redundant 'Attribute' suffix.",
                  "markdown": "Redundant 'Attribute' suffix."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BaseObjectEqualsIsObjectEquals",
                "shortDescription": {
                  "text": "Call to 'base.Equals(...)' is reference equality"
                },
                "fullDescription": {
                  "text": "Call to base 'Equals(...)' method is resolved to 'Object.Equals', which is reference equality",
                  "markdown": "Call to base 'Equals(...)' method is resolved to 'Object.Equals', which is reference equality"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertFlp30C",
                "shortDescription": {
                  "text": "cert-flp30-c clang-tidy check"
                },
                "fullDescription": {
                  "text": "cert-flp30-c clang-tidy check. Learn more...",
                  "markdown": "cert-flp30-c clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/flp30-c.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IdentifierTypo",
                "shortDescription": {
                  "text": "Typo in identifier"
                },
                "fullDescription": {
                  "text": "Typo in identifier Learn more...",
                  "markdown": "Typo in identifier [Learn more...](https://www.jetbrains.com/help/rider/IdentifierTypo.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spelling Issues",
                      "index": 49,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0109",
                "shortDescription": {
                  "text": "Keyword 'new' is redundant"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://msdn.microsoft.com/en-us/library/css4y2c4.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.IncorrectExpectedResultType",
                "shortDescription": {
                  "text": "NUnit. Incompatible expected result type or incorrect value."
                },
                "fullDescription": {
                  "text": "ExpectedResult value in [TestCase] or [Test] attributes is incorrect or is not compatible with the test method return type Learn more...",
                  "markdown": "ExpectedResult value in \\[TestCase\\] or \\[Test\\] attributes is incorrect or is not compatible with the test method return type [Learn more...](https://www.jetbrains.com/help/rider/NUnit.IncorrectExpectedResultType.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUFunctionMacroCallHasNoEffect",
                "shortDescription": {
                  "text": "UFUNCTION macro call has no effect"
                },
                "fullDescription": {
                  "text": "UFUNCTION macro call has no effect outside of UCLASS, USTRUCT or IInterface",
                  "markdown": "UFUNCTION macro call has no effect outside of UCLASS, USTRUCT or IInterface"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unreal Engine",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityIdentifierNaming",
                "shortDescription": {
                  "text": "readability-identifier-naming clang-tidy check"
                },
                "fullDescription": {
                  "text": "readability-identifier-naming clang-tidy check. Learn more...",
                  "markdown": "readability-identifier-naming clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/identifier-naming.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MergeIntoPattern",
                "shortDescription": {
                  "text": "Merge null/pattern checks into complex pattern"
                },
                "fullDescription": {
                  "text": "Merge sequential null/pattern checks into single recursive/logical pattern check",
                  "markdown": "Merge sequential null/pattern checks into single recursive/logical pattern check"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticEmptyDecomposition",
                "shortDescription": {
                  "text": "empty-decomposition clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wempty-decomposition clang diagnostic. Learn more...",
                  "markdown": "-Wempty-decomposition clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wempty-decomposition)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppExpressionWithoutSideEffects",
                "shortDescription": {
                  "text": "Possibly erroneous expression without side-effects"
                },
                "fullDescription": {
                  "text": "Possibly erroneous expression without side-effects",
                  "markdown": "Possibly erroneous expression without side-effects"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SwitchExpressionHandlesSomeKnownEnumValuesWithExceptionInDefault",
                "shortDescription": {
                  "text": "Some values of the enum are not processed inside 'switch' expression and are handled via exception in default arm"
                },
                "fullDescription": {
                  "text": "Some values of the enum are not processed inside switch expression and fall into default arm. This might indicate unintentional handling of all enum values added after the switch was introduced, consider handling missing enum values explicitly Learn more...",
                  "markdown": "Some values of the enum are not processed inside switch expression and fall into default arm. This might indicate unintentional handling of all enum values added after the switch was introduced, consider handling missing enum values explicitly [Learn more...](https://www.jetbrains.com/help/rider/SwitchExpressionHandlesSomeKnownEnumValuesWithExceptionInDefault.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNontrivialMemaccess",
                "shortDescription": {
                  "text": "nontrivial-memaccess clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wnontrivial-memaccess clang diagnostic. Learn more...",
                  "markdown": "-Wnontrivial-memaccess clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wnontrivial-memaccess)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppUseEmplace",
                "shortDescription": {
                  "text": "hicpp-use-emplace clang-tidy check"
                },
                "fullDescription": {
                  "text": "hicpp-use-emplace clang-tidy check. Learn more...",
                  "markdown": "hicpp-use-emplace clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/use-emplace.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCoreNullDereference",
                "shortDescription": {
                  "text": "core.NullDereference clang static analyzer check"
                },
                "fullDescription": {
                  "text": "core.NullDereference clang static analyzer check. Learn more...",
                  "markdown": "core.NullDereference clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AccessToForEachVariableInClosure",
                "shortDescription": {
                  "text": "Access to foreach variable in closure"
                },
                "fullDescription": {
                  "text": "This code can have different behavior when compiled with different versions of compiler. See changes for 'foreach' loop in C# 5.0 and Visual Basic 11. Learn more...",
                  "markdown": "This code can have different behavior when compiled with different versions of compiler. See changes for 'foreach' loop in C# 5.0 and Visual Basic 11. [Learn more...](https://www.jetbrains.com/help/rider/AccessToForEachVariableInClosure.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSerializedDiagnostics",
                "shortDescription": {
                  "text": "serialized-diagnostics clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wserialized-diagnostics clang diagnostic. Learn more...",
                  "markdown": "-Wserialized-diagnostics clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wserialized-diagnostics)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedAttributes",
                "shortDescription": {
                  "text": "deprecated-attributes clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdeprecated-attributes clang diagnostic. Learn more...",
                  "markdown": "-Wdeprecated-attributes clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-attributes)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantStringToCharArrayCall",
                "shortDescription": {
                  "text": "Redundant 'string.ToCharArray()' call"
                },
                "fullDescription": {
                  "text": "Redundant 'string.ToCharArray()' call",
                  "markdown": "Redundant 'string.ToCharArray()' call"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantRecordClassKeyword",
                "shortDescription": {
                  "text": "Redundant 'class' keyword in record declaration"
                },
                "fullDescription": {
                  "text": "Redundant 'class' keyword in record declaration: records are classes by default",
                  "markdown": "Redundant 'class' keyword in record declaration: records are classes by default"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDarwinSdkSettings",
                "shortDescription": {
                  "text": "darwin-sdk-settings clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdarwin-sdk-settings clang diagnostic. Learn more...",
                  "markdown": "-Wdarwin-sdk-settings clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdarwin-sdk-settings)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppAwaiterTypeIsNotClass",
                "shortDescription": {
                  "text": "Awaiter type is not a class"
                },
                "fullDescription": {
                  "text": "The awaiter type must be a a class according to the C++20 standard",
                  "markdown": "The awaiter type must be a a class according to the C++20 standard"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithSingleCallToSingleOrDefault",
                "shortDescription": {
                  "text": "Replace with single call to SingleOrDefault(..)"
                },
                "fullDescription": {
                  "text": "$seq$.Where(Function ($x$) $expr$).SingleOrDefault()",
                  "markdown": "$seq$.Where(Function ($x$) $expr$).SingleOrDefault()"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpBuildCSInvalidModuleName",
                "shortDescription": {
                  "text": "Module with this name does not exist"
                },
                "fullDescription": {
                  "text": "Module with this name does not exist",
                  "markdown": "Module with this name does not exist"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unreal Build System",
                      "index": 71,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PossibleLossOfFraction",
                "shortDescription": {
                  "text": "Possible loss of fraction"
                },
                "fullDescription": {
                  "text": "Possible loss of fraction when dividing integral values and assigning the result to float or decimal",
                  "markdown": "Possible loss of fraction when dividing integral values and assigning the result to float or decimal"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ValueRangeAttributeViolation",
                "shortDescription": {
                  "text": "Possible violation of 'ValueRange'/'NonNegativeValue' attribute"
                },
                "fullDescription": {
                  "text": "Integer value assigned to this entity doesn't lie in the interval specified in the attribute",
                  "markdown": "Integer value assigned to this entity doesn't lie in the interval specified in the attribute"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Constraints Violations",
                      "index": 43,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ForStatementConditionIsTrue",
                "shortDescription": {
                  "text": "'true' is redundant as 'for'-statement condition"
                },
                "fullDescription": {
                  "text": "'true' is redundant as 'for'-statement condition, and it can be safely omitted",
                  "markdown": "'true' is redundant as 'for'-statement condition, and it can be safely omitted"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ShiftExpressionRightOperandNotEqualRealCount",
                "shortDescription": {
                  "text": "Suspicious shift count for this type of left operand"
                },
                "fullDescription": {
                  "text": "Suspicious shift count for this type of left operand (different from actual shift count that will be used by compiler)",
                  "markdown": "Suspicious shift count for this type of left operand (different from actual shift count that will be used by compiler)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnassignedField.Local",
                "shortDescription": {
                  "text": "Unassigned field (private accessibility)"
                },
                "fullDescription": {
                  "text": "Field is never assigned",
                  "markdown": "Field is never assigned"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithSingleCallToSingleOrDefault",
                "shortDescription": {
                  "text": "Replace with single call to SingleOrDefault(..)"
                },
                "fullDescription": {
                  "text": "$seq$.Where($x$ => $expr$).SingleOrDefault()",
                  "markdown": "$seq$.Where($x$ =\\> $expr$).SingleOrDefault()"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesProBoundsArrayToPointerDecay",
                "shortDescription": {
                  "text": "cppcoreguidelines-pro-bounds-array-to-pointer-decay clang-tidy check"
                },
                "fullDescription": {
                  "text": "cppcoreguidelines-pro-bounds-array-to-pointer-decay clang-tidy check. Learn more...",
                  "markdown": "cppcoreguidelines-pro-bounds-array-to-pointer-decay clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/pro-bounds-array-to-pointer-decay.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonConstantEqualityExpressionHasConstantResult",
                "shortDescription": {
                  "text": "According to values of the bit masks, expression result will always be the same"
                },
                "fullDescription": {
                  "text": "According to values of the bit masks, expression result will always be the same",
                  "markdown": "According to values of the bit masks, expression result will always be the same"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnalignedAccess",
                "shortDescription": {
                  "text": "unaligned-access clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunaligned-access clang diagnostic. Learn more...",
                  "markdown": "-Wunaligned-access clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunaligned-access)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantExplicitTupleComponentName",
                "shortDescription": {
                  "text": "Redundant explicit tuple component name"
                },
                "fullDescription": {
                  "text": "Explicit name specification of value tuple component is redundant. It is inferred from the initializer expression.",
                  "markdown": "Explicit name specification of value tuple component is redundant. It is inferred from the initializer expression."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticBindingInCondition",
                "shortDescription": {
                  "text": "binding-in-condition clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wbinding-in-condition clang diagnostic. Learn more...",
                  "markdown": "-Wbinding-in-condition clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wbinding-in-condition)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticBindToTemporaryCopy",
                "shortDescription": {
                  "text": "bind-to-temporary-copy clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wbind-to-temporary-copy clang diagnostic. Learn more...",
                  "markdown": "-Wbind-to-temporary-copy clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wbind-to-temporary-copy)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPointerToEnumCast",
                "shortDescription": {
                  "text": "pointer-to-enum-cast clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wpointer-to-enum-cast clang diagnostic. Learn more...",
                  "markdown": "-Wpointer-to-enum-cast clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wpointer-to-enum-cast)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadControlBracesIndent",
                "shortDescription": {
                  "text": "Incorrect indent (around statement braces)"
                },
                "fullDescription": {
                  "text": "Around statement braces Learn more...",
                  "markdown": "Around statement braces [Learn more...](https://www.jetbrains.com/help/rider/BadControlBracesIndent.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedEnumCompareConditional",
                "shortDescription": {
                  "text": "deprecated-enum-compare-conditional clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdeprecated-enum-compare-conditional clang diagnostic. Learn more...",
                  "markdown": "-Wdeprecated-enum-compare-conditional clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-enum-compare-conditional)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIgnoredOptimizationArgument",
                "shortDescription": {
                  "text": "ignored-optimization-argument clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wignored-optimization-argument clang diagnostic. Learn more...",
                  "markdown": "-Wignored-optimization-argument clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wignored-optimization-argument)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCocoaSuperDealloc",
                "shortDescription": {
                  "text": "osx.cocoa.SuperDealloc clang static analyzer check"
                },
                "fullDescription": {
                  "text": "osx.cocoa.SuperDealloc clang static analyzer check. Learn more...",
                  "markdown": "osx.cocoa.SuperDealloc clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneVirtualNearMiss",
                "shortDescription": {
                  "text": "bugprone-virtual-near-miss clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-virtual-near-miss clang-tidy check. Learn more...",
                  "markdown": "bugprone-virtual-near-miss clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/virtual-near-miss.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WebConfig.RedundantLocationTag",
                "shortDescription": {
                  "text": "Redundant location element"
                },
                "fullDescription": {
                  "text": "Location element does not correspond to any path in the web site and can be safely removed",
                  "markdown": "Location element does not correspond to any path in the web site and can be safely removed"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeUseAuto",
                "shortDescription": {
                  "text": "modernize-use-auto clang-tidy check"
                },
                "fullDescription": {
                  "text": "modernize-use-auto clang-tidy check. Learn more...",
                  "markdown": "modernize-use-auto clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/use-auto.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyPerformanceNoIntToPtr",
                "shortDescription": {
                  "text": "performance-no-int-to-ptr clang-tidy check"
                },
                "fullDescription": {
                  "text": "performance-no-int-to-ptr clang-tidy check. Learn more...",
                  "markdown": "performance-no-int-to-ptr clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/no-int-to-ptr.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8094",
                "shortDescription": {
                  "text": "Alignment value 'value' has a magnitude greater than 'magnitude limit' and may result in a large formatted string."
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClassCanBeSealed.Global",
                "shortDescription": {
                  "text": "Class can be made sealed (non-inheritable) (non-private accessibility)"
                },
                "fullDescription": {
                  "text": "Class has no inheritors and can be marked sealed (non-inheritable)",
                  "markdown": "Class has no inheritors and can be marked sealed (non-inheritable)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp20AttributeExtensions",
                "shortDescription": {
                  "text": "c++20-attribute-extensions clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wc++20-attribute-extensions clang diagnostic. Learn more...",
                  "markdown": "-Wc++20-attribute-extensions clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wc-20-attribute-extensions)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftAnonTag",
                "shortDescription": {
                  "text": "microsoft-anon-tag clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmicrosoft-anon-tag clang diagnostic. Learn more...",
                  "markdown": "-Wmicrosoft-anon-tag clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmicrosoft-anon-tag)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppMissingLinebreak",
                "shortDescription": {
                  "text": "Incorrect line breaks (line break is missing elsewhere)"
                },
                "fullDescription": {
                  "text": "Line break is missing elsewhere",
                  "markdown": "Line break is missing elsewhere"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFinalMacro",
                "shortDescription": {
                  "text": "final-macro clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wfinal-macro clang diagnostic. Learn more...",
                  "markdown": "-Wfinal-macro clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wfinal-macro)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneMisplacedWideningCast",
                "shortDescription": {
                  "text": "bugprone-misplaced-widening-cast clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-misplaced-widening-cast clang-tidy check. Learn more...",
                  "markdown": "bugprone-misplaced-widening-cast clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/misplaced-widening-cast.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCocoaUnusedIvars",
                "shortDescription": {
                  "text": "osx.cocoa.UnusedIvars clang static analyzer check"
                },
                "fullDescription": {
                  "text": "osx.cocoa.UnusedIvars clang static analyzer check. Learn more...",
                  "markdown": "osx.cocoa.UnusedIvars clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityContainerDataPointer",
                "shortDescription": {
                  "text": "readability-container-data-pointer clang-tidy check"
                },
                "fullDescription": {
                  "text": "readability-container-data-pointer clang-tidy check. Learn more...",
                  "markdown": "readability-container-data-pointer clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/container-data-pointer.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneSignedCharMisuse",
                "shortDescription": {
                  "text": "bugprone-signed-char-misuse clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-signed-char-misuse clang-tidy check. Learn more...",
                  "markdown": "bugprone-signed-char-misuse clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/signed-char-misuse.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedImplementations",
                "shortDescription": {
                  "text": "deprecated-implementations clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdeprecated-implementations clang diagnostic. Learn more...",
                  "markdown": "-Wdeprecated-implementations clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-implementations)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MergeAndPattern",
                "shortDescription": {
                  "text": "Merge 'and' pattern"
                },
                "fullDescription": {
                  "text": "Merge two operands of the 'and' pattern into single pattern",
                  "markdown": "Merge two operands of the 'and' pattern into single pattern"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertNullableToShortForm",
                "shortDescription": {
                  "text": "Convert 'Nullable<T>' into 'T?'"
                },
                "fullDescription": {
                  "text": "Rewrite nullable type in short form Learn more...",
                  "markdown": "Rewrite nullable type in short form [Learn more...](https://www.jetbrains.com/help/rider/ConvertNullableToShortForm.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8073",
                "shortDescription": {
                  "text": "The result of the expression is always 'true' or 'false' since a value of value type is never equal to 'null'"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppReinterpretCastFromVoidPtr",
                "shortDescription": {
                  "text": "reinterpret_cast is used instead of a static_cast"
                },
                "fullDescription": {
                  "text": "reinterpret_cast is used instead of a static_cast",
                  "markdown": "reinterpret_cast is used instead of a static_cast"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.MethodArgumentsWillBeIgnored",
                "shortDescription": {
                  "text": "Method arguments will be replaced by event's arguments in generated code"
                },
                "fullDescription": {
                  "text": "Method arguments will be replaced by event's arguments in generated code",
                  "markdown": "Method arguments will be replaced by event's arguments in generated code"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnsupportedAbs",
                "shortDescription": {
                  "text": "unsupported-abs clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunsupported-abs clang diagnostic. Learn more...",
                  "markdown": "-Wunsupported-abs clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunsupported-abs)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnsupportedAbi",
                "shortDescription": {
                  "text": "unsupported-abi clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wunsupported-abi clang diagnostic. Learn more...",
                  "markdown": "-Wunsupported-abi clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wunsupported-abi)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMissingConstinit",
                "shortDescription": {
                  "text": "missing-constinit clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wmissing-constinit clang diagnostic. Learn more...",
                  "markdown": "-Wmissing-constinit clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wmissing-constinit)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticReorderInitList",
                "shortDescription": {
                  "text": "reorder-init-list clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wreorder-init-list clang diagnostic. Learn more...",
                  "markdown": "-Wreorder-init-list clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wreorder-init-list)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticVecElemSize",
                "shortDescription": {
                  "text": "vec-elem-size clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wvec-elem-size clang diagnostic. Learn more...",
                  "markdown": "-Wvec-elem-size clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wvec-elem-size)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticImplicitInt",
                "shortDescription": {
                  "text": "implicit-int clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wimplicit-int clang diagnostic. Learn more...",
                  "markdown": "-Wimplicit-int clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-int)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.ParentIsOutOfCurrentComponentTree",
                "shortDescription": {
                  "text": "Parent is outside the current component tree"
                },
                "fullDescription": {
                  "text": "Parent is outside the current component tree",
                  "markdown": "Parent is outside the current component tree"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAbseilDurationSubtraction",
                "shortDescription": {
                  "text": "abseil-duration-subtraction clang-tidy check"
                },
                "fullDescription": {
                  "text": "abseil-duration-subtraction clang-tidy check. Learn more...",
                  "markdown": "abseil-duration-subtraction clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/abseil/duration-subtraction.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeDeprecatedHeaders",
                "shortDescription": {
                  "text": "modernize-deprecated-headers clang-tidy check"
                },
                "fullDescription": {
                  "text": "modernize-deprecated-headers clang-tidy check. Learn more...",
                  "markdown": "modernize-deprecated-headers clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/modernize/deprecated-headers.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneTerminatingContinue",
                "shortDescription": {
                  "text": "bugprone-terminating-continue clang-tidy check"
                },
                "fullDescription": {
                  "text": "bugprone-terminating-continue clang-tidy check. Learn more...",
                  "markdown": "bugprone-terminating-continue clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone/terminating-continue.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PureAttributeOnVoidMethod",
                "shortDescription": {
                  "text": "'void' method is annotated by [Pure] attribute"
                },
                "fullDescription": {
                  "text": "'void' method is annotated by [Pure] attribute",
                  "markdown": "'void' method is annotated by \\[Pure\\] attribute"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertDcl59Cpp",
                "shortDescription": {
                  "text": "cert-dcl59-cpp clang-tidy check"
                },
                "fullDescription": {
                  "text": "cert-dcl59-cpp clang-tidy check. Learn more...",
                  "markdown": "cert-dcl59-cpp clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/dcl59-cpp.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertFlp37C",
                "shortDescription": {
                  "text": "cert-flp37-c clang-tidy check"
                },
                "fullDescription": {
                  "text": "cert-flp37-c clang-tidy check. Learn more...",
                  "markdown": "cert-flp37-c clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cert/flp37-c.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCocoaAutoreleaseWrite",
                "shortDescription": {
                  "text": "osx.cocoa.AutoreleaseWrite clang static analyzer check"
                },
                "fullDescription": {
                  "text": "osx.cocoa.AutoreleaseWrite clang static analyzer check. Learn more...",
                  "markdown": "osx.cocoa.AutoreleaseWrite clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCompletionHandler",
                "shortDescription": {
                  "text": "completion-handler clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wcompletion-handler clang diagnostic. Learn more...",
                  "markdown": "-Wcompletion-handler clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wcompletion-handler)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInlineNamespaceReopenedNoninline",
                "shortDescription": {
                  "text": "inline-namespace-reopened-noninline clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Winline-namespace-reopened-noninline clang diagnostic. Learn more...",
                  "markdown": "-Winline-namespace-reopened-noninline clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#winline-namespace-reopened-noninline)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDtorTypedef",
                "shortDescription": {
                  "text": "dtor-typedef clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdtor-typedef clang diagnostic. Learn more...",
                  "markdown": "-Wdtor-typedef clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdtor-typedef)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp98Cpp11Cpp14Cpp17Compat",
                "shortDescription": {
                  "text": "c++98-c++11-c++14-c++17-compat clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wc++98-c++11-c++14-c++17-compat clang diagnostic. Learn more...",
                  "markdown": "-Wc++98-c++11-c++14-c++17-compat clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wc-98-c-11-c-14-c-17-compat)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticWarnings",
                "shortDescription": {
                  "text": "#warnings clang diagnostic"
                },
                "fullDescription": {
                  "text": "-W#warnings clang diagnostic. Learn more...",
                  "markdown": "-W#warnings clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#w-warnings)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NoSupportForVB",
                "shortDescription": {
                  "text": "Visual Basic is not supported yet"
                },
                "fullDescription": {
                  "text": "",
                  "markdown": ""
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "T4",
                      "index": 62,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PatternNeverMatches",
                "shortDescription": {
                  "text": "The source expression never matches the provided pattern"
                },
                "fullDescription": {
                  "text": "The source expression of 'is' operator or 'switch' statement never matches the provided pattern",
                  "markdown": "The source expression of 'is' operator or 'switch' statement never matches the provided pattern"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ExtractCommonPropertyPattern",
                "shortDescription": {
                  "text": "Extract common property pattern"
                },
                "fullDescription": {
                  "text": "Simplify recursive pattern by extracting common property pattern",
                  "markdown": "Simplify recursive pattern by extracting common property pattern"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticConstantEvaluated",
                "shortDescription": {
                  "text": "constant-evaluated clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wconstant-evaluated clang diagnostic. Learn more...",
                  "markdown": "-Wconstant-evaluated clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wconstant-evaluated)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FSharpRedundantAsPattern",
                "shortDescription": {
                  "text": "Redundant 'as' pattern"
                },
                "fullDescription": {
                  "text": "'as' pattern can be replaced with its name.",
                  "markdown": "'as' pattern can be replaced with its name."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticOverrideModule",
                "shortDescription": {
                  "text": "override-module clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Woverride-module clang diagnostic. Learn more...",
                  "markdown": "-Woverride-module clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#woverride-module)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerNullabilityNullPassedToNonnull",
                "shortDescription": {
                  "text": "nullability.NullPassedToNonnull clang static analyzer check"
                },
                "fullDescription": {
                  "text": "nullability.NullPassedToNonnull clang static analyzer check. Learn more...",
                  "markdown": "nullability.NullPassedToNonnull clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FSharpLambdaCanBeReplacedWithInnerExpression",
                "shortDescription": {
                  "text": "Lambda expression can be replaced with inner expression"
                },
                "fullDescription": {
                  "text": "Lambda expression can be replaced with inner expression.",
                  "markdown": "Lambda expression can be replaced with inner expression."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedBuiltins",
                "shortDescription": {
                  "text": "deprecated-builtins clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wdeprecated-builtins clang diagnostic. Learn more...",
                  "markdown": "-Wdeprecated-builtins clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wdeprecated-builtins)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppUppercaseLiteralSuffix",
                "shortDescription": {
                  "text": "hicpp-uppercase-literal-suffix clang-tidy check"
                },
                "fullDescription": {
                  "text": "hicpp-uppercase-literal-suffix clang-tidy check. Learn more...",
                  "markdown": "hicpp-uppercase-literal-suffix clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp/uppercase-literal-suffix.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0183",
                "shortDescription": {
                  "text": "Given expression is always of the provided type"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://msdn.microsoft.com/en-us/library/sb7782xb.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFormatInsufficientArgs",
                "shortDescription": {
                  "text": "format-insufficient-args clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wformat-insufficient-args clang diagnostic. Learn more...",
                  "markdown": "-Wformat-insufficient-args clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wformat-insufficient-args)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0184",
                "shortDescription": {
                  "text": "Given expression is never of the provided type"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://msdn.microsoft.com/en-us/library/230kb9yt.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.DynamicResourceError",
                "shortDescription": {
                  "text": "{DynamicResource} can only be used with dependency property"
                },
                "fullDescription": {
                  "text": "{DynamicResource} can only be used with DependencyProperty of a DependencyObject",
                  "markdown": "{DynamicResource} can only be used with DependencyProperty of a DependencyObject"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIgnoredPragmas",
                "shortDescription": {
                  "text": "ignored-pragmas clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wignored-pragmas clang diagnostic. Learn more...",
                  "markdown": "-Wignored-pragmas clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wignored-pragmas)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSignCompare",
                "shortDescription": {
                  "text": "sign-compare clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wsign-compare clang diagnostic. Learn more...",
                  "markdown": "-Wsign-compare clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wsign-compare)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticConsumed",
                "shortDescription": {
                  "text": "consumed clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wconsumed clang diagnostic. Learn more...",
                  "markdown": "-Wconsumed clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wconsumed)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantDictionaryContainsKeyBeforeAdding",
                "shortDescription": {
                  "text": "Redundant dictionary 'ContainsKey' before adding to the collection"
                },
                "fullDescription": {
                  "text": "Redundant dictionary 'ContainsKey' before adding to the collection.",
                  "markdown": "Redundant dictionary 'ContainsKey' before adding to the collection."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyPerformanceForRangeCopy",
                "shortDescription": {
                  "text": "performance-for-range-copy clang-tidy check"
                },
                "fullDescription": {
                  "text": "performance-for-range-copy clang-tidy check. Learn more...",
                  "markdown": "performance-for-range-copy clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/performance/for-range-copy.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerUnixMalloc",
                "shortDescription": {
                  "text": "unix.Malloc clang static analyzer check"
                },
                "fullDescription": {
                  "text": "unix.Malloc clang static analyzer check. Learn more...",
                  "markdown": "unix.Malloc clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppFinalNonOverridingVirtualFunction",
                "shortDescription": {
                  "text": "Final non-overriding virtual function"
                },
                "fullDescription": {
                  "text": "A virtual function is marked 'final' and does not override a base function",
                  "markdown": "A virtual function is marked 'final' and does not override a base function"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityConstReturnType",
                "shortDescription": {
                  "text": "readability-const-return-type clang-tidy check"
                },
                "fullDescription": {
                  "text": "readability-const-return-type clang-tidy check. Learn more...",
                  "markdown": "readability-const-return-type clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability/const-return-type.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.LanguageLevel",
                "shortDescription": {
                  "text": "XAML language level error"
                },
                "fullDescription": {
                  "text": "XAML 2009 language construct is not allowed here",
                  "markdown": "XAML 2009 language construct is not allowed here"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MemberCanBePrivate.Local",
                "shortDescription": {
                  "text": "Member can be made private (private accessibility)"
                },
                "fullDescription": {
                  "text": "Member can be made private Learn more...",
                  "markdown": "Member can be made private [Learn more...](https://www.jetbrains.com/help/rider/MemberCanBePrivate.Local.html)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppDependentTypeWithoutTypenameKeyword",
                "shortDescription": {
                  "text": "Dependent type without 'typename' keyword"
                },
                "fullDescription": {
                  "text": "Dependent type without 'typename' keyword",
                  "markdown": "Dependent type without 'typename' keyword"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIncompleteImplementation",
                "shortDescription": {
                  "text": "incomplete-implementation clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wincomplete-implementation clang diagnostic. Learn more...",
                  "markdown": "-Wincomplete-implementation clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wincomplete-implementation)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxObjCProperty",
                "shortDescription": {
                  "text": "osx.ObjCProperty clang static analyzer check"
                },
                "fullDescription": {
                  "text": "osx.ObjCProperty clang static analyzer check. Learn more...",
                  "markdown": "osx.ObjCProperty clang static analyzer check. [Learn more...](https://clang-analyzer.llvm.org/available_checks.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticImplicitIntFloatConversion",
                "shortDescription": {
                  "text": "implicit-int-float-conversion clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wimplicit-int-float-conversion clang diagnostic. Learn more...",
                  "markdown": "-Wimplicit-int-float-conversion clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wimplicit-int-float-conversion)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.UnresolvedComponentOrScriptableObject",
                "shortDescription": {
                  "text": "Cannot resolve component or scriptable object"
                },
                "fullDescription": {
                  "text": "The class referred to in the call to 'GetComponent', 'AddComponent' or 'ScriptableObject.CreateInstance' cannot be found in the current project or referenced assemblies. The call is likely to fail at runtime and return null.",
                  "markdown": "The class referred to in the call to 'GetComponent', 'AddComponent' or 'ScriptableObject.CreateInstance' cannot be found in the current project or referenced assemblies. The call is likely to fail at runtime and return null."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFinalDtorNonFinalClass",
                "shortDescription": {
                  "text": "final-dtor-non-final-class clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wfinal-dtor-non-final-class clang diagnostic. Learn more...",
                  "markdown": "-Wfinal-dtor-non-final-class clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wfinal-dtor-non-final-class)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticReorder",
                "shortDescription": {
                  "text": "reorder clang diagnostic"
                },
                "fullDescription": {
                  "text": "-Wreorder clang diagnostic. Learn more...",
                  "markdown": "-Wreorder clang diagnostic. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/docs/DiagnosticsReference.html#wreorder)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAndroidCloexecCreat",
                "shortDescription": {
                  "text": "android-cloexec-creat clang-tidy check"
                },
                "fullDescription": {
                  "text": "android-cloexec-creat clang-tidy check. Learn more...",
                  "markdown": "android-cloexec-creat clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/android/cloexec-creat.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0162",
                "shortDescription": {
                  "text": "Code is unreachable"
                },
                "fullDescription": {
                  "text": "Learn more...",
                  "markdown": "[Learn more...](https://msdn.microsoft.com/en-us/library/c0h4st1x.aspx)"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesProTypeConstCast",
                "shortDescription": {
                  "text": "cppcoreguidelines-pro-type-const-cast clang-tidy check"
                },
                "fullDescription": {
                  "text": "cppcoreguidelines-pro-type-const-cast clang-tidy check. Learn more...",
                  "markdown": "cppcoreguidelines-pro-type-const-cast clang-tidy check. [Learn more...](https://releases.llvm.org/15.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines/pro-type-const-cast.html)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.jetbrains.plugins.sass",
            "version": "231.5825.43",
            "rules": [
              {
                "id": "SassScssResolvedByNameOnly",
                "shortDescription": {
                  "text": "Missing import"
                },
                "fullDescription": {
                  "text": "Reports a reference to a variable, mixin, or function that is declared in another file but this file isn't explicitly imported in the current file. Example: '* {\n  margin: $var-in-other-file;\n}'",
                  "markdown": "Reports a reference to a variable, mixin, or function that is declared in another file but this file isn't explicitly [imported](https://sass-lang.com/documentation/at-rules/import) in the current file.\n\n**Example:**\n\n\n    * {\n      margin: $var-in-other-file;\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Sass/SCSS",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SassScssUnresolvedVariable",
                "shortDescription": {
                  "text": "Unresolved variable"
                },
                "fullDescription": {
                  "text": "Reports an unresolved Sass/SCSS variable reference. Example: '* {\n  margin: $unknown-var;\n}'",
                  "markdown": "Reports an unresolved [Sass/SCSS variable](https://sass-lang.com/documentation/variables) reference.\n\n**Example:**\n\n\n    * {\n      margin: $unknown-var;\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Sass/SCSS",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SassScssUnresolvedMixin",
                "shortDescription": {
                  "text": "Unresolved mixin"
                },
                "fullDescription": {
                  "text": "Reports an unresolved Sass/SCSS mixin reference. Example: '* {\n  @include unknown-mixin;\n}'",
                  "markdown": "Reports an unresolved [Sass/SCSS mixin](https://sass-lang.com/documentation/at-rules/mixin) reference.\n\n**Example:**\n\n\n    * {\n      @include unknown-mixin;\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Sass/SCSS",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SassScssUnresolvedPlaceholderSelector",
                "shortDescription": {
                  "text": "Unresolved placeholder selector"
                },
                "fullDescription": {
                  "text": "Reports an unresolved Sass/SCSS placeholder selector reference. Example: '* {\n  @extend %unknown-placeholder-selector;\n}'",
                  "markdown": "Reports an unresolved [Sass/SCSS placeholder selector](https://sass-lang.com/documentation/variables) reference.\n\n**Example:**\n\n\n    * {\n      @extend %unknown-placeholder-selector;\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Sass/SCSS",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij",
            "version": "231.5825.43.2",
            "rules": [
              {
                "id": "HtmlUnknownBooleanAttribute",
                "shortDescription": {
                  "text": "Incorrect boolean attribute"
                },
                "fullDescription": {
                  "text": "Reports an HTML non-boolean attribute without a value. Suggests configuring attributes that should not be reported.",
                  "markdown": "Reports an HTML non-boolean attribute without a value. Suggests configuring attributes that should not be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IncorrectFormatting",
                "shortDescription": {
                  "text": "Incorrect formatting"
                },
                "fullDescription": {
                  "text": "Reports formatting issues that appear if your code doesn't follow your project's code style settings. This inspection is not compatible with languages that require third-party formatters for code formatting, for example, Go or C with CLangFormat enabled.",
                  "markdown": "Reports formatting issues that appear if your code doesn't\nfollow your project's code style settings.\n\n\nThis inspection is not compatible with languages that require\nthird-party formatters for code formatting, for example, Go or\nC with CLangFormat enabled."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckXmlFileWithXercesValidator",
                "shortDescription": {
                  "text": "Failed external validation"
                },
                "fullDescription": {
                  "text": "Reports a discrepancy in an XML file with the specified DTD or schema detected by the Xerces validator.",
                  "markdown": "Reports a discrepancy in an XML file with the specified DTD or schema detected by the Xerces validator."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 33,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpEscapedMetaCharacter",
                "shortDescription": {
                  "text": "Escaped meta character"
                },
                "fullDescription": {
                  "text": "Reports escaped meta characters. Some RegExp coding styles specify that meta characters should be placed inside a character class, to make the regular expression easier to understand. This inspection does not warn about the meta character '[', ']' and '^', because those would need additional escaping inside a character class. Example: '\\d+\\.\\d+' After the quick-fix is applied: '\\d+[.]\\d+' New in 2017.1",
                  "markdown": "Reports escaped meta characters. Some RegExp coding styles specify that meta characters should be placed inside a character class, to make the regular expression easier to understand. This inspection does not warn about the meta character `[`, `]` and `^`, because those would need additional escaping inside a character class.\n\n**Example:**\n\n\n      \\d+\\.\\d+\n\nAfter the quick-fix is applied:\n\n\n      \\d+[.]\\d+\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 35,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlUnusedNamespaceDeclaration",
                "shortDescription": {
                  "text": "Unused schema declaration"
                },
                "fullDescription": {
                  "text": "Reports an unused namespace declaration or location hint in XML.",
                  "markdown": "Reports an unused namespace declaration or location hint in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 33,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpUnnecessaryNonCapturingGroup",
                "shortDescription": {
                  "text": "Unnecessary non-capturing group"
                },
                "fullDescription": {
                  "text": "Reports unnecessary non-capturing groups, which have no influence on the match result. Example: 'Everybody be cool, (?:this) is a robbery!' After the quick-fix is applied: 'Everybody be cool, this is a robbery!' New in 2021.1",
                  "markdown": "Reports unnecessary non-capturing groups, which have no influence on the match result.\n\n**Example:**\n\n\n      Everybody be cool, (?:this) is a robbery!\n\nAfter the quick-fix is applied:\n\n\n      Everybody be cool, this is a robbery!\n\nNew in 2021.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 35,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonPathUnknownFunction",
                "shortDescription": {
                  "text": "Unknown JSONPath function"
                },
                "fullDescription": {
                  "text": "Reports an unknown name in a JSONPath function call instead of known standard function names: 'concat', 'keys', 'length', 'min', 'max', 'avg', 'stddev', 'sum'.",
                  "markdown": "Reports an unknown name in a JSONPath function call instead of known standard function names: `concat`, `keys`, `length`, `min`, `max`, `avg`, `stddev`, `sum`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 41,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonSchemaCompliance",
                "shortDescription": {
                  "text": "Compliance with JSON schema"
                },
                "fullDescription": {
                  "text": "Reports inconsistence between a JSON file and the JSON schema that is assigned to it.",
                  "markdown": "Reports inconsistence between a JSON file and the [JSON schema](https://json-schema.org) that is assigned to it.  "
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 41,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckDtdRefs",
                "shortDescription": {
                  "text": "Unresolved DTD reference"
                },
                "fullDescription": {
                  "text": "Reports inconsistency in a DTD-specific reference, for example, in a reference to an XML entity or to a DTD element declaration. Works in DTD an XML files.",
                  "markdown": "Reports inconsistency in a DTD-specific reference, for example, in a reference to an XML entity or to a DTD element declaration. Works in DTD an XML files."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 33,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpSingleCharAlternation",
                "shortDescription": {
                  "text": "Single character alternation"
                },
                "fullDescription": {
                  "text": "Reports single char alternation in a RegExp. It is simpler to use a character class instead. This may also provide better matching performance. Example: 'a|b|c|d' After the quick-fix is applied: '[abcd]' New in 2017.1",
                  "markdown": "Reports single char alternation in a RegExp. It is simpler to use a character class instead. This may also provide better matching performance.\n\n**Example:**\n\n\n      a|b|c|d\n\nAfter the quick-fix is applied:\n\n\n      [abcd]\n\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 35,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckTagEmptyBody",
                "shortDescription": {
                  "text": "Empty element content"
                },
                "fullDescription": {
                  "text": "Reports XML elements without contents. Example: '<user>\n    <name></name>\n  </user>' After the quick-fix is applied: '<user>\n    <name/>\n  </user>'",
                  "markdown": "Reports XML elements without contents.\n\n**Example:**\n\n\n      <user>\n        <name></name>\n      </user>\n\nAfter the quick-fix is applied:\n\n\n      <user>\n        <name/>\n      </user>\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 33,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReassignedToPlainText",
                "shortDescription": {
                  "text": "Reassigned to plain text"
                },
                "fullDescription": {
                  "text": "Reports files that were explicitly re-assigned to Plain Text File Type. This association is unnecessary because the platform auto-detects text files by content automatically. You can dismiss this warning by removing the file type association in Settings | Editor | File Types | Text.",
                  "markdown": "Reports files that were explicitly re-assigned to Plain Text File Type. This association is unnecessary because the platform auto-detects text files by content automatically.\n\nYou can dismiss this warning by removing the file type association\nin **Settings \\| Editor \\| File Types \\| Text**."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckEmptyScriptTag",
                "shortDescription": {
                  "text": "Empty tag"
                },
                "fullDescription": {
                  "text": "Reports empty tags that do not work in some browsers. Example: '<html>\n    <script/>\n  </html>' After the quick-fix is applied: '<html>\n    <script></script>\n  </html>'",
                  "markdown": "Reports empty tags that do not work in some browsers.\n\n**Example:**\n\n\n      <html>\n        <script/>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <script></script>\n      </html>\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonPathUnknownOperator",
                "shortDescription": {
                  "text": "Unknown JSONPath operator"
                },
                "fullDescription": {
                  "text": "Reports an unknown operator on a JSONPath expression instead of one of the standard ones: 'in', 'nin', 'subsetof', 'anyof', 'noneof', 'size', 'empty', 'contains'.",
                  "markdown": "Reports an unknown operator on a JSONPath expression instead of one of the standard ones: `in`, `nin`, `subsetof`, `anyof`, `noneof`, `size`, `empty`, `contains`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 41,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownTarget",
                "shortDescription": {
                  "text": "Unresolved file in a link"
                },
                "fullDescription": {
                  "text": "Reports an unresolved file in a link.",
                  "markdown": "Reports an unresolved file in a link."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlWrongRootElement",
                "shortDescription": {
                  "text": "Wrong root element"
                },
                "fullDescription": {
                  "text": "Reports a root tag name different from the name specified in the '<doctype>' tag.",
                  "markdown": "Reports a root tag name different from the name specified in the `<doctype>` tag."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 33,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownAttribute",
                "shortDescription": {
                  "text": "Unknown attribute"
                },
                "fullDescription": {
                  "text": "Reports an unknown HTML attribute. Suggests configuring attributes that should not be reported.",
                  "markdown": "Reports an unknown HTML attribute. Suggests configuring attributes that should not be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRedundantEscape",
                "shortDescription": {
                  "text": "Redundant character escape"
                },
                "fullDescription": {
                  "text": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets '[]' of a character class. Although unescaped opening curly braces '{' outside of character classes are allowed in some dialects (JavaScript, Python, and so on), it can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters. For this reason the inspection does not report escaped opening curly braces. Example: '\\-\\;[\\.]' After the quick-fix is applied: '-;[.]' The Ignore escaped closing brackets '}' and ']' option specifies whether to report '\\}' and '\\]' outside of a character class when they are allowed to be unescaped by the RegExp dialect. New in 2017.3",
                  "markdown": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets `[]` of a character class.\n\n\nAlthough unescaped opening curly braces `{` outside of character classes are allowed in some dialects (JavaScript, Python, and so on),\nit can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters.\nFor this reason the inspection does not report escaped opening curly braces.\n\n**Example:**\n\n\n      \\-\\;[\\.]\n\nAfter the quick-fix is applied:\n\n\n      -;[.]\n\n\nThe **Ignore escaped closing brackets '}' and '\\]'** option specifies whether to report `\\}` and `\\]` outside of a character class\nwhen they are allowed to be unescaped by the RegExp dialect.\n\nNew in 2017.3"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 35,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlExtraClosingTag",
                "shortDescription": {
                  "text": "Redundant closing tag"
                },
                "fullDescription": {
                  "text": "Reports redundant closing tags on empty elements, for example, 'img' or 'br'. Example: '<html>\n    <body>\n      <br></br>\n    </body>\n  </html>' After the quick-fix is applied: '<html>\n    <body>\n      <br>\n    </body>\n  </html>'",
                  "markdown": "Reports redundant closing tags on empty elements, for example, `img` or `br`.\n\n**Example:**\n\n\n      <html>\n        <body>\n          <br></br>\n        </body>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <body>\n          <br>\n        </body>\n      </html>\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlDuplicatedId",
                "shortDescription": {
                  "text": "Duplicate 'id' attribute"
                },
                "fullDescription": {
                  "text": "Reports a duplicate 'id' attribute in XML.",
                  "markdown": "Reports a duplicate `id` attribute in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 33,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlUnboundNsPrefix",
                "shortDescription": {
                  "text": "Unbound namespace prefix"
                },
                "fullDescription": {
                  "text": "Reports an unbound namespace prefix in XML.",
                  "markdown": "Reports an unbound namespace prefix in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 33,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlPathReference",
                "shortDescription": {
                  "text": "Unresolved file reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved file reference in XML.",
                  "markdown": "Reports an unresolved file reference in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 33,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LossyEncoding",
                "shortDescription": {
                  "text": "Lossy encoding"
                },
                "fullDescription": {
                  "text": "Reports characters that cannot be displayed because of the current document encoding. Examples: If you type international characters in a document with the US-ASCII charset, some characters will be lost on save. If you load a UTF-8-encoded file using the ISO-8859-1 one-byte charset, some characters will be displayed incorrectly. You can fix this by changing the file encoding either by specifying the encoding directly in the file, e.g. by editing 'encoding=' attribute in the XML prolog of XML file, or by changing the corresponding options in Settings | Editor | File Encodings.",
                  "markdown": "Reports characters that cannot be displayed because of the current document encoding.\n\nExamples:\n\n* If you type international characters in a document with the **US-ASCII** charset, some characters will be lost on save.\n* If you load a **UTF-8** -encoded file using the **ISO-8859-1** one-byte charset, some characters will be displayed incorrectly.\n\nYou can fix this by changing the file encoding\neither by specifying the encoding directly in the file, e.g. by editing `encoding=` attribute in the XML prolog of XML file,\nor by changing the corresponding options in **Settings \\| Editor \\| File Encodings**."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Internationalization",
                      "index": 66,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonSchemaDeprecation",
                "shortDescription": {
                  "text": "Deprecated JSON property"
                },
                "fullDescription": {
                  "text": "Reports a deprecated property in a JSON file. Note that deprecation mechanism is not defined in the JSON Schema specification yet, and this inspection uses a non-standard extension 'deprecationMessage'.",
                  "markdown": "Reports a deprecated property in a JSON file.  \nNote that deprecation mechanism is not defined in the JSON Schema specification yet, and this inspection uses a non-standard extension 'deprecationMessage'."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 41,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonPathEvaluateUnknownKey",
                "shortDescription": {
                  "text": "Unknown property key used for JSONPath evaluate expression"
                },
                "fullDescription": {
                  "text": "Reports a key in a JSONPath expression that is missing in the source JSON document to evaluate.",
                  "markdown": "Reports a key in a JSONPath expression that is missing in the source JSON document to evaluate."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 41,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRedundantNestedCharacterClass",
                "shortDescription": {
                  "text": "Redundant nested character class"
                },
                "fullDescription": {
                  "text": "Reports unnecessary nested character classes. Example: '[a-c[x-z]]' After the quick-fix is applied: '[a-cx-z]' New in 2020.2",
                  "markdown": "Reports unnecessary nested character classes.\n\n**Example:**\n\n\n      [a-c[x-z]]\n\nAfter the quick-fix is applied:\n\n\n      [a-cx-z]\n\nNew in 2020.2"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 35,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpOctalEscape",
                "shortDescription": {
                  "text": "Octal escape"
                },
                "fullDescription": {
                  "text": "Reports octal escapes, which are easily confused with back references. Use hexadecimal escapes to avoid confusion. Example: '\\07' After the quick-fix is applied: '\\x07' New in 2017.1",
                  "markdown": "Reports octal escapes, which are easily confused with back references. Use hexadecimal escapes to avoid confusion.\n\n**Example:**\n\n\n      \\07\n\nAfter the quick-fix is applied:\n\n\n      \\x07\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 35,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedDefine",
                "shortDescription": {
                  "text": "Unused define"
                },
                "fullDescription": {
                  "text": "Reports an unused named pattern ('define') in a RELAX-NG file (XML or Compact Syntax). 'define' elements that are used through an include in another file are ignored.",
                  "markdown": "Reports an unused named pattern (`define`) in a RELAX-NG file (XML or Compact Syntax). `define` elements that are used through an include in another file are ignored."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RELAX NG",
                      "index": 69,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpDuplicateAlternationBranch",
                "shortDescription": {
                  "text": "Duplicate branch in alternation"
                },
                "fullDescription": {
                  "text": "Reports duplicate branches in a RegExp alternation. Duplicate branches slow down matching and obscure the intent of the expression. Example: '(alpha|bravo|charlie|alpha)' After the quick-fix is applied: '(alpha|bravo|charlie)' New in 2017.1",
                  "markdown": "Reports duplicate branches in a RegExp alternation. Duplicate branches slow down matching and obscure the intent of the expression.\n\n**Example:**\n\n\n      (alpha|bravo|charlie|alpha)\n\nAfter the quick-fix is applied:\n\n\n      (alpha|bravo|charlie)\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 35,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantSuppression",
                "shortDescription": {
                  "text": "Redundant suppression"
                },
                "fullDescription": {
                  "text": "Reports usages of the following elements that can be safely removed because the inspection they affect is no longer applicable in this context: '@SuppressWarning' annotation, or '// noinspection' line comment, or '/** noinspection */' JavaDoc comment Example: 'public class C {\n // symbol is already private,\n // but annotation is still around\n  @SuppressWarnings({\"WeakerAccess\"})\n private boolean CONST = true;\n void f() {\n    CONST = false;\n  }\n}'",
                  "markdown": "Reports usages of the following elements that can be safely removed because the inspection they affect is no longer applicable in this context:\n\n* `@SuppressWarning` annotation, or\n* `// noinspection` line comment, or\n* `/** noinspection */` JavaDoc comment\n\nExample:\n\n\n    public class C {\n     // symbol is already private,\n     // but annotation is still around\n      @SuppressWarnings({\"WeakerAccess\"})\n     private boolean CONST = true;\n     void f() {\n        CONST = false;\n      }\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CustomRegExpInspection",
                "shortDescription": {
                  "text": "Custom RegExp inspection"
                },
                "fullDescription": {
                  "text": "Custom Regex Inspection",
                  "markdown": "Custom Regex Inspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 35,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpUnexpectedAnchor",
                "shortDescription": {
                  "text": "Begin or end anchor in unexpected position"
                },
                "fullDescription": {
                  "text": "Reports '^' or '\\A' anchors not at the beginning of the pattern and '$', '\\Z' or '\\z' anchors not at the end of the pattern. In the wrong position these RegExp anchors prevent the pattern from matching anything. In case of the '^' and '$' anchors, most likely the literal character was meant and the escape forgotten. Example: '(Price $10)' New in 2018.1",
                  "markdown": "Reports `^` or `\\A` anchors not at the beginning of the pattern and `$`, `\\Z` or `\\z` anchors not at the end of the pattern. In the wrong position these RegExp anchors prevent the pattern from matching anything. In case of the `^` and `$` anchors, most likely the literal character was meant and the escape forgotten.\n\n**Example:**\n\n\n      (Price $10)\n\n\nNew in 2018.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 35,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpellCheckingInspection",
                "shortDescription": {
                  "text": "Typo"
                },
                "fullDescription": {
                  "text": "Reports typos and misspellings in your code, comments, and literals and fixes them with one click.",
                  "markdown": "Reports typos and misspellings in your code, comments, and literals and fixes them with one click."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "TYPO"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Proofreading",
                      "index": 75,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpSimplifiable",
                "shortDescription": {
                  "text": "Regular expression can be simplified"
                },
                "fullDescription": {
                  "text": "Reports regular expressions that can be simplified. Example: '[a] xx* [ah-hz]' After the quick-fix is applied: 'a x+ [ahz]' New in 2022.1",
                  "markdown": "Reports regular expressions that can be simplified.\n\n**Example:**\n\n\n      [a] xx* [ah-hz]\n\nAfter the quick-fix is applied:\n\n\n      a x+ [ahz]\n\nNew in 2022.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 35,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpEmptyAlternationBranch",
                "shortDescription": {
                  "text": "Empty branch in alternation"
                },
                "fullDescription": {
                  "text": "Reports empty branches in a RegExp alternation. An empty branch will only match the empty string, and in most cases that is not what is desired. This inspection will not report a single empty branch at the start or the end of an alternation. Example: '(alpha||bravo)' After the quick-fix is applied: '(alpha|bravo)' New in 2017.2",
                  "markdown": "Reports empty branches in a RegExp alternation. An empty branch will only match the empty string, and in most cases that is not what is desired. This inspection will not report a single empty branch at the start or the end of an alternation.\n\n**Example:**\n\n\n      (alpha||bravo)\n\nAfter the quick-fix is applied:\n\n\n      (alpha|bravo)\n\nNew in 2017.2"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 35,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TodoComment",
                "shortDescription": {
                  "text": "TODO comment"
                },
                "fullDescription": {
                  "text": "Reports TODO comments in your code. You can configure the format for TODO comments in Settings | Editor | TODO. Enable the Only warn on TODO comments without any details option to only warn on empty TODO comments, that don't provide any description on the task that should be done. Disable to report all TODO comments.",
                  "markdown": "Reports **TODO** comments in your code.\n\nYou can configure the format for **TODO** comments in [Settings \\| Editor \\| TODO](settings://preferences.toDoOptions).\n\nEnable the **Only warn on TODO comments without any details** option to only warn on empty TODO comments, that\ndon't provide any description on the task that should be done. Disable to report all TODO comments."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlDefaultAttributeValue",
                "shortDescription": {
                  "text": "Redundant attribute with default value"
                },
                "fullDescription": {
                  "text": "Reports a redundant assignment of the default value to an XML attribute.",
                  "markdown": "Reports a redundant assignment of the default value to an XML attribute."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 33,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyDirectory",
                "shortDescription": {
                  "text": "Empty directory"
                },
                "fullDescription": {
                  "text": "Reports empty directories. Available only from Code | Inspect Code or Code | Analyze Code | Run Inspection by Name and isn't reported in the editor. Use the Only report empty directories located under a source folder option to have only directories under source roots reported.",
                  "markdown": "Reports empty directories.\n\nAvailable only from **Code \\| Inspect Code** or\n**Code \\| Analyze Code \\| Run Inspection by Name** and isn't reported in the editor.\n\nUse the **Only report empty directories located under a source folder** option to have only directories under source\nroots reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SyntaxError",
                "shortDescription": {
                  "text": "Syntax error"
                },
                "fullDescription": {
                  "text": "Reports syntax errors that have been found in the result of a batch code inspection run.",
                  "markdown": "Reports syntax errors that have been found in the result of a batch code inspection run."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonAsciiCharacters",
                "shortDescription": {
                  "text": "Non-ASCII characters"
                },
                "fullDescription": {
                  "text": "Reports code elements that use non-ASCII symbols in an unusual context. Example: Non-ASCII characters used in identifiers, strings, or comments. Identifiers written in different languages, such as 'myСollection' with the letter 'C' written in Cyrillic. Comments or strings containing Unicode symbols, such as long dashes and arrows.",
                  "markdown": "Reports code elements that use non-ASCII symbols in an unusual context.\n\nExample:\n\n* Non-ASCII characters used in identifiers, strings, or comments.\n* Identifiers written in different languages, such as `my`**С**`ollection` with the letter **C** written in Cyrillic.\n* Comments or strings containing Unicode symbols, such as long dashes and arrows."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Internationalization",
                      "index": 66,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IgnoreFileDuplicateEntry",
                "shortDescription": {
                  "text": "Ignore file duplicates"
                },
                "fullDescription": {
                  "text": "Reports duplicate entries (patterns) in the ignore file (e.g. .gitignore, .hgignore). Duplicate entries in these files are redundant and can be removed. Example:     # Output directories\n    /out/\n    /target/\n    /out/",
                  "markdown": "Reports duplicate entries (patterns) in the ignore file (e.g. .gitignore, .hgignore). Duplicate entries in these files are redundant and can be removed.\n\nExample:\n\n```\n    # Output directories\n    /out/\n    /target/\n    /out/\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Version control",
                      "index": 77,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonStandardCompliance",
                "shortDescription": {
                  "text": "Compliance with JSON standard"
                },
                "fullDescription": {
                  "text": "Reports the following discrepancies of a JSON file with the language specification: A line or block comment (configurable). Multiple top-level values (expect for JSON Lines files, configurable for others). A trailing comma in an object or array (configurable). A single quoted string. A property key is a not a double quoted strings. A NaN or Infinity/-Infinity numeric value as a floating point literal (configurable).",
                  "markdown": "Reports the following discrepancies of a JSON file with [the language specification](https://tools.ietf.org/html/rfc7159):\n\n* A line or block comment (configurable).\n* Multiple top-level values (expect for JSON Lines files, configurable for others).\n* A trailing comma in an object or array (configurable).\n* A single quoted string.\n* A property key is a not a double quoted strings.\n* A NaN or Infinity/-Infinity numeric value as a floating point literal (configurable)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 41,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonSchemaRefReference",
                "shortDescription": {
                  "text": "Unresolved '$ref' and '$schema' references"
                },
                "fullDescription": {
                  "text": "Reports an unresolved '$ref' or '$schema' path in a JSON schema.",
                  "markdown": "Reports an unresolved `$ref` or `$schema` path in a JSON schema.  "
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 41,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpSuspiciousBackref",
                "shortDescription": {
                  "text": "Suspicious back reference"
                },
                "fullDescription": {
                  "text": "Reports back references that will not be resolvable at runtime. This means that the back reference can never match anything. A back reference will not be resolvable when the group is defined after the back reference, or if the group is defined in a different branch of an alternation. Example of a group defined after its back reference: '\\1(abc)' Example of a group and a back reference in different branches: 'a(b)c|(xy)\\1z' New in 2022.1",
                  "markdown": "Reports back references that will not be resolvable at runtime. This means that the back reference can never match anything. A back reference will not be resolvable when the group is defined after the back reference, or if the group is defined in a different branch of an alternation.\n\n**Example of a group defined after its back reference:**\n\n\n      \\1(abc)\n\n**Example of a group and a back reference in different branches:**\n\n\n      a(b)c|(xy)\\1z\n\nNew in 2022.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 35,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnresolvedReference",
                "shortDescription": {
                  "text": "Unresolved reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved reference to a named pattern ('define') in RELAX-NG files that use XML syntax. Suggests creating the referenced 'define' element.",
                  "markdown": "Reports an unresolved reference to a named pattern (`define`) in RELAX-NG files that use XML syntax. Suggests creating the referenced `define` element."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RELAX NG",
                      "index": 69,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlMissingClosingTag",
                "shortDescription": {
                  "text": "Missing closing tag"
                },
                "fullDescription": {
                  "text": "Reports an HTML element without a closing tag. Some coding styles require that HTML elements have closing tags even where this is optional. Example: '<html>\n    <body>\n      <p>Behold!\n    </body>\n  </html>' After the quick-fix is applied: '<html>\n    <body>\n      <p>Behold!</p>\n    </body>\n  </html>'",
                  "markdown": "Reports an HTML element without a closing tag. Some coding styles require that HTML elements have closing tags even where this is optional.\n\n**Example:**\n\n\n      <html>\n        <body>\n          <p>Behold!\n        </body>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <body>\n          <p>Behold!</p>\n        </body>\n      </html>\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlInvalidId",
                "shortDescription": {
                  "text": "Unresolved 'id' reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved 'id' reference in XML.",
                  "markdown": "Reports an unresolved `id` reference in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 33,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlDeprecatedElement",
                "shortDescription": {
                  "text": "Deprecated symbol"
                },
                "fullDescription": {
                  "text": "Reports a deprecated XML element or attribute. Symbols can be marked by XML comment or documentation tag with text 'deprecated'.",
                  "markdown": "Reports a deprecated XML element or attribute.\n\nSymbols can be marked by XML comment or documentation tag with text 'deprecated'."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 33,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpAnonymousGroup",
                "shortDescription": {
                  "text": "Anonymous capturing group or numeric back reference"
                },
                "fullDescription": {
                  "text": "Reports anonymous capturing groups and numeric back references in a RegExp. These are only reported when the RegExp dialect supports named group and named group references. Named groups and named back references improve code readability and are recommended to use instead. When a capture is not needed, matching can be more performant and use less memory by using a non-capturing group, i.e. '(?:xxx)' instead of '(xxx)'. Example: '(\\d\\d\\d\\d)\\1' A better regex pattern could look like this: '(?<quad>\\d\\d\\d\\d)\\k<quad>' New in 2017.2",
                  "markdown": "Reports anonymous capturing groups and numeric back references in a RegExp. These are only reported when the RegExp dialect supports named group and named group references. Named groups and named back references improve code readability and are recommended to use instead. When a capture is not needed, matching can be more performant and use less memory by using a non-capturing group, i.e. `(?:xxx)` instead of `(xxx)`.\n\n**Example:**\n\n\n      (\\d\\d\\d\\d)\\1\n\nA better regex pattern could look like this:\n\n\n      (?<quad>\\d\\d\\d\\d)\\k<quad>\n\nNew in 2017.2"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 35,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRepeatedSpace",
                "shortDescription": {
                  "text": "Consecutive spaces"
                },
                "fullDescription": {
                  "text": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier. Example: '(     )' After the quick-fix is applied: '( {5})' New in 2017.1",
                  "markdown": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 35,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InconsistentLineSeparators",
                "shortDescription": {
                  "text": "Inconsistent line separators"
                },
                "fullDescription": {
                  "text": "Reports files with line separators different from the ones that are specified in the project's settings. For example, the inspection will be triggered if you set the line separator to '\\n' in Settings | Editor | Code Style | Line separator, while the file you are editing uses '\\r\\n' as a line separator. The inspection also warns you about mixed line separators within a file.",
                  "markdown": "Reports files with line separators different from the ones that are specified in the project's settings.\n\nFor example, the inspection will be triggered if you set the line separator to `\\n` in\n[Settings \\| Editor \\| Code Style \\| Line separator](settings://preferences.sourceCode?Line%20separator),\nwhile the file you are editing uses `\\r\\n` as a line separator.\n\nThe inspection also warns you about mixed line separators within a file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ProblematicWhitespace",
                "shortDescription": {
                  "text": "Problematic whitespace"
                },
                "fullDescription": {
                  "text": "Reports the following problems: Tabs used for indentation when the code style is configured to use only spaces. Spaces used for indentation when the code style is configured to use only tabs. Spaces used for indentation and tabs used for alignment when the code style is configured to use smart tabs.",
                  "markdown": "Reports the following problems:\n\n* Tabs used for indentation when the code style is configured to use only spaces.\n* Spaces used for indentation when the code style is configured to use only tabs.\n* Spaces used for indentation and tabs used for alignment when the code style is configured to use smart tabs."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LongLine",
                "shortDescription": {
                  "text": "Line is longer than allowed by code style"
                },
                "fullDescription": {
                  "text": "Reports lines that are longer than the Hard wrap at parameter specified in Settings | Editor | Code Style | General.",
                  "markdown": "Reports lines that are longer than the **Hard wrap at** parameter specified in [Settings \\| Editor \\| Code Style \\| General](settings://preferences.sourceCode?Hard%20wrap%20at)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownTag",
                "shortDescription": {
                  "text": "Unknown tag"
                },
                "fullDescription": {
                  "text": "Reports an unknown HTML tag. Suggests configuring tags that should not be reported.",
                  "markdown": "Reports an unknown HTML tag. Suggests configuring tags that should not be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlHighlighting",
                "shortDescription": {
                  "text": "XML highlighting"
                },
                "fullDescription": {
                  "text": "Reports XML validation problems in the results of a batch code inspection.",
                  "markdown": "Reports XML validation problems in the results of a batch code inspection."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 33,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpDuplicateCharacterInClass",
                "shortDescription": {
                  "text": "Duplicate character in character class"
                },
                "fullDescription": {
                  "text": "Reports duplicate characters inside a RegExp character class. Duplicate characters are unnecessary and can be removed without changing the semantics of the regex. Example: '[aabc]' After the quick-fix is applied: '[abc]'",
                  "markdown": "Reports duplicate characters inside a RegExp character class. Duplicate characters are unnecessary and can be removed without changing the semantics of the regex.\n\n**Example:**\n\n\n      [aabc]\n\nAfter the quick-fix is applied:\n\n\n      [abc]\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 35,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RequiredAttributes",
                "shortDescription": {
                  "text": "Missing required attribute"
                },
                "fullDescription": {
                  "text": "Reports a missing mandatory attribute in an XML/HTML tag. Suggests configuring attributes that should not be reported.",
                  "markdown": "Reports a missing mandatory attribute in an XML/HTML tag. Suggests configuring attributes that should not be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRedundantClassElement",
                "shortDescription": {
                  "text": "Redundant '\\d', '[:digit:]', or '\\D' class elements"
                },
                "fullDescription": {
                  "text": "Reports redundant '\\d' or '[:digit:]' that are used in one class with '\\w' or '[:word:]' ('\\D' with '\\W') and can be removed. Example: '[\\w\\d]' After the quick-fix is applied: '[\\w]' New in 2022.2",
                  "markdown": "Reports redundant `\\d` or `[:digit:]` that are used in one class with `\\w` or `[:word:]` (`\\D` with `\\W`) and can be removed.\n\n**Example:**\n\n\n      [\\w\\d]\n\nAfter the quick-fix is applied:\n\n\n      [\\w]\n\nNew in 2022.2"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 35,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Json5StandardCompliance",
                "shortDescription": {
                  "text": "Compliance with JSON5 standard"
                },
                "fullDescription": {
                  "text": "Reports inconsistency with the language specification in a JSON5 file.",
                  "markdown": "Reports inconsistency with [the language specification](http://json5.org) in a JSON5 file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 41,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlWrongAttributeValue",
                "shortDescription": {
                  "text": "Wrong attribute value"
                },
                "fullDescription": {
                  "text": "Reports an incorrect HTML attribute value.",
                  "markdown": "Reports an incorrect HTML attribute value."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MsbuildTargetFrameworkTagInspection",
                "shortDescription": {
                  "text": "TargetFramework tag checks"
                },
                "fullDescription": {
                  "text": "RIDER-83136",
                  "markdown": "[RIDER-83136](https://youtrack.jetbrains.com/issue/RIDER-83136/)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MSBuild",
                      "index": 81,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckValidXmlInScriptTagBody",
                "shortDescription": {
                  "text": "Malformed content of 'script' tag"
                },
                "fullDescription": {
                  "text": "Reports contents of 'script' tags that are invalid XML. Example: '<script type=\"text/javascript\">\n    console.log('<');\n  </script>' After the quick-fix is applied: '<script type=\"text/javascript\">\n    console.log('&lt;');\n  </script>'",
                  "markdown": "Reports contents of `script` tags that are invalid XML.  \n\n**Example:**\n\n\n      <script type=\"text/javascript\">\n        console.log('<');\n      </script>\n\nAfter the quick-fix is applied:\n\n\n      <script type=\"text/javascript\">\n        console.log('&lt;');\n      </script>\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownAnchorTarget",
                "shortDescription": {
                  "text": "Unresolved fragment in a link"
                },
                "fullDescription": {
                  "text": "Reports an unresolved last part of an URL after the '#' sign.",
                  "markdown": "Reports an unresolved last part of an URL after the `#` sign."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Annotator",
                "shortDescription": {
                  "text": "Annotator"
                },
                "fullDescription": {
                  "text": "Reports problems that are found by language annotators in the result of a batch code inspection run.",
                  "markdown": "Reports problems that are found by language annotators in the result of a batch code inspection run."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonDuplicatePropertyKeys",
                "shortDescription": {
                  "text": "Duplicate keys in object literals"
                },
                "fullDescription": {
                  "text": "Reports a duplicate key in an object literal.",
                  "markdown": "Reports a duplicate key in an object literal."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 41,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "JavaScript",
            "version": "231.5825.43",
            "rules": [
              {
                "id": "FlowJSError",
                "shortDescription": {
                  "text": "Flow type checker"
                },
                "fullDescription": {
                  "text": "Reports errors from Flow.",
                  "markdown": "Reports errors from [Flow](https://flowtype.org/)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Flow type checker",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ShiftOutOfRangeJS",
                "shortDescription": {
                  "text": "Shift operation by possibly wrong constant"
                },
                "fullDescription": {
                  "text": "Reports a shift operation where the second operand is a constant outside the reasonable range, for example, an integer shift operation outside the range '0..31', shifting by negative or overly large values.",
                  "markdown": "Reports a shift operation where the second operand is a constant outside the reasonable range, for example, an integer shift operation outside the range `0..31`, shifting by negative or overly large values."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Bitwise operation issues",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSClosureCompilerSyntax",
                "shortDescription": {
                  "text": "Incorrect usage of JSDoc tags"
                },
                "fullDescription": {
                  "text": "Reports warnings implied by Google Closure Compiler annotations including correct use of '@abstract', '@interface', and '@implements' tags.",
                  "markdown": "Reports warnings implied by *Google Closure Compiler* annotations including correct use of `@abstract`, `@interface`, and `@implements` tags."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadExpressionStatementJS",
                "shortDescription": {
                  "text": "Expression statement which is not assignment or call"
                },
                "fullDescription": {
                  "text": "Reports an expression statement that is neither an assignment nor a call. Such statements usually indicate an error.",
                  "markdown": "Reports an expression statement that is neither an assignment nor a call. Such statements usually indicate an error."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Validity issues",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ContinueStatementJS",
                "shortDescription": {
                  "text": "'continue' statement"
                },
                "fullDescription": {
                  "text": "Reports a 'continue' statement.",
                  "markdown": "Reports a `continue` statement."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSXSyntaxUsed",
                "shortDescription": {
                  "text": "JSX syntax used"
                },
                "fullDescription": {
                  "text": "Reports a usage of a JSX tag in JavaScript code.",
                  "markdown": "Reports a usage of a JSX tag in JavaScript code."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSJoinVariableDeclarationAndAssignment",
                "shortDescription": {
                  "text": "Variable declaration can be merged with the first assignment to the variable"
                },
                "fullDescription": {
                  "text": "Reports a variable that is declared without an initializer and is used much further in the code or in a single nested scope. Suggests moving the variable closer to its usages and joining it with the initializer expression.",
                  "markdown": "Reports a variable that is declared without an initializer and is used much further in the code or in a single nested scope. Suggests moving the variable closer to its usages and joining it with the initializer expression."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ConvertModuleExportToExport",
                "shortDescription": {
                  "text": "'module.exports' is used instead of 'export'"
                },
                "fullDescription": {
                  "text": "Reports a 'module.export' statement. Suggests replacing it with an 'export' or 'export default' statement. Please note that the quick-fix for converting 'module.export' into 'export' is not available for 'module.export' inside functions or statements because 'export' statements can only be at the top level of a module.",
                  "markdown": "Reports a `module.export` statement. Suggests replacing it with an `export` or `export default` statement.   \n\nPlease note that the quick-fix for converting `module.export` into `export` is not available for `module.export` inside functions or statements because `export` statements can only be at the top level of a module."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 30,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DocumentWriteJS",
                "shortDescription": {
                  "text": "Call to 'document.write()'"
                },
                "fullDescription": {
                  "text": "Reports a method call to 'document.write()' or 'document.writeln()'. Most usages of such calls are performed better with explicit DOM calls, such as 'getElementByID()' and 'createElement()'. Additionally, the 'write()' and 'writeln()' calls will not work with XML DOMs, including DOMs for XHTML if viewed as XML. This can result in difficulty to point out bugs.",
                  "markdown": "Reports a method call to `document.write()` or `document.writeln()`. Most usages of such calls are performed better with explicit DOM calls, such as `getElementByID()` and `createElement()`. Additionally, the `write()` and `writeln()` calls will not work with XML DOMs, including DOMs for XHTML if viewed as XML. This can result in difficulty to point out bugs."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/DOM issues",
                      "index": 31,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IncompatibleMaskJS",
                "shortDescription": {
                  "text": "Incompatible bitwise mask operation"
                },
                "fullDescription": {
                  "text": "Reports a bitwise mask expression which for sure evaluates to 'true' or 'false'. Expressions are of the form '(var & constant1) == constant2' or '(var | constant1) == constant2', where 'constant1' and 'constant2' are incompatible bitmask constants. Example: // Incompatible mask: as the last byte in mask is zero,\n// something like 0x1200 would be possible, but not 0x1234\nif ((mask & 0xFF00) == 0x1234) {...}",
                  "markdown": "Reports a bitwise mask expression which for sure evaluates to `true` or `false`. Expressions are of the form `(var & constant1) == constant2` or `(var | constant1) == constant2`, where `constant1` and `constant2` are incompatible bitmask constants.\n\nExample:\n\n```\n// Incompatible mask: as the last byte in mask is zero,\n// something like 0x1200 would be possible, but not 0x1234\nif ((mask & 0xFF00) == 0x1234) {...}\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Bitwise operation issues",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnresolvedVariable",
                "shortDescription": {
                  "text": "Unresolved JavaScript variable"
                },
                "fullDescription": {
                  "text": "Reports an unresolved referenced variable or field. TypeScript code is ignored.",
                  "markdown": "Reports an unresolved referenced variable or field.\n\nTypeScript code is ignored."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSDuplicatedDeclaration",
                "shortDescription": {
                  "text": "Duplicate declaration"
                },
                "fullDescription": {
                  "text": "Reports multiple declarations in a scope.",
                  "markdown": "Reports multiple declarations in a scope."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptValidateGenericTypes",
                "shortDescription": {
                  "text": "Incorrect generic type argument"
                },
                "fullDescription": {
                  "text": "Reports an invalid type argument in a function, interface, or class declaration.",
                  "markdown": "Reports an invalid type argument in a function, interface, or class declaration."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSFileReferences",
                "shortDescription": {
                  "text": "Unresolved file reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved file reference in a JavaScript file, including CommonJS and AMD modules references.",
                  "markdown": "Reports an unresolved file reference in a JavaScript file, including CommonJS and AMD modules references."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FunctionWithInconsistentReturnsJS",
                "shortDescription": {
                  "text": "Function with inconsistent returns"
                },
                "fullDescription": {
                  "text": "Reports a function that returns a value in some cases while in other cases no value is returned. This usually indicates an error. Example: 'function foo() {\n  if (true)\n    return 3;\n  return;\n}'",
                  "markdown": "Reports a function that returns a value in some cases while in other cases no value is returned. This usually indicates an error.\n\nExample:\n\n\n    function foo() {\n      if (true)\n        return 3;\n      return;\n    }\n\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Validity issues",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ClassMemberInitializationOrder",
                "shortDescription": {
                  "text": "Use of possibly unassigned property in a static initializer"
                },
                "fullDescription": {
                  "text": "Reports a class member initializer which references another non-hoisted class member while the latter may be not initialized yet. Initialization of class members happens consequently for fields, so a field cannot reference another field that is declared later.",
                  "markdown": "Reports a class member initializer which references another non-hoisted class member while the latter may be not initialized yet.   \n\nInitialization of class members happens consequently for fields, so a field cannot reference another field that is declared later."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NestedFunctionJS",
                "shortDescription": {
                  "text": "Nested function"
                },
                "fullDescription": {
                  "text": "Reports a function nested inside another function. Although JavaScript allows functions to be nested, such constructs may be confusing. Use the checkbox below to ignore anonymous nested functions.",
                  "markdown": "Reports a function nested inside another function. Although JavaScript allows functions to be nested, such constructs may be confusing.\n\n\nUse the checkbox below to ignore anonymous nested functions."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 36,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptUMDGlobal",
                "shortDescription": {
                  "text": "Referenced UMD global variable"
                },
                "fullDescription": {
                  "text": "Reports a usage of a UMD global variable if the current file is a module (EcmaScript or CommonJS). Referencing UMD variables without explicit imports can lead to a runtime error if the library isn't included implicitly.",
                  "markdown": "Reports a usage of a UMD global variable if the current file is a module (EcmaScript or CommonJS). Referencing UMD variables without explicit imports can lead to a runtime error if the library isn't included implicitly."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryReturnJS",
                "shortDescription": {
                  "text": "Unnecessary 'return' statement"
                },
                "fullDescription": {
                  "text": "Reports an unnecessary 'return' statement, that is, a 'return' statement that returns no value and occurs just before the function would have \"fallen through\" the bottom. These statements may be safely removed.",
                  "markdown": "Reports an unnecessary `return` statement, that is, a `return` statement that returns no value and occurs just before the function would have \"fallen through\" the bottom. These statements may be safely removed."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 37,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StandardJS",
                "shortDescription": {
                  "text": "Standard code style"
                },
                "fullDescription": {
                  "text": "Reports a discrepancy detected by the JavaScript Standard Style linter. The highlighting severity in the editor is based on the severity level the linter reports.",
                  "markdown": "Reports a discrepancy detected by the [JavaScript Standard Style](https://standardjs.com/) linter.   \n\nThe highlighting severity in the editor is based on the severity level the linter reports."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code quality tools",
                      "index": 38,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSCommentMatchesSignature",
                "shortDescription": {
                  "text": "Mismatched JSDoc and function signature"
                },
                "fullDescription": {
                  "text": "Reports mismatch between the names and the number of parameters within a JSDoc comment and the actual parameters of a function. Suggests updating parameters in JSDoc comment. Example: '/**\n * @param height Height in pixels\n */\nfunction sq(height, width) {} // width is not documented' After the quick-fix is applied: '/**\n * @param height Height in pixels\n * @param width\n */\nfunction sq(height, width) {}'",
                  "markdown": "Reports mismatch between the names and the number of parameters within a JSDoc comment and the actual parameters of a function. Suggests updating parameters in JSDoc comment.\n\n**Example:**\n\n\n    /**\n     * @param height Height in pixels\n     */\n    function sq(height, width) {} // width is not documented\n\nAfter the quick-fix is applied:\n\n\n    /**\n     * @param height Height in pixels\n     * @param width\n     */\n    function sq(height, width) {}\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FunctionWithMultipleReturnPointsJS",
                "shortDescription": {
                  "text": "Function with multiple return points"
                },
                "fullDescription": {
                  "text": "Reports a function with multiple return points. Such functions are hard to understand and maintain.",
                  "markdown": "Reports a function with multiple return points. Such functions are hard to understand and maintain."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Function metrics",
                      "index": 40,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSRemoveUnnecessaryParentheses",
                "shortDescription": {
                  "text": "Unnecessary parentheses"
                },
                "fullDescription": {
                  "text": "Reports redundant parentheses. In expressions: 'var x = ((1) + 2) + 3' In arrow function argument lists: 'var incrementer = (x) => x + 1' In TypeScript and Flow type declarations: 'type Card = (Suit & Rank) | (Suit & Number)'",
                  "markdown": "Reports redundant parentheses.\n\nIn expressions:\n`var x = ((1) + 2) + 3`\n\nIn arrow function argument lists:\n`var incrementer = (x) => x + 1`\n\nIn TypeScript and Flow type declarations:\n`type Card = (Suit & Rank) | (Suit & Number)`"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 42,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CommaExpressionJS",
                "shortDescription": {
                  "text": "Comma expression"
                },
                "fullDescription": {
                  "text": "Reports a comma expression. Such expressions are often a sign of overly clever code, and may lead to subtle bugs. Comma expressions in the initializer or in the update section of 'for' loops are ignored.",
                  "markdown": "Reports a comma expression. Such expressions are often a sign of overly clever code, and may lead to subtle bugs. Comma expressions in the initializer or in the update section of `for` loops are ignored."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6BindWithArrowFunction",
                "shortDescription": {
                  "text": "Suspicious usage of 'bind' with arrow function"
                },
                "fullDescription": {
                  "text": "Reports 'bind' used together with an arrow function. Because arrow functions use lexical 'this', a 'bind' call will have no effect on them. See here for details.",
                  "markdown": "Reports `bind` used together with an arrow function.  \nBecause arrow functions use lexical `this`, a `bind` call will have no effect on them.  \nSee [here](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions#Lexical_this) for details."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 46,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSBitwiseOperatorUsage",
                "shortDescription": {
                  "text": "Bitwise operator usage"
                },
                "fullDescription": {
                  "text": "Reports a suspicious usage of a bitwise AND (\"'&'\") or OR (\"'|'\") operator. Usually it is a typo and the result of applying boolean operations AND (\"'&&'\") and OR (\"'||'\") is expected.",
                  "markdown": "Reports a suspicious usage of a bitwise AND (\"`&`\") or OR (\"`|`\") operator. Usually it is a typo and the result of applying boolean operations AND (\"`&&`\") and OR (\"`||`\") is expected."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Bitwise operation issues",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IfStatementWithIdenticalBranchesJS",
                "shortDescription": {
                  "text": "'if' statement with identical branches"
                },
                "fullDescription": {
                  "text": "Reports an 'if' statement with identical 'then' and 'else' branches. Such statements are almost certainly an error.",
                  "markdown": "Reports an `if` statement with identical `then` and `else` branches. Such statements are almost certainly an error."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 37,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSConsecutiveCommasInArrayLiteral",
                "shortDescription": {
                  "text": "Consecutive commas in array literal"
                },
                "fullDescription": {
                  "text": "Reports a consecutive comma in an array literal. The skipped element accepts the 'undefined' value, but it could be done unintentionally, for example, when commas are at the end of one line and at the beginning of the next one.",
                  "markdown": "Reports a consecutive comma in an array literal. The skipped element accepts the `undefined` value, but it could be done unintentionally, for example, when commas are at the end of one line and at the beginning of the next one."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 46,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSValidateTypes",
                "shortDescription": {
                  "text": "Type mismatch"
                },
                "fullDescription": {
                  "text": "Reports incorrect type of: a parameter in a function call a return value an assigned expression TypeScript code is ignored.",
                  "markdown": "Reports incorrect type of:\n\n* a parameter in a function call\n* a return value\n* an assigned expression\n\nTypeScript code is ignored."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSPotentiallyInvalidUsageOfClassThis",
                "shortDescription": {
                  "text": "Potentially invalid reference to 'this' of a class from closure"
                },
                "fullDescription": {
                  "text": "Reports an attempt to reference a member of an ECMAScript class via the 'this.' qualifier in a nested function that is not a lambda. 'this' in a nested function that is not a lambda is the function's own 'this' and doesn't relate to the outer class.",
                  "markdown": "Reports an attempt to reference a member of an ECMAScript class via the `this.` qualifier in a nested function that is not a lambda.  \n`this` in a nested function that is not a lambda is the function's own `this` and doesn't relate to the outer class."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 46,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryContinueJS",
                "shortDescription": {
                  "text": "Unnecessary 'continue' statement"
                },
                "fullDescription": {
                  "text": "Reports an unnecessary 'continue' statement at the end of a loop. Suggests removing such statements.",
                  "markdown": "Reports an unnecessary `continue` statement at the end of a loop. Suggests removing such statements."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 37,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BreakStatementWithLabelJS",
                "shortDescription": {
                  "text": "'break' statement with label"
                },
                "fullDescription": {
                  "text": "Reports a labeled 'break' statement.",
                  "markdown": "Reports a labeled `break` statement."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSDeclarationsAtScopeStart",
                "shortDescription": {
                  "text": "'var' declared not at the beginning of a function"
                },
                "fullDescription": {
                  "text": "Checks that declarations of local variables declared with var are at the top of a function scope. By default, variable declarations are always moved (\"hoisted\") invisibly to the top of their containing scope when the code is executed. Therefore, declaring them at the top of the scope helps represent this behavior in the code.",
                  "markdown": "Checks that declarations of local variables declared with **var** are at the top of a function scope.   \n\nBy default, variable declarations are always moved (\"hoisted\") invisibly to the top of their containing scope when the code is executed. Therefore, declaring them at the top of the scope helps represent this behavior in the code."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 42,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ConvertIndexedForToForOf",
                "shortDescription": {
                  "text": "Indexed 'for' is used instead of 'for..of'"
                },
                "fullDescription": {
                  "text": "Reports an indexed 'for' loop used on an array. Suggests replacing it with a 'for..of' loop. 'for..of' loops are introduced in ECMAScript 6 and iterate over 'iterable' objects.",
                  "markdown": "Reports an indexed [for](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for) loop used on an array. Suggests replacing it with a [for..of](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loop.   \n`for..of` loops are introduced in ECMAScript 6 and iterate over `iterable` objects."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 30,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ConvertVarToLetConst",
                "shortDescription": {
                  "text": "'var' is used instead of 'let' or 'const'"
                },
                "fullDescription": {
                  "text": "Reports a 'var' declaration that is used instead of 'let' or 'const'. Both 'let' and 'const' are block-scoped and behave more strictly. Suggests replacing all 'var' declarations with 'let' or 'const' declarations, depending on the semantics of a particular value. The declarations may be moved to the top of the function or placed before the first usage of the variable to avoid Reference errors. Select the 'Conservatively convert var with Fix all action' option to prevent any changes in these complex cases when using the 'Fix all' action.",
                  "markdown": "Reports a `var` declaration that is used instead of `let` or `const`.  \nBoth `let` and `const` are block-scoped and behave more strictly.   \n\nSuggests replacing all `var` declarations with `let` or `const` declarations, depending on the semantics of a particular value. The declarations may be moved to the top of the function or placed before the first usage of the variable to avoid Reference errors.   \nSelect the 'Conservatively convert var with Fix all action' option to prevent any changes in these complex cases when using the 'Fix all' action."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 30,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DynamicallyGeneratedCodeJS",
                "shortDescription": {
                  "text": "Execution of dynamically generated code"
                },
                "fullDescription": {
                  "text": "Reports a call of the 'eval()', 'setTimeout()', or 'setInterval()' function or an allocation of a 'Function' object. These functions are used to execute arbitrary strings of JavaScript text, which often dynamically generated. This can be very confusing, and may be a security risk. Ignores the cases when a callback function is provided to these methods statically, without code generation.",
                  "markdown": "Reports a call of the `eval()`, `setTimeout()`, or `setInterval()` function or an allocation of a `Function` object. These functions are used to execute arbitrary strings of JavaScript text, which often dynamically generated. This can be very confusing, and may be a security risk.   \n\nIgnores the cases when a callback function is provided to these methods statically, without code generation."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 36,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedCatchParameterJS",
                "shortDescription": {
                  "text": "Unused 'catch' parameter"
                },
                "fullDescription": {
                  "text": "Reports a 'catch' parameter that is not used in the corresponding block. The 'catch' parameters named 'ignore' or 'ignored' are ignored. Use the checkbox below to disable this inspection for 'catch' blocks with comments.",
                  "markdown": "Reports a `catch` parameter that is not used in the corresponding block. The `catch` parameters named `ignore` or `ignored` are ignored.\n\n\nUse the checkbox below to disable this inspection for `catch`\nblocks with comments."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 50,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AnonymousFunctionJS",
                "shortDescription": {
                  "text": "Anonymous function"
                },
                "fullDescription": {
                  "text": "Reports an anonymous function. An explicit name of a function expression may be helpful for debugging. Ignores function expressions without names if they have a 'name' property specified in the ECMAScript 6 standard. For example, 'var bar = function() {};' is not reported.",
                  "markdown": "Reports an anonymous function. An explicit name of a function expression may be helpful for debugging. Ignores function expressions without names if they have a `name` property specified in the ECMAScript 6 standard. For example, `var bar = function() {};` is not reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyCatchBlockJS",
                "shortDescription": {
                  "text": "Empty 'catch' block"
                },
                "fullDescription": {
                  "text": "Reports an empty 'catch' block. This indicates that errors are simply ignored instead of handling them. Any comment in a 'catch' block mutes the inspection.",
                  "markdown": "Reports an empty `catch` block. This indicates that errors are simply ignored instead of handling them.   \n\nAny comment in a `catch` block mutes the inspection."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 50,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ThrowFromFinallyBlockJS",
                "shortDescription": {
                  "text": "'throw' inside 'finally' block"
                },
                "fullDescription": {
                  "text": "Reports s 'throw' statement inside a 'finally' block. Such 'throw' statements may mask exceptions thrown, and complicate debugging.",
                  "markdown": "Reports s `throw` statement inside a `finally` block. Such `throw` statements may mask exceptions thrown, and complicate debugging."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 50,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSPotentiallyInvalidUsageOfThis",
                "shortDescription": {
                  "text": "Potentially invalid reference to 'this' from closure"
                },
                "fullDescription": {
                  "text": "Reports a 'this' in closure that is used for referencing properties of outer context. Example: 'function Outer() {\n  this.outerProp = 1;\n  function inner() {\n    // bad, because 'outerProp' of Outer\n    // won't be updated here\n    // on calling 'new Outer()' as may be expected\n    this.outerProp = 2;\n  }\n  inner();\n}'",
                  "markdown": "Reports a `this` in closure that is used for referencing properties of outer context.\n\nExample:\n\n\n    function Outer() {\n      this.outerProp = 1;\n      function inner() {\n        // bad, because 'outerProp' of Outer\n        // won't be updated here\n        // on calling 'new Outer()' as may be expected\n        this.outerProp = 2;\n      }\n      inner();\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 46,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnresolvedLibraryURL",
                "shortDescription": {
                  "text": "Missed locally stored library for HTTP link"
                },
                "fullDescription": {
                  "text": "Reports a URL of an external JavaScript library that is not associated with any locally stored file. Suggests downloading the library. Such association enables the IDE to provide proper code completion and navigation.",
                  "markdown": "Reports a URL of an external JavaScript library that is not associated with any locally stored file. Suggests downloading the library. Such association enables the IDE to provide proper code completion and navigation."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptFieldCanBeMadeReadonly",
                "shortDescription": {
                  "text": "Field can be readonly"
                },
                "fullDescription": {
                  "text": "Reports a private field that can be made readonly (for example, if the field is assigned only in the constructor).",
                  "markdown": "Reports a private field that can be made readonly (for example, if the field is assigned only in the constructor)."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NegatedIfStatementJS",
                "shortDescription": {
                  "text": "Negated 'if' statement"
                },
                "fullDescription": {
                  "text": "Reports if statements which have an else branch and a negated condition. Flipping the order of the if and else branches will usually increase the clarity of such statements.",
                  "markdown": "Reports **if** statements which have an **else** branch and a negated condition. Flipping the order of the **if** and **else** branches will usually increase the clarity of such statements."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 36,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConditionalExpressionWithIdenticalBranchesJS",
                "shortDescription": {
                  "text": "Conditional expression with identical branches"
                },
                "fullDescription": {
                  "text": "Reports a ternary conditional expression with identical 'then' and 'else' branches.",
                  "markdown": "Reports a ternary conditional expression with identical `then` and `else` branches."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 37,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSIncompatibleTypesComparison",
                "shortDescription": {
                  "text": "Comparison of expressions having incompatible types"
                },
                "fullDescription": {
                  "text": "Reports a comparison with operands of incompatible types or an operand with a type without possible common values.",
                  "markdown": "Reports a comparison with operands of incompatible types or an operand with a type without possible common values."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 46,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6TopLevelAwaitExpression",
                "shortDescription": {
                  "text": "Top-level 'await' expression"
                },
                "fullDescription": {
                  "text": "Reports a usage of a top-level 'await' expression. While the new 'top-level async' proposal is on its way, using 'await' outside async functions is not allowed.",
                  "markdown": "Reports a usage of a top-level `await` expression. While the new 'top-level async' proposal is on its way, using `await` outside async functions is not allowed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Async code and promises",
                      "index": 52,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ParameterNamingConventionJS",
                "shortDescription": {
                  "text": "Function parameter naming convention"
                },
                "fullDescription": {
                  "text": "Reports a function parameter whose name is too short, too long, or doesn't follow the specified regular expression pattern. Use the fields provided below to specify minimum length, maximum length and regular expression expected for local variables names. Use the standard 'java.util.regex' format regular expressions.",
                  "markdown": "Reports a function parameter whose name is too short, too long, or doesn't follow the specified regular expression pattern.\n\n\nUse the fields provided below to specify minimum length, maximum length and regular expression\nexpected for local variables names. Use the standard `java.util.regex` format regular expressions."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Naming conventions",
                      "index": 53,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ParametersPerFunctionJS",
                "shortDescription": {
                  "text": "Function with too many parameters"
                },
                "fullDescription": {
                  "text": "Reports a function with too many parameters. Such functions often indicate problems with design. Use the field below to specify the maximum acceptable number of parameters for a function.",
                  "markdown": "Reports a function with too many parameters. Such functions often indicate problems with design.\n\n\nUse the field below to specify the maximum acceptable number of parameters for a function."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Function metrics",
                      "index": 40,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSSuspiciousNameCombination",
                "shortDescription": {
                  "text": "Suspicious variable/parameter name combination"
                },
                "fullDescription": {
                  "text": "Reports an assignment or a function call where the name of the target variable or the function parameter does not match the name of the value assigned to it. Example: 'var x = 0;\n  var y = x;' or 'var x = 0, y = 0;\n  var rc = new Rectangle(y, x, 20, 20);' Specify the names that should not be used together. An error is reported if a parameter name or an assignment target name contains words from one group while the name of the assigned or passed variable contains words from another group.",
                  "markdown": "Reports an assignment or a function call where the name of the target variable or the function parameter does not match the name of the value assigned to it.\n\nExample:\n\n\n      var x = 0;\n      var y = x;\n\nor\n\n\n      var x = 0, y = 0;\n      var rc = new Rectangle(y, x, 20, 20);\n\nSpecify the names that should not be used together. An error is reported\nif a parameter name or an assignment target name contains words from one group while the name of the assigned or passed\nvariable contains words from another group."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 46,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnresolvedFunction",
                "shortDescription": {
                  "text": "Unresolved JavaScript function"
                },
                "fullDescription": {
                  "text": "Reports an unresolved function in a call. TypeScript code is ignored.",
                  "markdown": "Reports an unresolved function in a call.\n\nTypeScript code is ignored."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ChainedFunctionCallJS",
                "shortDescription": {
                  "text": "Chained function call"
                },
                "fullDescription": {
                  "text": "Reports a function call whose target is another function call, for example, 'foo().bar()'",
                  "markdown": "Reports a function call whose target is another function call, for example, `foo().bar()`"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 42,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSCheckFunctionSignatures",
                "shortDescription": {
                  "text": "Signature mismatch"
                },
                "fullDescription": {
                  "text": "Reports a JavaScript call expression where the arguments do not match the signature of the referenced function, including the types of arguments and their number. Also, reports if the overloading function doesn't match the overloaded one in terms of parameters and return types. TypeScript code is ignored.",
                  "markdown": "Reports a JavaScript call expression where the arguments do not match the signature of the referenced function, including the types of arguments and their number. Also, reports if the overloading function doesn't match the overloaded one in terms of parameters and return types.\n\nTypeScript code is ignored."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConstantOnLHSOfComparisonJS",
                "shortDescription": {
                  "text": "Constant on left side of comparison"
                },
                "fullDescription": {
                  "text": "Reports a comparison operation with a constant value in the left-hand side. According to coding conventions, constants should be in the right-hand side of comparisons.",
                  "markdown": "Reports a comparison operation with a constant value in the left-hand side. According to coding conventions, constants should be in the right-hand side of comparisons."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 42,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6RedundantAwait",
                "shortDescription": {
                  "text": "Redundant 'await' expression"
                },
                "fullDescription": {
                  "text": "Reports a redundant usage of 'await', such as 'await await', or awaiting a non-promise result. When the 'Report for promises' option is selected, suggests removing 'await' before promises when applicable (in 'return' statements, and with 'Promise.resolve/reject'). Removing 'await' in such contexts causes two problems. Surrounding your code with 'try-catch' and forgetting to add 'await' will change code semantics while you may fail to notice that. Having an explicit 'await' may prevent the V8 runtime from providing async stack traces.",
                  "markdown": "Reports a redundant usage of `await`, such as `await await`, or awaiting a non-promise result.\n\n\nWhen the 'Report for promises' option is selected, suggests removing `await` before promises when applicable\n(in `return` statements, and with `Promise.resolve/reject`).\n\nRemoving `await` in such contexts causes two problems.\n\n* Surrounding your code with `try-catch` and forgetting to add `await` will change code semantics while you may fail to notice that.\n* Having an explicit `await` may prevent the V8 runtime from providing [async stack traces](http://bit.ly/v8-zero-cost-async-stack-traces)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Async code and promises",
                      "index": 52,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AssignmentToFunctionParameterJS",
                "shortDescription": {
                  "text": "Assignment to function parameter"
                },
                "fullDescription": {
                  "text": "Reports an assignment to a function parameter, including increment and decrement operations. Although occasionally intended, this construct can be extremely confusing, and is often a result of an error.",
                  "markdown": "Reports an assignment to a function parameter, including increment and decrement operations. Although occasionally intended, this construct can be extremely confusing, and is often a result of an error."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Assignment issues",
                      "index": 54,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FallThroughInSwitchStatementJS",
                "shortDescription": {
                  "text": "Fallthrough in 'switch' statement"
                },
                "fullDescription": {
                  "text": "Reports a 'switch' statement where control can proceed from a branch to the next one. Such \"fall-through\" often indicates an error, for example, a missing 'break' or 'return'.",
                  "markdown": "Reports a `switch` statement where control can proceed from a branch to the next one. Such \"fall-through\" often indicates an error, for example, a missing `break` or `return`."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 55,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CallerJS",
                "shortDescription": {
                  "text": "Use of 'caller' property"
                },
                "fullDescription": {
                  "text": "Reports a usage of the 'caller' property in a JavaScript function. Using this property to access the stack frame of the calling method can be extremely confusing and result in subtle bugs.",
                  "markdown": "Reports a usage of the `caller` property in a JavaScript function. Using this property to access the stack frame of the calling method can be extremely confusing and result in subtle bugs."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 36,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSSwitchVariableDeclarationIssue",
                "shortDescription": {
                  "text": "Variable is declared and being used in different 'case' clauses"
                },
                "fullDescription": {
                  "text": "Reports a variable that is declared in one 'case' clause of a 'switch' statement but is used in another 'case' clause of the same statement. For block-scoped variables, this results in throwing a 'ReferenceError'. For 'var' variables, it indicates a potential error. Disable the inspection for 'var' variables if this pattern is used intentionally.",
                  "markdown": "Reports a variable that is declared in one `case` clause of a `switch` statement but is used in another `case` clause of the same statement. For block-scoped variables, this results in throwing a `ReferenceError`. For `var` variables, it indicates a potential error.\n\nDisable the inspection for `var` variables if this pattern is used intentionally."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 55,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReuseOfLocalVariableJS",
                "shortDescription": {
                  "text": "Reuse of local variable"
                },
                "fullDescription": {
                  "text": "Reports reusing a local variable and overwriting its value with a new value that is not related to the original variable usage. Reusing a local variable in this way may be confusing because the intended semantics of the local variable may vary with each usage. It may also cause bugs, if code changes result in values that were expected to be overwritten while they are actually live. It is good practices to keep variable lifetimes as short as possible, and not reuse local variables for the sake of brevity.",
                  "markdown": "Reports reusing a local variable and overwriting its value with a new value that is not related to the original variable usage. Reusing a local variable in this way may be confusing because the intended semantics of the local variable may vary with each usage. It may also cause bugs, if code changes result in values that were expected to be overwritten while they are actually live. It is good practices to keep variable lifetimes as short as possible, and not reuse local variables for the sake of brevity."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Data flow",
                      "index": 57,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ConvertLetToConst",
                "shortDescription": {
                  "text": "'let' is used instead of 'const'"
                },
                "fullDescription": {
                  "text": "Reports a 'let' declaration that can be made 'const'.",
                  "markdown": "Reports a `let` declaration that can be made `const`.  "
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 30,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6CheckImport",
                "shortDescription": {
                  "text": "Unresolved imported name"
                },
                "fullDescription": {
                  "text": "Reports an unresolved name or binding in an 'import' declaration. TypeScript code is ignored.",
                  "markdown": "Reports an unresolved name or binding in an `import` declaration.\n\nTypeScript code is ignored."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Imports and dependencies",
                      "index": 60,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSReferencingMutableVariableFromClosure",
                "shortDescription": {
                  "text": "Referencing mutable variable from closure"
                },
                "fullDescription": {
                  "text": "Reports access to outer mutable variables from functions. Example: 'for (var i = 1; i <= 3; i++) {\n    setTimeout(function() {\n        console.log(i); // bad\n    }, 0);\n  }'",
                  "markdown": "Reports access to outer mutable variables from functions.\n\nExample:\n\n\n      for (var i = 1; i <= 3; i++) {\n        setTimeout(function() {\n            console.log(i); // bad\n        }, 0);\n      }\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ConvertRequireIntoImport",
                "shortDescription": {
                  "text": "'require()' is used instead of 'import'"
                },
                "fullDescription": {
                  "text": "Reports a 'require()' statement. Suggests converting it to a 'require()' call with an 'import' statement. Enable 'Convert require() inside inner scopes with Fix all action' to convert all 'require()' calls inside the nested functions and statements when using the 'Fix all' action. Please note that converting 'require()' statements inside inner scopes to 'import' statements may cause changes in the semantics of the code. Import statements are static module dependencies and are hoisted, which means that they are moved to the top of the current module. 'require()' calls load modules dynamically. They can be executed conditionally, and their scope is defined by the expression in which they are used. Clear the 'Convert require() inside inner scopes with Fix all action' checkbox to prevent any changes in these complex cases when using the 'Fix all' action.",
                  "markdown": "Reports a `require()` statement. Suggests converting it to a `require()` call with an `import` statement.   \n\nEnable 'Convert require() inside inner scopes with Fix all action' to convert all `require()` calls inside the nested functions and statements when using the 'Fix all' action.   \n\nPlease note that converting `require()` statements inside inner scopes to `import` statements may cause changes in the semantics of the code. Import statements are static module dependencies and are hoisted, which means that they are moved to the top of the current module. `require()` calls load modules dynamically. They can be executed conditionally, and their scope is defined by the expression in which they are used.   \nClear the 'Convert require() inside inner scopes with Fix all action' checkbox to prevent any changes in these complex cases when using the 'Fix all' action."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 30,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnusedGlobalSymbols",
                "shortDescription": {
                  "text": "Unused global symbol"
                },
                "fullDescription": {
                  "text": "Reports an unused globally accessible public function, variable, class, or property.",
                  "markdown": "Reports an unused globally accessible public function, variable, class, or property."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Unused symbols",
                      "index": 63,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NestedConditionalExpressionJS",
                "shortDescription": {
                  "text": "Nested conditional expression"
                },
                "fullDescription": {
                  "text": "Reports a ternary conditional expression within another ternary condition. Such nested conditionals may be extremely confusing, and best replaced by more explicit conditional logic.",
                  "markdown": "Reports a ternary conditional expression within another ternary condition. Such nested conditionals may be extremely confusing, and best replaced by more explicit conditional logic."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 36,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6PossiblyAsyncFunction",
                "shortDescription": {
                  "text": "'await' in non-async function"
                },
                "fullDescription": {
                  "text": "Reports a usage of 'await' in a function that was possibly intended to be async but is actually missing the 'async' modifier. Although 'await' can be used as an identifier, it is likely that it was intended to be used as an operator, so the containing function should be made 'async'.",
                  "markdown": "Reports a usage of `await` in a function that was possibly intended to be async but is actually missing the `async` modifier. Although `await` can be used as an identifier, it is likely that it was intended to be used as an operator, so the containing function should be made `async`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Async code and promises",
                      "index": 52,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FlowJSFlagCommentPlacement",
                "shortDescription": {
                  "text": "Misplaced @flow flag"
                },
                "fullDescription": {
                  "text": "Reports a '@flow' flag comment that is not located at the top of a file.",
                  "markdown": "Reports a `@flow` flag comment that is not located at the top of a file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Flow type checker",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSMissingSwitchDefault",
                "shortDescription": {
                  "text": "'switch' statement has no 'default' branch"
                },
                "fullDescription": {
                  "text": "Reports a 'switch' statement without a 'default' clause when some possible values are not enumerated.",
                  "markdown": "Reports a `switch` statement without a `default` clause when some possible values are not enumerated."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 55,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSXNamespaceValidation",
                "shortDescription": {
                  "text": "Missing JSX namespace"
                },
                "fullDescription": {
                  "text": "Reports a usage of a JSX construction without importing namespace. Having the namespace in the file scope ensures proper code compilation.",
                  "markdown": "Reports a usage of a JSX construction without importing namespace. Having the namespace in the file scope ensures proper code compilation."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Imports and dependencies",
                      "index": 60,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReservedWordUsedAsNameJS",
                "shortDescription": {
                  "text": "Reserved word used as name"
                },
                "fullDescription": {
                  "text": "Reports a JavaScript reserved word used as a name. The JavaScript specification reserves a number of words which are currently not used as keywords. Using those words as identifiers may result in broken code if later versions of JavaScript start using them as keywords.",
                  "markdown": "Reports a JavaScript reserved word used as a name. The JavaScript specification reserves a number of words which are currently not used as keywords. Using those words as identifiers may result in broken code if later versions of JavaScript start using them as keywords."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Validity issues",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IncrementDecrementResultUsedJS",
                "shortDescription": {
                  "text": "Result of increment or decrement used"
                },
                "fullDescription": {
                  "text": "Reports an increment ('++') or decrement ('--') expression where the result of the assignment is used in a containing expression. Such assignments can result in confusion due to the order of operations, as evaluation of the assignment may affect the outer expression in unexpected ways. Example: 'var a = b++'",
                  "markdown": "Reports an increment (`++`) or decrement (`--`) expression where the result of the assignment is used in a containing expression. Such assignments can result in confusion due to the order of operations, as evaluation of the assignment may affect the outer expression in unexpected ways. Example: `var a = b++`"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 36,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuspiciousTypeOfGuard",
                "shortDescription": {
                  "text": "Unsound type guard check"
                },
                "fullDescription": {
                  "text": "Reports a 'typeof' or 'instanceof' unsound type guard check. The 'typeof x' type guard can be unsound in one of the following two cases: 'typeof x' never corresponds to the specified value (for example, 'typeof x === 'number'' when 'x' is of the type 'string | boolean') 'typeof x' always corresponds to the specified value (for example, 'typeof x === 'string'' when 'x' is of the type 'string') The 'x instanceof A' type guard can be unsound in one of the following two cases: The type of 'x' is not related to 'A' The type of 'x' is 'A' or a subtype of 'A'",
                  "markdown": "Reports a `typeof` or `instanceof` unsound type guard check. The `typeof x` type guard can be unsound in one of the following two cases:\n\n* `typeof x` never corresponds to the specified value (for example, `typeof x === 'number'` when `x` is of the type 'string \\| boolean')\n* `typeof x` always corresponds to the specified value (for example, `typeof x === 'string'` when `x` is of the type 'string')\n\n<br />\n\nThe `x instanceof A` type guard can be unsound in one of the following two cases:\n\n* The type of `x` is not related to `A`\n* The type of `x` is `A` or a subtype of `A`"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 37,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LoopStatementThatDoesntLoopJS",
                "shortDescription": {
                  "text": "Loop statement that doesn't loop"
                },
                "fullDescription": {
                  "text": "Reports a 'for', 'while', or 'do' statement whose bodies are guaranteed to execute at most once. Normally, this indicates an error.",
                  "markdown": "Reports a `for`, `while`, or `do` statement whose bodies are guaranteed to execute at most once. Normally, this indicates an error."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 37,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSNonASCIINames",
                "shortDescription": {
                  "text": "Identifiers with non-ASCII symbols"
                },
                "fullDescription": {
                  "text": "Reports a non-ASCII symbol in a name. If the 'Allow only ASCII names' option is selected, reports all names that contain non-ASCII symbols. Otherwise reports all names that contain both ASCII and non-ASCII symbols.",
                  "markdown": "Reports a non-ASCII symbol in a name.  \n\nIf the 'Allow only ASCII names' option is selected, reports all names that contain non-ASCII symbols.  \nOtherwise reports all names that contain both ASCII and non-ASCII symbols."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Naming conventions",
                      "index": 53,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6MissingAwait",
                "shortDescription": {
                  "text": "Missing await for an async function call"
                },
                "fullDescription": {
                  "text": "Reports an 'async' function call without an expected 'await' prefix inside an 'async' function. Such call returns a 'Promise' and control flow is continued immediately. Example: 'async function bar() { /* ... */ }\nasync function foo() {\n    bar(); // bad\n}' After the quick-fix is applied, the 'await' prefix is added: 'async function bar() { /* ... */ }\nasync function foo() {\n    await bar(); // good\n}' When the 'Report for promises in return statements' checkbox is selected, also suggests adding 'await' in return statements. While this is generally not necessary, it gives two main benefits. You won't forget to add 'await' when surrounding your code with 'try-catch'. An explicit 'await' helps V8 runtime to provide async stack traces.",
                  "markdown": "Reports an `async` function call without an expected `await` prefix inside an `async` function. Such call returns a `Promise` and control flow is continued immediately.\n\nExample:\n\n\n    async function bar() { /* ... */ }\n    async function foo() {\n        bar(); // bad\n    }\n\n\nAfter the quick-fix is applied, the `await` prefix is added:\n\n\n    async function bar() { /* ... */ }\n    async function foo() {\n        await bar(); // good\n    }\n\n<br />\n\nWhen the 'Report for promises in return statements' checkbox is selected, also suggests adding `await` in return statements.  \nWhile this is generally not necessary, it gives two main benefits.  \n\n* You won't forget to add `await` when surrounding your code with `try-catch`.\n* An explicit `await` helps V8 runtime to provide [async stack traces](https://bit.ly/v8-zero-cost-async-stack-traces)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Async code and promises",
                      "index": 52,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TailRecursionJS",
                "shortDescription": {
                  "text": "Tail recursion"
                },
                "fullDescription": {
                  "text": "Reports a tail recursion, that is, when a function calls itself as its last action before returning. A tail recursion can always be replaced by looping, which will be considerably faster. Some JavaScript engines perform this optimization, while others do not. Thus, tail recursive solutions may have considerably different performance characteristics in different environments.",
                  "markdown": "Reports a tail recursion, that is, when a function calls itself as its last action before returning. A tail recursion can always be replaced by looping, which will be considerably faster. Some JavaScript engines perform this optimization, while others do not. Thus, tail recursive solutions may have considerably different performance characteristics in different environments."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 37,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConfusingPlusesOrMinusesJS",
                "shortDescription": {
                  "text": "Confusing sequence of '+' or '-'"
                },
                "fullDescription": {
                  "text": "Reports a suspicious combination of '+' or '-' characters in JavaScript code (for example, 'a+++b'. Such sequences are confusing, and their semantics may change through changes in the whitespace.",
                  "markdown": "Reports a suspicious combination of `+` or `-` characters in JavaScript code (for example, `a+++b`. Such sequences are confusing, and their semantics may change through changes in the whitespace."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 36,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptConfig",
                "shortDescription": {
                  "text": "Inconsistent tsconfig.json properties"
                },
                "fullDescription": {
                  "text": "Reports inconsistency of a 'paths', 'checkJs', or 'extends' property in a tsconfig.json file. The 'checkJs' property requires 'allowJs'. The 'extends' property should be a valid file reference.",
                  "markdown": "Reports inconsistency of a `paths`, `checkJs`, or `extends` property in a tsconfig.json file.   \nThe `checkJs` property requires `allowJs`.   \nThe `extends` property should be a valid file reference."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OverlyComplexBooleanExpressionJS",
                "shortDescription": {
                  "text": "Overly complex boolean expression"
                },
                "fullDescription": {
                  "text": "Reports a boolean expression with too many terms. Such expressions may be confusing and bug-prone. Use the field below to specify the maximum number of terms allowed in an arithmetic expression.",
                  "markdown": "Reports a boolean expression with too many terms. Such expressions may be confusing and bug-prone.\n\n\nUse the field below to specify the maximum number of terms allowed in an arithmetic expression."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 36,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OverlyComplexArithmeticExpressionJS",
                "shortDescription": {
                  "text": "Overly complex arithmetic expression"
                },
                "fullDescription": {
                  "text": "Reports an arithmetic expression with too many terms. Such expressions may be confusing and bug-prone. Use the field below to specify the maximum number of terms allowed in an arithmetic expression.",
                  "markdown": "Reports an arithmetic expression with too many terms. Such expressions may be confusing and bug-prone.\n\n\nUse the field below to specify the maximum number of terms allowed in an arithmetic expression."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 36,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DuplicateConditionJS",
                "shortDescription": {
                  "text": "Duplicate condition in 'if' statement"
                },
                "fullDescription": {
                  "text": "Reports duplicate conditions in different branches of an 'if' statement. Duplicate conditions usually represent programmer oversight. Example: 'if (a) {\n    ...\n  } else if (a) {\n    ...\n  }'",
                  "markdown": "Reports duplicate conditions in different branches of an `if` statement. Duplicate conditions usually represent programmer oversight.\n\nExample:\n\n\n      if (a) {\n        ...\n      } else if (a) {\n        ...\n      }\n\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 37,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryLabelJS",
                "shortDescription": {
                  "text": "Unnecessary label"
                },
                "fullDescription": {
                  "text": "Reports an unused label.",
                  "markdown": "Reports an unused label."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 37,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptUnresolvedFunction",
                "shortDescription": {
                  "text": "Unresolved TypeScript function"
                },
                "fullDescription": {
                  "text": "Reports a call of a function that is not resolved.",
                  "markdown": "Reports a call of a function that is not resolved."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6UnusedImports",
                "shortDescription": {
                  "text": "Unused import"
                },
                "fullDescription": {
                  "text": "Reports a redundant 'import' statement. This is usually the case if the imported symbols are not used in the source file. To avoid side-effects, consider using bare import 'import 'packageName'' instead of the regular one.",
                  "markdown": "Reports a redundant `import` statement. This is usually the case if the imported symbols are not used in the source file. To avoid side-effects, consider using bare import `import 'packageName'` instead of the regular one."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Imports and dependencies",
                      "index": 60,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InnerHTMLJS",
                "shortDescription": {
                  "text": "Use of 'innerHTML' property"
                },
                "fullDescription": {
                  "text": "Reports a JavaScript access to DOM nodes as text using the 'innerHTML' property. Most usages of 'innerHTML' are performed better with explicit DOM calls, such as 'getElementByID()' and 'createElement()'. Additionally, 'innerHTML' will not work with XML DOMs, including DOMs for XHTML if viewed as XML. This can lead to difficulties in diagnosing bugs.",
                  "markdown": "Reports a JavaScript access to DOM nodes as text using the `innerHTML` property. Most usages of `innerHTML` are performed better with explicit DOM calls, such as `getElementByID()` and `createElement()`. Additionally, `innerHTML` will not work with XML DOMs, including DOMs for XHTML if viewed as XML. This can lead to difficulties in diagnosing bugs."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/DOM issues",
                      "index": 31,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSAssignmentUsedAsCondition",
                "shortDescription": {
                  "text": "Assignment used as condition"
                },
                "fullDescription": {
                  "text": "Reports an assignment that is used as the condition of an 'if', 'while', 'for', or 'do' statement. Although occasionally intended, this usage is confusing, and often indicates a typo (for example, '=' instead of '==').",
                  "markdown": "Reports an assignment that is used as the condition of an `if`, `while`, `for`, or `do` statement. Although occasionally intended, this usage is confusing, and often indicates a typo (for example, `=` instead of `==`)."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Assignment issues",
                      "index": 54,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ForLoopReplaceableByWhileJS",
                "shortDescription": {
                  "text": "'for' loop may be replaced by 'while' loop"
                },
                "fullDescription": {
                  "text": "Reports a 'for' loop that contains neither initialization nor an update component. Suggests replacing the loop with a simpler 'while' statement. Example: 'for(; exitCondition(); ) {\n    process();\n  }' After the quick-fix is applied the result looks like: 'while(exitCondition()) {\n    process();\n  }' Use the checkbox below if you wish this inspection to ignore for loops with trivial or non-existent conditions.",
                  "markdown": "Reports a `for` loop that contains neither initialization nor an update component. Suggests replacing the loop with a simpler `while` statement.\n\nExample:\n\n\n      for(; exitCondition(); ) {\n        process();\n      }\n\nAfter the quick-fix is applied the result looks like:\n\n\n      while(exitCondition()) {\n        process();\n      }\n\nUse the checkbox below if you wish this inspection to ignore **for** loops with trivial or non-existent conditions."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 37,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConstantConditionalExpressionJS",
                "shortDescription": {
                  "text": "Constant conditional expression"
                },
                "fullDescription": {
                  "text": "Reports a conditional expression in the format 'true? result1: result2' or 'false? result1: result2. Suggests simplifying the expression.'",
                  "markdown": "Reports a conditional expression in the format `true? result1: result2` or `false? result1: result2``.\nSuggests simplifying the expression.\n`"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 37,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptUnresolvedVariable",
                "shortDescription": {
                  "text": "Unresolved TypeScript variable"
                },
                "fullDescription": {
                  "text": "Reports an unresolved reference to a variable or field.",
                  "markdown": "Reports an unresolved reference to a variable or field."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSValidateJSDoc",
                "shortDescription": {
                  "text": "Syntax errors and unresolved references in JSDoc"
                },
                "fullDescription": {
                  "text": "Reports a syntax discrepancy in a documentation comment.",
                  "markdown": "Reports a syntax discrepancy in a documentation comment."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonBlockStatementBodyJS",
                "shortDescription": {
                  "text": "Statement body without braces"
                },
                "fullDescription": {
                  "text": "Reports a 'if', 'while', 'for', or 'with' statements whose body is not a block statement. Using code block in statement bodies is usually safer for downstream maintenance.",
                  "markdown": "Reports a `if`, `while`, `for`, or `with` statements whose body is not a block statement. Using code block in statement bodies is usually safer for downstream maintenance."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 42,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FlowJSConfig",
                "shortDescription": {
                  "text": "Missing .flowconfig"
                },
                "fullDescription": {
                  "text": "Reports a JavaScript file with a '@flow' flag that doesn't have an associated '.flowconfig' file in the project.",
                  "markdown": "Reports a JavaScript file with a `@flow` flag that doesn't have an associated `.flowconfig` file in the project."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Flow type checker",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptValidateTypes",
                "shortDescription": {
                  "text": "Type mismatch"
                },
                "fullDescription": {
                  "text": "Reports a parameter, return value, or assigned expression of incorrect type.",
                  "markdown": "Reports a parameter, return value, or assigned expression of incorrect type."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSObjectNullOrUndefined",
                "shortDescription": {
                  "text": "Object is 'null' or 'undefined'"
                },
                "fullDescription": {
                  "text": "Reports an error caused by invoking a method, accessing a property, or calling a function on an object that is 'undefined' or 'null'.",
                  "markdown": "Reports an error caused by invoking a method, accessing a property, or calling a function on an object that is `undefined` or `null`."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 37,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PointlessArithmeticExpressionJS",
                "shortDescription": {
                  "text": "Pointless arithmetic expression"
                },
                "fullDescription": {
                  "text": "Reports an arithmetic expression that include adding or subtracting zero, multiplying by zero or one, division by one, and shift by zero. Such expressions may result from not fully completed automated refactoring.",
                  "markdown": "Reports an arithmetic expression that include adding or subtracting zero, multiplying by zero or one, division by one, and shift by zero. Such expressions may result from not fully completed automated refactoring."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 36,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptSmartCast",
                "shortDescription": {
                  "text": "Narrowed type"
                },
                "fullDescription": {
                  "text": "Reports a usage of a variable where the variable type is narrowed by a type guard. Note that severity level doesn't affect this inspection.",
                  "markdown": "Reports a usage of a variable where the variable type is narrowed by a type guard. Note that severity level doesn't affect this inspection."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSAccessibilityCheck",
                "shortDescription": {
                  "text": "Inaccessible @private and @protected members referenced"
                },
                "fullDescription": {
                  "text": "Reports a reference to a JavaScript member that is marked with a '@private' or '@protected' tag but does not comply with visibility rules that these tags imply.",
                  "markdown": "Reports a reference to a JavaScript member that is marked with a `@private` or `@protected` tag but does not comply with visibility rules that these tags imply."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FunctionWithMultipleLoopsJS",
                "shortDescription": {
                  "text": "Function with multiple loops"
                },
                "fullDescription": {
                  "text": "Reports a function with multiple loop statements.",
                  "markdown": "Reports a function with multiple loop statements."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Function metrics",
                      "index": 40,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NpmUsedModulesInstalled",
                "shortDescription": {
                  "text": "Missing module dependency"
                },
                "fullDescription": {
                  "text": "Reports a module from a 'require()' call or an 'import' statement that is not installed or is not listed in package.json dependencies. Suggests installing the module and/or including it into package.json. For 'require()' calls, works only in the files from the scope of Node.js Core JavaScript library.",
                  "markdown": "Reports a module from a `require()` call or an `import` statement that is not installed or is not listed in package.json dependencies.\n\nSuggests installing the module and/or including it into package.json.\n\nFor `require()` calls, works only in the files from the scope of *Node.js Core* JavaScript library."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Imports and dependencies",
                      "index": 60,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FunctionNamingConventionJS",
                "shortDescription": {
                  "text": "Function naming convention"
                },
                "fullDescription": {
                  "text": "Reports a function whose name is too short, too long, or does not follow the specified regular expression pattern. Use the fields provided below to specify minimum length, maximum length, and a regular expression for function names. Use the standard 'java.util.regex' format for regular expressions.",
                  "markdown": "Reports a function whose name is too short, too long, or does not follow the specified regular expression pattern.\n\n\nUse the fields provided below to specify minimum length, maximum length, and a regular expression\nfor function names. Use the standard `java.util.regex` format for regular expressions."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Naming conventions",
                      "index": 53,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ObjectAllocationIgnoredJS",
                "shortDescription": {
                  "text": "Result of object allocation ignored"
                },
                "fullDescription": {
                  "text": "Reports object allocation where the result of the allocated object is ignored, for example, 'new Error();' as a statement, without any assignment. Such allocation expressions may indicate an odd object initialization strategy.",
                  "markdown": "Reports object allocation where the result of the allocated object is ignored, for example, `new Error();` as a statement, without any assignment. Such allocation expressions may indicate an odd object initialization strategy."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 46,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSHint",
                "shortDescription": {
                  "text": "JSHint"
                },
                "fullDescription": {
                  "text": "Reports a problem detected by the JSHint linter.",
                  "markdown": "Reports a problem detected by the [JSHint](https://jshint.com/) linter."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code quality tools",
                      "index": 38,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ExceptionCaughtLocallyJS",
                "shortDescription": {
                  "text": "Exception used for local control-flow"
                },
                "fullDescription": {
                  "text": "Reports a 'throw' statement whose exceptions are always caught by the containing 'try' statement. Using 'throw' statements as a 'goto' to change the local flow of control is confusing.",
                  "markdown": "Reports a `throw` statement whose exceptions are always caught by the containing `try` statement. Using `throw` statements as a `goto` to change the local flow of control is confusing."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 50,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CyclomaticComplexityJS",
                "shortDescription": {
                  "text": "Overly complex function"
                },
                "fullDescription": {
                  "text": "Reports a function with too many branching points in a function (too high cyclomatic complexity). Such functions may be confusing and hard to test. Use the field provided below to specify the maximum acceptable cyclomatic complexity for a function.",
                  "markdown": "Reports a function with too many branching points in a function (too high cyclomatic complexity). Such functions may be confusing and hard to test.\n\n\nUse the field provided below to specify the maximum acceptable cyclomatic complexity for a function."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Function metrics",
                      "index": 40,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Stylelint",
                "shortDescription": {
                  "text": "Stylelint"
                },
                "fullDescription": {
                  "text": "Reports a discrepancy detected by the Stylelint linter. The highlighting is based on the rule severity specified in the Stylelint configuration file for each individual rule.",
                  "markdown": "Reports a discrepancy detected by the [Stylelint](http://stylelint.io) linter.   \n\nThe highlighting is based on the rule severity specified in the [Stylelint configuration file](https://stylelint.io/user-guide/configure) for each individual rule."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Code quality tools",
                      "index": 68,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptJSXUnresolvedComponent",
                "shortDescription": {
                  "text": "Unresolved JSX component"
                },
                "fullDescription": {
                  "text": "Reports an unresolved reference to a JSX component. Suggests adding an import statement if the referenced component is defined in the project or its dependencies or creating a new component with the specified name. The template for a new component can be modified in Editor | File and Code Templates.",
                  "markdown": "Reports an unresolved reference to a JSX component. Suggests adding an import statement if the referenced component is defined in the project or its dependencies or creating a new component with the specified name.\n\nThe template for a new component can be modified in Editor \\| File and Code Templates."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnfilteredForInLoop",
                "shortDescription": {
                  "text": "Unfiltered for..in loop"
                },
                "fullDescription": {
                  "text": "Reports unfiltered 'for-in' loops. The use of this construct results in processing not only own properties of an object but properties from its prototype as well. It may be unexpected in some specific cases, for example, in utility methods that copy or modify all properties or when 'Object''s prototype may be incorrectly modified. For example, the following code will print 42 and myMethod: 'Object.prototype.myMethod = function myMethod() {};\nlet a = { foo: 42 };\nfor (let i in a) {\n  console.log(a[i]);\n}' Suggests replacing the whole loop with a 'Object.keys()' method or adding a 'hasOwnProperty()' check. After applying the quick-fix the code looks as follows: 'for (let i in a) {\n  if (a.hasOwnProperty(i)) {\n    console.log(a[i]);\n  }\n}'",
                  "markdown": "Reports unfiltered `for-in` loops.   \n\nThe use of this construct results in processing not only own properties of an object but properties from its prototype as well. It may be unexpected in some specific cases, for example, in utility methods that copy or modify all properties or when `Object`'s prototype may be incorrectly modified. For example, the following code will print **42** and **myMethod** :   \n\n\n    Object.prototype.myMethod = function myMethod() {};\n    let a = { foo: 42 };\n    for (let i in a) {\n      console.log(a[i]);\n    }\n\nSuggests replacing the whole loop with a `Object.keys()` method or adding a `hasOwnProperty()` check. After applying the quick-fix the code looks as follows:\n\n\n    for (let i in a) {\n      if (a.hasOwnProperty(i)) {\n        console.log(a[i]);\n      }\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSFunctionExpressionToArrowFunction",
                "shortDescription": {
                  "text": "Function expression is used instead of arrow function"
                },
                "fullDescription": {
                  "text": "Reports a function expression. Suggests converting it to an arrow function. Example: 'arr.map(function(el) {return el + 1})' After applying the quick-fix the code looks as follows: 'arr.map(el => el + 1)'",
                  "markdown": "Reports a [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function) expression. Suggests converting it to an [arrow function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions).\n\nExample:\n\n    arr.map(function(el) {return el + 1})\n\nAfter applying the quick-fix the code looks as follows:\n\n    arr.map(el => el + 1)\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 30,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UpdateDependencyToLatestVersion",
                "shortDescription": {
                  "text": "Update package.json dependencies to latest versions"
                },
                "fullDescription": {
                  "text": "Suggests to upgrade your package.json dependencies to the latest versions, ignoring specified versions.",
                  "markdown": "Suggests to upgrade your package.json dependencies to the latest versions, ignoring specified versions."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Imports and dependencies",
                      "index": 60,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AssignmentResultUsedJS",
                "shortDescription": {
                  "text": "Result of assignment used"
                },
                "fullDescription": {
                  "text": "Reports an assignment expression where the result of the assignment is used in the containing expression. Such assignments often indicate coding errors, for example, '=' instead of '=='. Moreover, they can result in confusion due to the order of operations, as evaluation of the assignment may affect the outer expression in unexpected ways. Expressions in parentheses are ignored.",
                  "markdown": "Reports an assignment expression where the result of the assignment is used in the containing expression. Such assignments often indicate coding errors, for example, `=` instead of `==`. Moreover, they can result in confusion due to the order of operations, as evaluation of the assignment may affect the outer expression in unexpected ways.\n\nExpressions in parentheses are ignored."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Assignment issues",
                      "index": 54,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConstantOnRHSOfComparisonJS",
                "shortDescription": {
                  "text": "Constant on right side of comparison"
                },
                "fullDescription": {
                  "text": "Reports a comparison operation with a constant in the right-hand side. According to coding conventions, constants should only be in the left-hand side of comparisons.",
                  "markdown": "Reports a comparison operation with a constant in the right-hand side. According to coding conventions, constants should only be in the left-hand side of comparisons."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 42,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnnecessarySemicolon",
                "shortDescription": {
                  "text": "Unnecessary semicolon"
                },
                "fullDescription": {
                  "text": "Reports an unneeded semicolon.",
                  "markdown": "Reports an unneeded semicolon."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSSuspiciousEqPlus",
                "shortDescription": {
                  "text": "Suspicious '=+' assignment"
                },
                "fullDescription": {
                  "text": "Reports an assignment in the form 'a =+ b'. Suggests replacing with 'a += b'.",
                  "markdown": "Reports an assignment in the form `a =+ b`. Suggests replacing with `a += b`."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 46,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnusedAssignment",
                "shortDescription": {
                  "text": "Unused assignment"
                },
                "fullDescription": {
                  "text": "Reports a variable whose value is never used after assignment. Suggests removing the unused variable to shorten the code and to avoid redundant allocations. The following cases are reported: A variable is never read after assignment. The value of a variable is always overwritten with another assignment before the variable is read next time. The initializer of a variable is redundant (for one of the above-mentioned reasons).",
                  "markdown": "Reports a variable whose value is never used after assignment.  \nSuggests removing the unused variable to shorten the code and to avoid redundant allocations.\n\nThe following cases are reported:\n\n* A variable is never read after assignment.\n* The value of a variable is always overwritten with another assignment before the variable is read next time.\n* The initializer of a variable is redundant (for one of the above-mentioned reasons)."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Unused symbols",
                      "index": 63,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConfusingFloatingPointLiteralJS",
                "shortDescription": {
                  "text": "Confusing floating point literal"
                },
                "fullDescription": {
                  "text": "Reports any floating point number that does not have a decimal point, or any numbers before the decimal point, or and numbers after the decimal point. Such literals may be confusing, and violate several coding standards.",
                  "markdown": "Reports any floating point number that does not have a decimal point, or any numbers before the decimal point, or and numbers after the decimal point. Such literals may be confusing, and violate several coding standards."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 36,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ContinueOrBreakFromFinallyBlockJS",
                "shortDescription": {
                  "text": "'continue' or 'break' inside 'finally' block"
                },
                "fullDescription": {
                  "text": "Reports a 'break' or 'continue' statement inside a 'finally' block. Such statements are very confusing, may hide exceptions, and complicate debugging.",
                  "markdown": "Reports a `break` or `continue` statement inside a `finally` block. Such statements are very confusing, may hide exceptions, and complicate debugging."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 50,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSMethodCanBeStatic",
                "shortDescription": {
                  "text": "Method can be made 'static'"
                },
                "fullDescription": {
                  "text": "Reports a class method that can be safely made 'static'. A method can be 'static' if it does not reference any of its class' non-static methods and non-static fields and is not overridden in a subclass. Use the first checkbox below to inspect only 'private' methods.",
                  "markdown": "Reports a class method that can be safely made `static`. A method can be `static` if it does not reference any of its class' non-static methods and non-static fields and is not overridden in a subclass.\n\n\nUse the first checkbox below to inspect only `private` methods."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUndeclaredVariable",
                "shortDescription": {
                  "text": "Implicitly declared global JavaScript variable"
                },
                "fullDescription": {
                  "text": "Reports an implicit declaration of a global variable. Example: 'var aaa = 1; // good\n  bbb = 2; // bad, if bbb is not declared with 'var' somewhere'",
                  "markdown": "Reports an implicit declaration of a global variable.\n\nExample:\n\n\n      var aaa = 1; // good\n      bbb = 2; // bad, if bbb is not declared with 'var' somewhere\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SillyAssignmentJS",
                "shortDescription": {
                  "text": "Variable is assigned to itself"
                },
                "fullDescription": {
                  "text": "Reports an assignment in the form 'x = x'.",
                  "markdown": "Reports an assignment in the form `x = x`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Assignment issues",
                      "index": 54,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptCheckImport",
                "shortDescription": {
                  "text": "Unresolved imported name"
                },
                "fullDescription": {
                  "text": "Reports an unresolved name or binding in an 'import' declaration in TypeScript code.",
                  "markdown": "Reports an unresolved name or binding in an `import` declaration in TypeScript code."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InfiniteRecursionJS",
                "shortDescription": {
                  "text": "Infinite recursion"
                },
                "fullDescription": {
                  "text": "Reports a function which must either recurse infinitely or throw an exception. Such functions may not return normally.",
                  "markdown": "Reports a function which must either recurse infinitely or throw an exception. Such functions may not return normally."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 46,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSMismatchedCollectionQueryUpdate",
                "shortDescription": {
                  "text": "Mismatched query and update of collection"
                },
                "fullDescription": {
                  "text": "Reports a collection of fields or variables whose contents are either queried and not updated or updated and not queried. Such mismatched queries and updates are pointless and may indicate either dead code or a typographical error. Query methods are automatically detected, based on whether they return something, or a callback is passed to them. Use the table below to specify which methods are update methods.",
                  "markdown": "Reports a collection of fields or variables whose contents are either queried and not updated or updated and not queried. Such mismatched queries and updates are pointless and may indicate either dead code or a typographical error.\n\n\nQuery methods are automatically detected, based on whether they return something, or a callback is passed to them.\nUse the table below to specify which methods are update methods."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6PreferShortImport",
                "shortDescription": {
                  "text": "Import can be shortened"
                },
                "fullDescription": {
                  "text": "Reports an ES6 import whose 'from' part can be shortened. Suggests importing the parent directory.",
                  "markdown": "Reports an ES6 import whose `from` part can be shortened. Suggests importing the parent directory."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PointlessBitwiseExpressionJS",
                "shortDescription": {
                  "text": "Bitwise expression can be simplified"
                },
                "fullDescription": {
                  "text": "Reports an expression that includes 'and' with zero, 'or' by zero, or shifting by zero. Such expressions may result from not fully completed automated refactorings.",
                  "markdown": "Reports an expression that includes `and` with zero, `or` by zero, or shifting by zero. Such expressions may result from not fully completed automated refactorings."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Bitwise operation issues",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSStringConcatenationToES6Template",
                "shortDescription": {
                  "text": "String concatenation is used instead of template literal"
                },
                "fullDescription": {
                  "text": "Reports a string concatenation. Suggests replacing it with a template literal Example '\"result: \" + a + \".\"' After applying the quick-fix the code looks as follows: '`result: ${a}.`'",
                  "markdown": "Reports a string concatenation. Suggests replacing it with a [template literal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals)\n\nExample\n\n     \"result: \" + a + \".\" \n\nAfter applying the quick-fix the code looks as follows:\n\n     `result: ${a}.` \n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 30,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceAssignmentWithOperatorAssignmentJS",
                "shortDescription": {
                  "text": "Assignment could be replaced with operator assignment"
                },
                "fullDescription": {
                  "text": "Reports an assignment operation that can be replaced by an operator assignment to make your code shorter and probably clearer. Example: 'x = x + 3;'\n  'x = x / 3;'\n After the quick fix is applied the result looks like:   'x += 3;'\n  'x /= 3;'",
                  "markdown": "Reports an assignment operation that can be replaced by an operator assignment to make your code shorter and probably clearer.\n\n\nExample:\n\n      x = x + 3;\n      x = x / 3;\n\nAfter the quick fix is applied the result looks like:\n\n      x += 3;\n      x /= 3;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Assignment issues",
                      "index": 54,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6DestructuringVariablesMerge",
                "shortDescription": {
                  "text": "Destructuring properties with the same key"
                },
                "fullDescription": {
                  "text": "Reports multiple destructuring properties with identical keys. Suggests merging the properties.",
                  "markdown": "Reports multiple destructuring properties with identical keys. Suggests merging the properties."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptRedundantGenericType",
                "shortDescription": {
                  "text": "Redundant type arguments"
                },
                "fullDescription": {
                  "text": "Reports a type argument that is equal to the default one and can be removed. Example: type Foo<T=number> = T;\nlet z: Foo<number>;",
                  "markdown": "Reports a type argument that is equal to the default one and can be removed.\n\n\nExample:\n\n```\ntype Foo<T=number> = T;\nlet z: Foo<number>;\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSLastCommaInObjectLiteral",
                "shortDescription": {
                  "text": "Unneeded last comma in object literal"
                },
                "fullDescription": {
                  "text": "Reports usages of a trailing comma in object literals. The warning is reported only when the JavaScript language version is set to ECMAScript 5.1. Trailing commas in object literals are allowed by the specification, however, some browsers might throw an error when a trailing comma is used. You can configure formatting options for trailing commas in Code Style | JavaScript or TypeScript | Punctuation.",
                  "markdown": "Reports usages of a trailing comma in object literals.\n\nThe warning is reported only when the JavaScript language version is set to ECMAScript 5.1.\n\nTrailing commas in object literals are allowed by the specification, however, some browsers might throw an error when a trailing comma is used.\n\nYou can configure formatting options for trailing commas in **Code Style** \\| **JavaScript** or **TypeScript** \\| **Punctuation**."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NestedAssignmentJS",
                "shortDescription": {
                  "text": "Nested assignment"
                },
                "fullDescription": {
                  "text": "Reports an assignment expression nested inside another expression, for example, 'a = b = 1'. Such expressions may be confusing and violate the general design principle that a given construct should do precisely one thing.",
                  "markdown": "Reports an assignment expression nested inside another expression, for example, `a = b = 1`. Such expressions may be confusing and violate the general design principle that a given construct should do precisely one thing."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Assignment issues",
                      "index": 54,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DefaultNotLastCaseInSwitchJS",
                "shortDescription": {
                  "text": "'default' not last case in 'switch'"
                },
                "fullDescription": {
                  "text": "Reports a 'switch' statement where the 'default' case comes before another case instead of being the very last case, which may cause confusion.",
                  "markdown": "Reports a `switch` statement where the `default` case comes before another case instead of being the very last case, which may cause confusion."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 55,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyFinallyBlockJS",
                "shortDescription": {
                  "text": "Empty 'finally' block"
                },
                "fullDescription": {
                  "text": "Reports an empty 'finally' block, which usually indicates an error.",
                  "markdown": "Reports an empty `finally` block, which usually indicates an error."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 50,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ForLoopThatDoesntUseLoopVariableJS",
                "shortDescription": {
                  "text": "'for' loop where update or condition does not use loop variable"
                },
                "fullDescription": {
                  "text": "Reports a 'for' loop where the condition or update does not use the 'for' loop variable.",
                  "markdown": "Reports a `for` loop where the condition or update does not use the `for` loop variable."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 46,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptAbstractClassConstructorCanBeMadeProtected",
                "shortDescription": {
                  "text": "Abstract class constructor can be made protected"
                },
                "fullDescription": {
                  "text": "Reports a public constructor of an abstract class and suggests making it protected (because it is useless to have it public).",
                  "markdown": "Reports a public constructor of an abstract class and suggests making it protected (because it is useless to have it public)."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ThreeNegationsPerFunctionJS",
                "shortDescription": {
                  "text": "Function with more than three negations"
                },
                "fullDescription": {
                  "text": "Reports a function with three or more negation operations ('!' or '!='). Such functions may be unnecessarily confusing.",
                  "markdown": "Reports a function with three or more negation operations (`!` or `!=`). Such functions may be unnecessarily confusing."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Function metrics",
                      "index": 40,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TrivialIfJS",
                "shortDescription": {
                  "text": "Redundant 'if' statement"
                },
                "fullDescription": {
                  "text": "Reports an 'if' statement that can be simplified to a single assignment or a 'return' statement. Example: 'if(foo())\n {\n  return true;\n }\n else\n {\n   return false;\n }' After applying the quick-fix the code looks as follows:  'return foo();'",
                  "markdown": "Reports an `if` statement that can be simplified to a single assignment or a `return` statement.\n\nExample:\n\n\n    if(foo())\n     {\n      return true;\n     }\n     else\n     {\n       return false;\n     }\n\nAfter applying the quick-fix the code looks as follows:\n\n     return foo();\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 37,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnterminatedStatementJS",
                "shortDescription": {
                  "text": "Unterminated statement"
                },
                "fullDescription": {
                  "text": "Reports a statement without a semicolon or a newline at the end. Select the 'Terminate statements with semicolons' option in Editor | Code Style | JavaScript or TypeScript - Punctuation to report any statement that doesn't end with a semicolon, even if a newline is used. According to some coding styles, semicolons are preferred to line-breaks for consistency with the other languages.",
                  "markdown": "Reports a statement without a semicolon or a newline at the end.\n\nSelect the 'Terminate statements with semicolons' option in *Editor \\| Code Style \\| JavaScript or TypeScript - Punctuation* to report any statement that doesn't end with a semicolon, even if a newline is used.\nAccording to some coding styles, semicolons are preferred to line-breaks for consistency with the other languages."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 42,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnreachableSwitchBranches",
                "shortDescription": {
                  "text": "Unreachable 'case' branch of a 'switch' statement"
                },
                "fullDescription": {
                  "text": "Reports an unreachable 'case' branch of a 'switch' statement. Example: '/**\n * @param {('foo' | 'bar')} p\n */\nfunction foo(p) {\n    switch (p) {\n        case 'foo': break;\n        case 'bar': break;\n        case 'baz': break; // unreachable\n    }\n}'",
                  "markdown": "Reports an unreachable `case` branch of a `switch` statement.\n\nExample:\n\n\n    /**\n     * @param {('foo' | 'bar')} p\n     */\n    function foo(p) {\n        switch (p) {\n            case 'foo': break;\n            case 'bar': break;\n            case 'baz': break; // unreachable\n        }\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 55,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TrivialConditionalJS",
                "shortDescription": {
                  "text": "Redundant conditional expression"
                },
                "fullDescription": {
                  "text": "Reports a conditional expression of the form 'condition ? true : false\ncondition ? false : true' These expressions may be safely converted to 'condition\n!condition'",
                  "markdown": "Reports a conditional expression of the form\n\n\n    condition ? true : false\n    condition ? false : true\n\n\nThese expressions may be safely converted to\n\n\n    condition\n    !condition\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 37,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSTestFailedLine",
                "shortDescription": {
                  "text": "Highlight failure line in test code"
                },
                "fullDescription": {
                  "text": "Reports a failed method call or an assertion in a test.",
                  "markdown": "Reports a failed method call or an assertion in a test."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Unit testing",
                      "index": 70,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IfStatementWithTooManyBranchesJS",
                "shortDescription": {
                  "text": "'if' statement with too many branches"
                },
                "fullDescription": {
                  "text": "Reports an 'if' statement with too many branches. Such statements may be confusing, and often indicate inadequate levels of design abstraction. Use the field below to specify the maximum number of branches expected.",
                  "markdown": "Reports an `if` statement with too many branches. Such statements may be confusing, and often indicate inadequate levels of design abstraction.\n\n\nUse the field below to specify the maximum number of branches expected."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 37,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BreakStatementJS",
                "shortDescription": {
                  "text": "'break' statement"
                },
                "fullDescription": {
                  "text": "Reports a 'break' statements. Ignores 'break' statements that end case blocks.",
                  "markdown": "Reports a `break` statements. Ignores `break` statements that end case blocks."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DebuggerStatementJS",
                "shortDescription": {
                  "text": "'debugger' statement"
                },
                "fullDescription": {
                  "text": "Reports a 'debugger' statement used for interaction with the Javascript debuggers. Such statements should not appear in production code.",
                  "markdown": "Reports a `debugger` statement used for interaction with the Javascript debuggers. Such statements should not appear in production code."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AssignmentToForLoopParameterJS",
                "shortDescription": {
                  "text": "Assignment to 'for' loop parameter"
                },
                "fullDescription": {
                  "text": "Reports an assignment to a variable declared as a 'for' loop parameter. Although occasionally intended, this construct can be extremely confusing, and is often a result of an error.",
                  "markdown": "Reports an assignment to a variable declared as a `for` loop parameter. Although occasionally intended, this construct can be extremely confusing, and is often a result of an error."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Assignment issues",
                      "index": 54,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConditionalExpressionJS",
                "shortDescription": {
                  "text": "Conditional expression"
                },
                "fullDescription": {
                  "text": "Reports a ternary conditional expression. Some coding standards prohibit such expressions in favor of explicit 'if' statements.",
                  "markdown": "Reports a ternary conditional expression. Some coding standards prohibit such expressions in favor of explicit `if` statements."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PointlessBooleanExpressionJS",
                "shortDescription": {
                  "text": "Pointless statement or boolean expression"
                },
                "fullDescription": {
                  "text": "Reports a pointless or pointlessly complicated boolean expression or statement. Example: 'let a = !(false && x);\n  let b = false || x;' After the quick fix is applied the result looks like: 'let a = true;\n  let b = x;'",
                  "markdown": "Reports a pointless or pointlessly complicated boolean expression or statement.\n\nExample:\n\n\n      let a = !(false && x);\n      let b = false || x;\n\nAfter the quick fix is applied the result looks like:\n\n\n      let a = true;\n      let b = x;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 37,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUrlImportUsage",
                "shortDescription": {
                  "text": "URL import is used"
                },
                "fullDescription": {
                  "text": "Checks used URL imports in the JavaScript language. Suggests downloading the module for the specified remote URL. Such association enables the IDE to provide proper code completion and navigation. URLs in import specifiers are supported only for ECMAScript modules in the JavaScript language.",
                  "markdown": "Checks used URL imports in the JavaScript language. Suggests downloading the module for the specified remote URL. Such association enables the IDE to provide proper code completion and navigation.   \n\nURLs in import specifiers are supported only for ECMAScript modules in the JavaScript language."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Imports and dependencies",
                      "index": 60,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryLabelOnContinueStatementJS",
                "shortDescription": {
                  "text": "Unnecessary label on 'continue' statement"
                },
                "fullDescription": {
                  "text": "Reports a labeled 'continue' statement whose labels may be removed without changing the flow of control.",
                  "markdown": "Reports a labeled `continue` statement whose labels may be removed without changing the flow of control."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 37,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSPotentiallyInvalidTargetOfIndexedPropertyAccess",
                "shortDescription": {
                  "text": "Possibly incorrect target of indexed property access"
                },
                "fullDescription": {
                  "text": "Reports a potentially invalid indexed property access, for example, 'Array[1]'.",
                  "markdown": "Reports a potentially invalid indexed property access, for example, `Array[1]`."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 46,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSTypeOfValues",
                "shortDescription": {
                  "text": "'typeof' comparison with non-standard value"
                },
                "fullDescription": {
                  "text": "Reports a comparison of a 'typeof' expression with a literal string which is not one of the standard types: 'undefined', 'object', 'boolean', 'number', 'string', 'function', or 'symbol'. Such comparisons always return 'false'.",
                  "markdown": "Reports a comparison of a `typeof` expression with a literal string which is not one of the standard types: `undefined`, `object`, `boolean`, `number`, `string`, `function`, or `symbol`. Such comparisons always return `false`."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 46,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptValidateJSTypes",
                "shortDescription": {
                  "text": "Type mismatch in 'any' type"
                },
                "fullDescription": {
                  "text": "Reports a function call with a parameter, return value, or assigned expression or incorrect type, if the context symbol can be implicitly resolved to the 'any' type. declare var test: any;\ntest.hasOwnProperty(true); //reports 'true'",
                  "markdown": "Reports a function call with a parameter, return value, or assigned expression or incorrect type, if the context symbol can be implicitly resolved to the `any` type.\n\n```\ndeclare var test: any;\ntest.hasOwnProperty(true); //reports 'true'\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XHTMLIncompatabilitiesJS",
                "shortDescription": {
                  "text": "Incompatible XHTML usages"
                },
                "fullDescription": {
                  "text": "Reports common JavaScript DOM patterns which may present problems with XHTML documents. In particular, the patterns detected will behave completely differently depending on whether the document is loaded as XML or HTML. This can result in subtle bugs where script behaviour is dependent on the MIME-type of the document, rather than its content. Patterns detected include document.body, document.images, document.applets, document.links, document.forms, and document.anchors.",
                  "markdown": "Reports common JavaScript DOM patterns which may present problems with XHTML documents. In particular, the patterns detected will behave completely differently depending on whether the document is loaded as XML or HTML. This can result in subtle bugs where script behaviour is dependent on the MIME-type of the document, rather than its content. Patterns detected include **document.body** , **document.images** , **document.applets** , **document.links** , **document.forms** , and **document.anchors**."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/DOM issues",
                      "index": 31,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSAnnotator",
                "shortDescription": {
                  "text": "ECMAScript specification is not followed"
                },
                "fullDescription": {
                  "text": "Reports basic syntax issues and inconsistencies with language specification, such as invalid usages of keywords, usages of incompatible numeric format, or multiple parameters to getters/setters. Generally, such errors must always be reported and shouldn't be disabled. But in some cases, such as issues due to the dynamic nature of JavaScript, the use of not yet supported language features, or bugs in IDE's checker, it may be handy to disable reporting these very basic errors.",
                  "markdown": "Reports basic syntax issues and inconsistencies with language specification, such as invalid usages of keywords, usages of incompatible numeric format, or multiple parameters to getters/setters.   \nGenerally, such errors must always be reported and shouldn't be disabled. But in some cases, such as issues due to the dynamic nature of JavaScript, the use of not yet supported language features, or bugs in IDE's checker, it may be handy to disable reporting these very basic errors."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ConvertToForOf",
                "shortDescription": {
                  "text": "'for..in' is used instead of 'for..of'"
                },
                "fullDescription": {
                  "text": "Reports a usage of a 'for..in' loop on an array. Suggests replacing it with a 'for..of' loop. 'for..of' loops, which are introduced in ECMAScript 6, iterate over 'iterable' objects. For arrays, this structure is preferable to 'for..in', because it works only with array values but not with array object's properties.",
                  "markdown": "Reports a usage of a [for..in](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in) loop on an array. Suggests replacing it with a [for..of](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loop.   \n`for..of` loops, which are introduced in ECMAScript 6, iterate over `iterable` objects. For arrays, this structure is preferable to `for..in`, because it works only with array values but not with array object's properties."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 30,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ThisExpressionReferencesGlobalObjectJS",
                "shortDescription": {
                  "text": "'this' expression which references the global object"
                },
                "fullDescription": {
                  "text": "Reports a 'this' expression outside an object literal or a constructor body. Such 'this' expressions reference the top-level \"global\" JavaScript object, but are mostly useless.",
                  "markdown": "Reports a `this` expression outside an object literal or a constructor body. Such `this` expressions reference the top-level \"global\" JavaScript object, but are mostly useless."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Validity issues",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NestedFunctionCallJS",
                "shortDescription": {
                  "text": "Nested function call"
                },
                "fullDescription": {
                  "text": "Reports a function call that is used as an argument in another function call, for example, 'foo(bar())'",
                  "markdown": "Reports a function call that is used as an argument in another function call, for example, `foo(bar())`"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 42,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSEqualityComparisonWithCoercion",
                "shortDescription": {
                  "text": "Equality operator may cause type coercion"
                },
                "fullDescription": {
                  "text": "Reports a usage of an equality operator that may cause unexpected type coercions. Suggests replacing '==' and '!=' with type-safe equality operators '===' and '!=='. Depending on the option selected, one of the following cases will be reported: All usages of '==' and '!=' operators. All usages except comparison with null. Some code styles allow using 'x == null' as a replacement for 'x === null || x === undefined'. Only suspicious expressions, such as: '==' or '!=' comparisons with '0', '''', 'null', 'true', 'false', or 'undefined'.",
                  "markdown": "Reports a usage of an equality operator that may cause unexpected type coercions. Suggests replacing `==` and `!=` with type-safe equality operators `===` and `!==`.\n\nDepending on the option selected, one of the following cases will be reported:\n\n* All usages of `==` and `!=` operators.\n* All usages except comparison with null. Some code styles allow using `x == null` as a replacement for `x === null || x === undefined`.\n* Only suspicious expressions, such as: `==` or `!=` comparisons with `0`, `''`, `null`, `true`, `false`, or `undefined`."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 46,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSNonStrictModeUsed",
                "shortDescription": {
                  "text": "Non-strict mode used"
                },
                "fullDescription": {
                  "text": "Reports a JavaScript file that is not in the 'strict' mode.",
                  "markdown": "Reports a JavaScript file that is not in the `strict` mode."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptExplicitMemberType",
                "shortDescription": {
                  "text": "Explicit types"
                },
                "fullDescription": {
                  "text": "Reports a type annotation that doesn't match the current code style for explicit types. Type declarations are not necessary when the type that is inferred from the context exactly matches the type annotation, for example: 'var pi: number = 3.14' In some cases it is preferable to always have explicit types - this prevents accidental type changes and makes code more explicit.",
                  "markdown": "Reports a type annotation that doesn't match the current code style for explicit types.\n\n\nType declarations are not necessary when the type that is inferred from the context exactly matches the type annotation, for example:\n\n\n`\nvar pi: number = 3.14\n`\n\nIn some cases it is preferable to always have explicit types - this prevents accidental type changes and makes code more explicit."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSDuplicateCaseLabel",
                "shortDescription": {
                  "text": "Duplicate 'case' label"
                },
                "fullDescription": {
                  "text": "Reports a duplicated 'case' label on a 'switch' statement, which normally indicates an error.",
                  "markdown": "Reports a duplicated `case` label on a `switch` statement, which normally indicates an error."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 55,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSXDomNesting",
                "shortDescription": {
                  "text": "Invalid DOM element nesting"
                },
                "fullDescription": {
                  "text": "Detects HTML elements in JSX files which are not nested properly according to the DOM specification. React reports runtime warnings on incorrectly nested elements.",
                  "markdown": "Detects HTML elements in JSX files which are not nested properly according to the DOM specification. React reports runtime warnings on incorrectly nested elements."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/React",
                      "index": 80,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryLocalVariableJS",
                "shortDescription": {
                  "text": "Redundant local variable"
                },
                "fullDescription": {
                  "text": "Reports an unnecessary local variable that does not make a function more comprehensible: a local variable that is immediately returned a local variable that is immediately assigned to another variable and is not used anymore a local variable that always has the same value as another local variable or parameter. Use the checkbox below to have this inspection ignore variables that are immediately returned or thrown. Some coding styles suggest using such variables for clarity and ease of debugging.",
                  "markdown": "Reports an unnecessary local variable that does not make a function more comprehensible:\n\n* a local variable that is immediately returned\n* a local variable that is immediately assigned to another variable and is not used anymore\n* a local variable that always has the same value as another local variable or parameter.\n\n\nUse the checkbox below to have this inspection ignore variables that are immediately\nreturned or thrown. Some coding styles suggest using such variables for clarity and\nease of debugging."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Data flow",
                      "index": 57,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSXUnresolvedComponent",
                "shortDescription": {
                  "text": "Unresolved JSX component"
                },
                "fullDescription": {
                  "text": "Reports an unresolved reference to a JSX component. Suggests adding a missing import statement if the referenced component is defined in the project or its dependencies or creating a new component with this name. The template for a new component can be modified in Editor | File and Code Templates.",
                  "markdown": "Reports an unresolved reference to a JSX component. Suggests adding a missing import statement if the referenced component is defined in the project or its dependencies or creating a new component with this name.\n\nThe template for a new component can be modified in Editor \\| File and Code Templates."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryLabelOnBreakStatementJS",
                "shortDescription": {
                  "text": "Unnecessary label on 'break' statement"
                },
                "fullDescription": {
                  "text": "Reports a labeled 'break' statement whose labels may be removed without changing the flow of control.",
                  "markdown": "Reports a labeled `break` statement whose labels may be removed without changing the flow of control."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 37,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DivideByZeroJS",
                "shortDescription": {
                  "text": "Division by zero"
                },
                "fullDescription": {
                  "text": "Reports division by zero or a remainder by zero.",
                  "markdown": "Reports division by zero or a remainder by zero."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 46,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ChainedEqualityJS",
                "shortDescription": {
                  "text": "Chained equality"
                },
                "fullDescription": {
                  "text": "Reports a chained equality comparison (i.e. 'a==b==c'). Such comparisons are confusing.",
                  "markdown": "Reports a chained equality comparison (i.e. `a==b==c`). Such comparisons are confusing."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 42,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSRedundantSwitchStatement",
                "shortDescription": {
                  "text": "'switch' statement is redundant and can be replaced"
                },
                "fullDescription": {
                  "text": "Reports a 'switch' statement with an empty body, or with only one 'case' branch, or with a 'default' branch only.",
                  "markdown": "Reports a `switch` statement with an empty body, or with only one `case` branch, or with a `default` branch only."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 55,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BlockStatementJS",
                "shortDescription": {
                  "text": "Unnecessary block statement"
                },
                "fullDescription": {
                  "text": "Reports a block statement that is not used as the body of 'if', 'for', 'while', 'do', 'with', or 'try' statements, or as the body of a function declaration. Starting from ECMAScript 6, JavaScript blocks introduce new scopes for 'let' and 'const' variables, but still free-standing block statements may be confusing and result in subtle bugs when used with 'var' variables.",
                  "markdown": "Reports a block statement that is not used as the body of `if`, `for`, `while`, `do`, `with`, or `try` statements, or as the body of a function declaration. Starting from ECMAScript 6, JavaScript blocks introduce new scopes for `let` and `const` variables, but still free-standing block statements may be confusing and result in subtle bugs when used with `var` variables."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 36,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TextLabelInSwitchStatementJS",
                "shortDescription": {
                  "text": "Text label in 'switch' statement"
                },
                "fullDescription": {
                  "text": "Reports a labeled statement inside a 'switch' statement, which often results from a typo. Example: 'switch(x)\n    {\n        case 1:\n        case2:   //typo!\n        case 3:\n            break;\n    }'",
                  "markdown": "Reports a labeled statement inside a `switch` statement, which often results from a typo.\n\nExample:\n\n\n        switch(x)\n        {\n            case 1:\n            case2:   //typo!\n            case 3:\n                break;\n        }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 55,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSOctalInteger",
                "shortDescription": {
                  "text": "Octal integer"
                },
                "fullDescription": {
                  "text": "Reports a deprecated octal integer literal prefixed with '0' instead of '0o'. Such literals are not allowed in modern ECMAScript code, and using them in the strict mode is an error. To force this inspection for ES5 and ES3 language levels, select the 'Warn about obsolete octal literals in ES5- code' checkbox below.",
                  "markdown": "Reports a deprecated octal integer literal prefixed with `0` instead of `0o`.  \nSuch literals are not allowed in modern ECMAScript code, and using them in the strict mode is an error.  \nTo force this inspection for ES5 and ES3 language levels, select the 'Warn about obsolete octal literals in ES5- code' checkbox below."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Validity issues",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyTryBlockJS",
                "shortDescription": {
                  "text": "Empty 'try' block"
                },
                "fullDescription": {
                  "text": "Reports an empty 'try' block, which usually indicates an error.",
                  "markdown": "Reports an empty `try` block, which usually indicates an error."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 50,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FlowJSCoverage",
                "shortDescription": {
                  "text": "Code is not covered by Flow"
                },
                "fullDescription": {
                  "text": "Reports JavaScript code fragments that are not covered by the Flow type checker. To use this inspection, configure the Flow executable in Settings | Languages & Frameworks | JavaScript.",
                  "markdown": "Reports JavaScript code fragments that are not covered by the Flow type checker. To use this inspection, configure the Flow executable in [Settings \\| Languages \\& Frameworks \\| JavaScript](settings://Settings.JavaScript)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Flow type checker",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSIgnoredPromiseFromCall",
                "shortDescription": {
                  "text": "Result of method call returning a promise is ignored"
                },
                "fullDescription": {
                  "text": "Reports a function call that returns a 'Promise' that is not used later. Such calls are usually unintended and indicate an error.",
                  "markdown": "Reports a function call that returns a `Promise` that is not used later. Such calls are usually unintended and indicate an error."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Async code and promises",
                      "index": 52,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringLiteralBreaksHTMLJS",
                "shortDescription": {
                  "text": "String literal which breaks HTML parsing"
                },
                "fullDescription": {
                  "text": "Reports a string literal that contains a '</' sequence. Such strings may result in incorrect parsing of any HTML in which the JavaScript code is embedded.",
                  "markdown": "Reports a string literal that contains a `</` sequence. Such strings may result in incorrect parsing of any HTML in which the JavaScript code is embedded."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Validity issues",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSComparisonWithNaN",
                "shortDescription": {
                  "text": "Comparison with NaN"
                },
                "fullDescription": {
                  "text": "Reports a comparison with NaN. Comparisons like 'expr == NaN' or 'expr === NaN' are always evaluated to 'false'.",
                  "markdown": "Reports a comparison with NaN. Comparisons like `expr == NaN` or `expr === NaN` are always evaluated to `false`."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 46,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSConstructorReturnsPrimitive",
                "shortDescription": {
                  "text": "Constructor returns primitive value"
                },
                "fullDescription": {
                  "text": "Reports a constructor function that returns a primitive value. When called with 'new', this value will be lost and an object will be returned instead. To avoid warnings, use the '@return' tag to specify the return of the function.",
                  "markdown": "Reports a constructor function that returns a primitive value. When called with `new`, this value will be lost and an object will be returned instead. To avoid warnings, use the `@return` tag to specify the return of the function."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 46,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PlatformDetectionJS",
                "shortDescription": {
                  "text": "Inaccurate platform detection"
                },
                "fullDescription": {
                  "text": "Reports a common JavaScript pattern for detecting the browser or operating system in which the script is run. In addition to pointing out non-portable constructs, these platform detection patterns are often incomplete and easily fooled. For most cases, detection of individual environment features is preferable to attempting to detect the entire platform. Patterns detected include: 'document.all' 'document.layers' 'navigator.userAgent' 'navigator.oscpu' 'navigator.appName' 'navigator.appCodeName' 'navigator.platform'",
                  "markdown": "Reports a common JavaScript pattern for detecting the browser or operating system in which the script is run. In addition to pointing out non-portable constructs, these platform detection patterns are often incomplete and easily fooled. For most cases, detection of individual environment features is preferable to attempting to detect the entire platform.\n\nPatterns detected include:\n\n* `document.all`\n* `document.layers`\n* `navigator.userAgent`\n* `navigator.oscpu`\n* `navigator.appName`\n* `navigator.appCodeName`\n* `navigator.platform`"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/DOM issues",
                      "index": 31,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptDuplicateUnionOrIntersectionType",
                "shortDescription": {
                  "text": "Duplicate union or intersection type component"
                },
                "fullDescription": {
                  "text": "Reports a duplicate type inside a union or intersection.",
                  "markdown": "Reports a duplicate type inside a union or intersection."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VoidExpressionJS",
                "shortDescription": {
                  "text": "'void' expression"
                },
                "fullDescription": {
                  "text": "Reports a 'void' expression.",
                  "markdown": "Reports a `void` expression."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSVoidFunctionReturnValueUsed",
                "shortDescription": {
                  "text": "Void function return value used"
                },
                "fullDescription": {
                  "text": "Reports a return value of a function that doesn't return anything. Calling of such functions always produces an 'undefined' value and such assignment may indicate an error. Example: 'let a = console.log('foo');' The following usages are ignored: Inside a return statement In some binary operations For overridden non-void functions",
                  "markdown": "Reports a return value of a function that doesn't return anything. Calling of such functions always produces an `undefined` value and such assignment may indicate an error.\n\nExample:\n\n\n    let a = console.log('foo');\n\n<br />\n\nThe following usages are ignored:\n\n* Inside a return statement\n* In some binary operations\n* For overridden non-void functions"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 46,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReturnFromFinallyBlockJS",
                "shortDescription": {
                  "text": "'return' inside 'finally' block"
                },
                "fullDescription": {
                  "text": "Reports a 'return' statement inside a 'finally' block. Such 'return' statements may mask exceptions thrown, and complicate debugging.",
                  "markdown": "Reports a `return` statement inside a `finally` block. Such `return` statements may mask exceptions thrown, and complicate debugging."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 50,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StatementsPerFunctionJS",
                "shortDescription": {
                  "text": "Overly long function"
                },
                "fullDescription": {
                  "text": "Reports an overly long function. Function length is calculated by counting up the number of non-empty statements in the function. Functions that are too long are error-prone and difficult to test. Use the field below to specify the maximum acceptable number of statements in a function.",
                  "markdown": "Reports an overly long function. Function length is calculated by counting up the number of non-empty statements in the function. Functions that are too long are error-prone and difficult to test.\n\n\nUse the field below to specify the maximum acceptable number of statements in a function."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Function metrics",
                      "index": 40,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ContinueStatementWithLabelJS",
                "shortDescription": {
                  "text": "'continue' statement with label"
                },
                "fullDescription": {
                  "text": "Reports a labeled 'continue' statement.",
                  "markdown": "Reports a labeled `continue` statement."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptMissingConfigOption",
                "shortDescription": {
                  "text": "Missing tsconfig.json option "
                },
                "fullDescription": {
                  "text": "Reports a usage that requires an explicit option in 'tsconfig.json'. For example, to use JSX in '.tsx' files, 'tsconfig.json' must contain '\"jsx\"' property.",
                  "markdown": "Reports a usage that requires an explicit option in `tsconfig.json`. For example, to use JSX in `.tsx` files, `tsconfig.json` must contain `\"jsx\"` property."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ShorthandObjectProperty",
                "shortDescription": {
                  "text": "Property can be replaced with shorthand"
                },
                "fullDescription": {
                  "text": "Reports an object property that can be converted to ES6 shorthand style and provides a quick-fix to do it. Example: 'var obj = {foo:foo}' After applying the quick-fix the code looks as follows: 'var obj = {foo}'",
                  "markdown": "Reports an object property that can be converted to ES6 shorthand style and provides a quick-fix to do it.\n\nExample:\n\n\n    var obj = {foo:foo}\n\nAfter applying the quick-fix the code looks as follows:\n\n\n    var obj = {foo}\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSPotentiallyInvalidConstructorUsage",
                "shortDescription": {
                  "text": "Potentially invalid constructor usage"
                },
                "fullDescription": {
                  "text": "Reports a usage of a potentially invalid constructor function, for example: a function that is not a constructor after 'new', using a constructor's prototype or calling a constructor without 'new'. A constructor function is assumed to have an upper case name (optional) or have an explicit JSDoc '@constructor' tag.",
                  "markdown": "Reports a usage of a potentially invalid constructor function, for example: a function that is not a constructor after `new`, using a constructor's prototype or calling a constructor without `new`. A constructor function is assumed to have an upper case name (optional) or have an explicit JSDoc `@constructor` tag."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 46,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NodeCoreCodingAssistance",
                "shortDescription": {
                  "text": "Unresolved Node.js APIs"
                },
                "fullDescription": {
                  "text": "Suggests configuring coding assistance for Node.js, for example, 'require' and/or core modules ('path', 'http', 'fs', etc.). See https://nodejs.org/api/ for the complete list.",
                  "markdown": "Suggests configuring coding assistance for Node.js, for example, `require` and/or core modules ('path', 'http', 'fs', etc.).\n\n\nSee <https://nodejs.org/api/> for the complete list."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Node.js",
                      "index": 83,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSPrimitiveTypeWrapperUsage",
                "shortDescription": {
                  "text": "Primitive type object wrapper used"
                },
                "fullDescription": {
                  "text": "Reports an improper usage of a wrapper for primitive types or a property of a primitive type being modified, as in the latter case the assigned value will be lost.",
                  "markdown": "Reports an improper usage of a wrapper for primitive types or a property of a primitive type being modified, as in the latter case the assigned value will be lost."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSLastCommaInArrayLiteral",
                "shortDescription": {
                  "text": "Unneeded last comma in array literal"
                },
                "fullDescription": {
                  "text": "Reports a usage of a trailing comma in an array literal. The warning is reported only when the JavaScript language version is set to ECMAScript 5.1. Although trailing commas in arrays are allowed by the specification, some browsers may throw an error when a trailing comma is used. You can configure formatting options for trailing commas in Code Style | JavaScript or TypeScript | Punctuation.",
                  "markdown": "Reports a usage of a trailing comma in an array literal.\n\nThe warning is reported only when the JavaScript language version is set to ECMAScript 5.1.\n\nAlthough trailing commas in arrays are allowed by the specification, some browsers may throw an error when a trailing comma is used.\n\nYou can configure formatting options for trailing commas in **Code Style** \\| **JavaScript** or **TypeScript** \\| **Punctuation**."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NegatedConditionalExpressionJS",
                "shortDescription": {
                  "text": "Negated conditional expression"
                },
                "fullDescription": {
                  "text": "Reports a conditional expression whose condition is negated. Suggests flipping the order of branches in the conditional expression to increase the clarity of the statement. Example: '!condition ? 2 : 1'",
                  "markdown": "Reports a conditional expression whose condition is negated. Suggests flipping the order of branches in the conditional expression to increase the clarity of the statement. Example: `!condition ? 2 : 1`"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 36,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LabeledStatementJS",
                "shortDescription": {
                  "text": "Labeled statement"
                },
                "fullDescription": {
                  "text": "Reports a labeled statement.",
                  "markdown": "Reports a labeled statement."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WithStatementJS",
                "shortDescription": {
                  "text": "'with' statement"
                },
                "fullDescription": {
                  "text": "Reports a 'with' statements. Such statements result in potentially confusing implicit bindings, and may behave strangely in setting new variables.",
                  "markdown": "Reports a `with` statements. Such statements result in potentially confusing implicit bindings, and may behave strangely in setting new variables."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSConstantReassignment",
                "shortDescription": {
                  "text": "Attempt to assign to const or readonly variable"
                },
                "fullDescription": {
                  "text": "Reports reassigning a value to a constant or a readonly variable.",
                  "markdown": "Reports reassigning a value to a constant or a readonly variable."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Validity issues",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MagicNumberJS",
                "shortDescription": {
                  "text": "Magic number"
                },
                "fullDescription": {
                  "text": "Reports a \"magic number\" that is a numeric literal used without being named by a constant declaration. Magic numbers can result in code whose intention is unclear, and may result in errors if a magic number is changed in one code location but remains unchanged in another. The numbers 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100, 1000, 0.0 and 1.0 are ignored.",
                  "markdown": "Reports a \"magic number\" that is a numeric literal used without being named by a constant declaration. Magic numbers can result in code whose intention is unclear, and may result in errors if a magic number is changed in one code location but remains unchanged in another. The numbers 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100, 1000, 0.0 and 1.0 are ignored."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 36,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptLibrary",
                "shortDescription": {
                  "text": "Missing global library"
                },
                "fullDescription": {
                  "text": "Reports a TypeScript library file that is required for a symbol but is not listed under the 'lib' compiler option in 'tsconfig.json'.",
                  "markdown": "Reports a TypeScript library file that is required for a symbol but is not listed under the `lib` compiler option in `tsconfig.json`."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptMissingAugmentationImport",
                "shortDescription": {
                  "text": "Missing augmentation import"
                },
                "fullDescription": {
                  "text": "Reports a usage from augmentation module without an explicit import.",
                  "markdown": "Reports a usage from [augmentation module](https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation) without an explicit import."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Eslint",
                "shortDescription": {
                  "text": "ESLint"
                },
                "fullDescription": {
                  "text": "Reports a discrepancy detected by the ESLint linter. The highlighting is based on the rule severity specified in the ESLint configuration file for each individual rule. Clear the 'Use rule severity from the configuration file' checkbox to use the severity configured in this inspection for all ESLint rules.",
                  "markdown": "Reports a discrepancy detected by the [ESLint](https://eslint.org) linter.   \n\nThe highlighting is based on the rule severity specified in the [ESLint configuration file](https://eslint.org/docs/user-guide/configuring) for each individual rule.   \n\nClear the 'Use rule severity from the configuration file' checkbox to use the severity configured in this inspection for all ESLint rules."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code quality tools",
                      "index": 38,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSEqualityComparisonWithCoercion.TS",
                "shortDescription": {
                  "text": "Equality operator may cause type coercion"
                },
                "fullDescription": {
                  "text": "Reports a usage of equality operators may cause unexpected type coercions. Suggests replacing '==' or '!=' equality operators with type-safe '===' or '!==' operators. Depending on the option selected, one of the following cases will be reported: All usages of '==' and '!=' operators. All usages except comparison with null. Some code styles allow using 'x == null' as a replacement for 'x === null || x === undefined'. Only suspicious expressions, such as: '==' or '!=' comparisons with '0', '''', 'null', 'true', 'false', or 'undefined'.",
                  "markdown": "Reports a usage of equality operators may cause unexpected type coercions. Suggests replacing `==` or `!=` equality operators with type-safe `===` or `!==` operators.\n\nDepending on the option selected, one of the following cases will be reported:\n\n* All usages of `==` and `!=` operators.\n* All usages except comparison with null. Some code styles allow using `x == null` as a replacement for `x === null || x === undefined`.\n* Only suspicious expressions, such as: `==` or `!=` comparisons with `0`, `''`, `null`, `true`, `false`, or `undefined`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PackageJsonMismatchedDependency",
                "shortDescription": {
                  "text": "Mismatched dependencies in package.json"
                },
                "fullDescription": {
                  "text": "Reports a dependency from package.json that is not installed or doesn't match the specified version range.",
                  "markdown": "Reports a dependency from package.json that is not installed or doesn't match the specified [version range](https://docs.npmjs.com/about-semantic-versioning)."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Imports and dependencies",
                      "index": 60,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InfiniteLoopJS",
                "shortDescription": {
                  "text": "Infinite loop statement"
                },
                "fullDescription": {
                  "text": "Reports a 'for', 'while', or 'do' statement which can only exit by throwing an exception. Such statements often indicate coding errors.",
                  "markdown": "Reports a `for`, `while`, or `do` statement which can only exit by throwing an exception. Such statements often indicate coding errors."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 46,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSArrowFunctionBracesCanBeRemoved",
                "shortDescription": {
                  "text": "Redundant braces around arrow function body"
                },
                "fullDescription": {
                  "text": "Reports an arrow function whose body only consists of braces and exactly one statement. Suggests converting to concise syntax without braces. 'let incrementer = (x) => {return x + 1};' After the quick-fix is applied, the code fragment looks as follows: 'let incrementer = (x) => x + 1;'",
                  "markdown": "Reports an arrow function whose body only consists of braces and exactly one statement. Suggests converting to concise syntax without braces.\n\n\n`\nlet incrementer = (x) => {return x + 1};\n`\n\nAfter the quick-fix is applied, the code fragment looks as follows:\n\n\n`\nlet incrementer = (x) => x + 1;\n`"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 42,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSClassNamingConvention",
                "shortDescription": {
                  "text": "Class naming convention"
                },
                "fullDescription": {
                  "text": "Reports a class or a function that is annotated with a JSDoc '@constructor' or '@class' tag whose names are too short, too long, or do not follow the specified regular expression pattern. Use the fields provided below to specify minimum length, maximum length, and a regular expression expected for classes names. Use the standard 'java.util.regex' format for regular expressions.",
                  "markdown": "Reports a class or a function that is annotated with a JSDoc `@constructor` or `@class` tag whose names are too short, too long, or do not follow the specified regular expression pattern.\n\n\nUse the fields provided below to specify minimum length, maximum length, and a regular expression\nexpected for classes names. Use the standard `java.util.regex` format for regular expressions."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Naming conventions",
                      "index": 53,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUndefinedPropertyAssignment",
                "shortDescription": {
                  "text": "Undefined property assignment"
                },
                "fullDescription": {
                  "text": "Reports an assignment to a property that is not defined in the type of a variable. Example: '/**\n * @type {{ property1: string, property2: number }}\n */\nlet myVariable = create();\n\nmyVariable.newProperty = 3; // bad'",
                  "markdown": "Reports an assignment to a property that is not defined in the type of a variable.\n\nExample:\n\n\n    /**\n     * @type {{ property1: string, property2: number }}\n     */\n    let myVariable = create();\n\n    myVariable.newProperty = 3; // bad\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 42,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSDeprecatedSymbols",
                "shortDescription": {
                  "text": "Deprecated symbol used"
                },
                "fullDescription": {
                  "text": "Reports a usage of a deprecated function variable.",
                  "markdown": "Reports a usage of a deprecated function variable."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LocalVariableNamingConventionJS",
                "shortDescription": {
                  "text": "Local variable naming convention"
                },
                "fullDescription": {
                  "text": "Reports a local variable whose name is too short, too long, or doesn't follow the specified regular expression pattern. Use the fields provided below to specify minimum length, maximum length, and a regular expression expected for local variables names. Use the standard 'java.util.regex' format regular expressions.",
                  "markdown": "Reports a local variable whose name is too short, too long, or doesn't follow the specified regular expression pattern.\n\n\nUse the fields provided below to specify minimum length, maximum length, and a regular expression\nexpected for local variables names. Use the standard `java.util.regex` format regular expressions."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Naming conventions",
                      "index": 53,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnresolvedExtXType",
                "shortDescription": {
                  "text": "Unresolved Ext JS xtype"
                },
                "fullDescription": {
                  "text": "Reports an Ext JS 'xtype' reference that doesn't have a corresponding class.",
                  "markdown": "Reports an Ext JS `xtype` reference that doesn't have a corresponding class."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6RedundantNestingInTemplateLiteral",
                "shortDescription": {
                  "text": "Redundant nesting in template literal"
                },
                "fullDescription": {
                  "text": "Reports nested instances of a string or a template literal. Suggests inlining the nested instances into the containing template string. Example: 'let a = `Hello, ${`Brave ${\"New\"}`} ${\"World\"}!`' After applying the quick-fix the code looks as follows: 'let a = `Hello, Brave New World!`'",
                  "markdown": "Reports nested instances of a string or a template literal. Suggests inlining the nested instances into the containing template string.\n\nExample:\n\n\n    let a = `Hello, ${`Brave ${\"New\"}`} ${\"World\"}!`\n\nAfter applying the quick-fix the code looks as follows:\n\n\n    let a = `Hello, Brave New World!`\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NestingDepthJS",
                "shortDescription": {
                  "text": "Overly nested function"
                },
                "fullDescription": {
                  "text": "Reports a function whose body contains statements that are too deeply nested within other statements. Such functions may be confusing and indicate that refactoring may be necessary. Use the field provided below to specify the maximum acceptable nesting depth allowed in a function.",
                  "markdown": "Reports a function whose body contains statements that are too deeply nested within other statements. Such functions may be confusing and indicate that refactoring may be necessary.\n\n\nUse the field provided below to specify the maximum acceptable nesting depth allowed in a function."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Function metrics",
                      "index": 40,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptSuspiciousConstructorParameterAssignment",
                "shortDescription": {
                  "text": "Assigned constructor field parameter"
                },
                "fullDescription": {
                  "text": "Reports a common mistake in TypeScript code, when a class field is declared as a constructor parameter, and then this parameter is assigned. In this case, the corresponding field won't be assigned, only the local parameter value is modified. class Foo {\n  constructor(private p: number) {\n    p = 1; //must be this.p = 1;\n  }\n}",
                  "markdown": "Reports a common mistake in TypeScript code, when a class field is declared as a constructor parameter, and then this parameter is assigned.  \nIn this case, the corresponding field *won't* be assigned, only the local parameter value is modified.\n\n```\nclass Foo {\n  constructor(private p: number) {\n    p = 1; //must be this.p = 1;\n  }\n}\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NestedSwitchStatementJS",
                "shortDescription": {
                  "text": "Nested 'switch' statement"
                },
                "fullDescription": {
                  "text": "Reports a 'switch' statement that is nested in another 'switch' statement. Nested 'switch' statements may be very confusing, particularly if indenting is inconsistent.",
                  "markdown": "Reports a `switch` statement that is nested in another `switch` statement. Nested `switch` statements may be very confusing, particularly if indenting is inconsistent."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 55,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSMissingSwitchBranches",
                "shortDescription": {
                  "text": "'switch' statement has missing branches"
                },
                "fullDescription": {
                  "text": "Reports a 'switch' statement on a variable of the type 'enum' or 'union' when the statement doesn't cover some value options from the type.",
                  "markdown": "Reports a `switch` statement on a variable of the type `enum` or `union` when the statement doesn't cover some value options from the type."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 55,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSJQueryEfficiency",
                "shortDescription": {
                  "text": "JQuery selector can be optimized"
                },
                "fullDescription": {
                  "text": "Reports a duplicated jQuery selector that can be cached or a usage of an attribute or a pseudo-selector (optional).",
                  "markdown": "Reports a duplicated jQuery selector that can be cached or a usage of an attribute or a pseudo-selector (optional)."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnreachableCodeJS",
                "shortDescription": {
                  "text": "Unreachable code"
                },
                "fullDescription": {
                  "text": "Reports code that can never be executed, which almost certainly indicates an error",
                  "markdown": "Reports code that can never be executed, which almost certainly indicates an error"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 37,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyStatementBodyJS",
                "shortDescription": {
                  "text": "Statement with empty body"
                },
                "fullDescription": {
                  "text": "Reports an 'if', 'while', 'for', or 'with' statement with an empty body. Such statements often result from typos, and may cause confusion. Use the checkbox below to specify whether the statements with empty block statements as bodies should be reported.",
                  "markdown": "Reports an `if`, `while`, `for`, or `with` statement with an empty body. Such statements often result from typos, and may cause confusion.\n\n\nUse the checkbox below to specify whether the statements with empty block statements as bodies\nshould be reported."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 36,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnusedLocalSymbols",
                "shortDescription": {
                  "text": "Unused local symbol"
                },
                "fullDescription": {
                  "text": "Reports an unused locally accessible parameter, local variable, function, class, or private member declaration.",
                  "markdown": "Reports an unused locally accessible parameter, local variable, function, class, or private member declaration."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Unused symbols",
                      "index": 63,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.editorconfig.editorconfigjetbrains",
            "version": "231.5825.43",
            "rules": [
              {
                "id": "EditorConfigNumerousWildcards",
                "shortDescription": {
                  "text": "Too many wildcards"
                },
                "fullDescription": {
                  "text": "Reports sections that contain too many wildcards. Using a lot of wildcards may lead to performance issues.",
                  "markdown": "Reports sections that contain too many wildcards. Using a lot of wildcards may lead to performance issues."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigKeyCorrectness",
                "shortDescription": {
                  "text": "Unknown property"
                },
                "fullDescription": {
                  "text": "Reports properties that are not supported by the IDE. Note: some “ij” domain properties may require specific language plugins.",
                  "markdown": "Reports properties that are not supported by the IDE. Note: some \"ij\" domain properties may require specific language plugins."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigEncoding",
                "shortDescription": {
                  "text": "File encoding doesn't match EditorConfig charset"
                },
                "fullDescription": {
                  "text": "Checks that current file encoding matches the encoding defined in \"charset\" property of .editorconfig file.",
                  "markdown": "Checks that current file encoding matches the encoding defined in \"charset\" property of .editorconfig file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigEmptyHeader",
                "shortDescription": {
                  "text": "Empty header"
                },
                "fullDescription": {
                  "text": "Reports sections with an empty header. Section header must contain file path globs in the format similar to one supported by 'gitignore'.",
                  "markdown": "Reports sections with an empty header. Section header must contain file path globs in the format similar to one supported by `gitignore`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigSpaceInHeader",
                "shortDescription": {
                  "text": "Space in file pattern"
                },
                "fullDescription": {
                  "text": "Reports space characters in wildcard patterns that affect pattern matching. If these characters are not intentional, they should be removed.",
                  "markdown": "Reports space characters in wildcard patterns that affect pattern matching. If these characters are not intentional, they should be removed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigOptionRedundancy",
                "shortDescription": {
                  "text": "Redundant property"
                },
                "fullDescription": {
                  "text": "Reports properties that are redundant when another applicable section already contains the same property and value. For example: '[*]\nindent_size=4\n[*.java]\nindent_size=4' are both applicable to '*.java' files and define the same 'indent_size' value.",
                  "markdown": "Reports properties that are redundant when another applicable section already contains the same property and value.\n\n\nFor example:\n\n\n    [*]\n    indent_size=4\n    [*.java]\n    indent_size=4\n\nare both applicable to `*.java` files and define the same `indent_size` value."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigWildcardRedundancy",
                "shortDescription": {
                  "text": "Redundant wildcard"
                },
                "fullDescription": {
                  "text": "Reports wildcards that become redundant when the “**” wildcard is used in the same section. The “**” wildcard defines a broader set of files than any other wildcard. That is why, any other wildcard used in the same section has no affect and can be removed.",
                  "markdown": "Reports wildcards that become redundant when the \"\\*\\*\" wildcard is used in the same section.\n\n\nThe \"\\*\\*\" wildcard defines a broader set of files than any other wildcard.\nThat is why, any other wildcard used in the same section has no affect and can be removed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigUnusedDeclaration",
                "shortDescription": {
                  "text": "Unused declaration"
                },
                "fullDescription": {
                  "text": "Reports unused declarations. Such declarations can be removed.",
                  "markdown": "Reports unused declarations. Such declarations can be removed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigRootDeclarationUniqueness",
                "shortDescription": {
                  "text": "Extra top-level declaration"
                },
                "fullDescription": {
                  "text": "Reports multiple top-level declarations. There can be only one optional “root=true” top-level declaration in the EditorConfig file. Using multiple top-level declarations is not allowed.",
                  "markdown": "Reports multiple top-level declarations. There can be only one optional \"root=true\" top-level declaration in the EditorConfig file. Using multiple top-level declarations is not allowed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigShadowedOption",
                "shortDescription": {
                  "text": "Overridden property"
                },
                "fullDescription": {
                  "text": "Reports properties that are already defined in other sections. For example: '[*.java]\nindent_size=4\n[{*.java,*.js}]\nindent_size=2' The second section includes all '*.java' files too but it also redefines indent_size. As a result the value 2 will be used for files matching '*.java'.",
                  "markdown": "Reports properties that are already defined in other sections.\n\nFor example:\n\n\n    [*.java]\n    indent_size=4\n    [{*.java,*.js}]\n    indent_size=2\n\nThe second section includes all `*.java` files too but it also redefines indent_size. As a result the value 2 will be used for files matching `*.java`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigValueUniqueness",
                "shortDescription": {
                  "text": "Non-unique list value"
                },
                "fullDescription": {
                  "text": "Reports duplicates in lists of values.",
                  "markdown": "Reports duplicates in lists of values."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigUnexpectedComma",
                "shortDescription": {
                  "text": "Unexpected comma"
                },
                "fullDescription": {
                  "text": "Reports commas that cannot be used in the current context. Commas are allowed only as separators for values in lists.",
                  "markdown": "Reports commas that cannot be used in the current context. Commas are allowed only as separators for values in lists."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigShadowingOption",
                "shortDescription": {
                  "text": "Overriding property"
                },
                "fullDescription": {
                  "text": "Reports properties that override the same properties defined earlier in the file. For example: '[*.java]\nindent_size=4\n[{*.java,*.js}]\nindent_size=2' The second section includes the same files as '[*.java]' but also sets indent_size to value 2. Thus the first declaration 'indent_size=4'will be ignored.",
                  "markdown": "Reports properties that override the same properties defined earlier in the file.\n\nFor example:\n\n\n    [*.java]\n    indent_size=4\n    [{*.java,*.js}]\n    indent_size=2\n\nThe second section includes the same files as `[*.java]` but also sets indent_size to value 2. Thus the first declaration `indent_size=4`will be ignored."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigReferenceCorrectness",
                "shortDescription": {
                  "text": "Invalid reference"
                },
                "fullDescription": {
                  "text": "Reports identifiers that are either unknown or have a wrong type.",
                  "markdown": "Reports identifiers that are either unknown or have a wrong type."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigCharClassLetterRedundancy",
                "shortDescription": {
                  "text": "Duplicate character class letter"
                },
                "fullDescription": {
                  "text": "Reports wildcard patterns in the EditorConfig section that contain a duplicate character in the character class, for example '[aa]'.",
                  "markdown": "Reports wildcard patterns in the EditorConfig section that contain a duplicate character in the character class, for example `[aa]`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigMissingRequiredDeclaration",
                "shortDescription": {
                  "text": "Required declarations are missing"
                },
                "fullDescription": {
                  "text": "Reports properties that miss the required declarations. Refer to the documentation for more information.",
                  "markdown": "Reports properties that miss the required declarations. Refer to the documentation for more information."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPartialOverride",
                "shortDescription": {
                  "text": "Overlapping sections"
                },
                "fullDescription": {
                  "text": "Reports subsets of files specified in the current section that overlap with other subsets in other sections. For example: '[{foo,bar}]' and '[{foo,bas}]' both contain “foo”.",
                  "markdown": "Reports subsets of files specified in the current section that overlap with other subsets in other sections. For example: `[{foo,bar}]` and `[{foo,bas}]` both contain \"foo\"."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigListAcceptability",
                "shortDescription": {
                  "text": "Unexpected value list"
                },
                "fullDescription": {
                  "text": "Reports lists of values that are used in properties in which lists are not supported. In this case, only a single value can be specified.",
                  "markdown": "Reports lists of values that are used in properties in which lists are not supported. In this case, only a single value can be specified."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPatternEnumerationRedundancy",
                "shortDescription": {
                  "text": "Unnecessary braces"
                },
                "fullDescription": {
                  "text": "Reports pattern lists that are either empty '{}' or contain just one pattern, for example '{foo}' in contrast to a list containing multiple patterns, for example '{foo,bar}'. In this case braces are handled as a part of the name. For example, the pattern '*.{a}' will match the file 'my.{a}' but not 'my.a'.",
                  "markdown": "Reports pattern lists that are either empty `{}` or contain just one pattern, for example `{foo}` in contrast to a list containing multiple patterns, for example `{foo,bar}`. In this case braces are handled as a part of the name. For example, the pattern `*.{a}` will match the file `my.{a}` but not `my.a`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPairAcceptability",
                "shortDescription": {
                  "text": "Unexpected key-value pair"
                },
                "fullDescription": {
                  "text": "Reports key-value pairs that are not allowed in the current context.",
                  "markdown": "Reports key-value pairs that are not allowed in the current context."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigNoMatchingFiles",
                "shortDescription": {
                  "text": "No matching files"
                },
                "fullDescription": {
                  "text": "Reports sections with wildcard patterns that do not match any files under the directory in which the '.editorconfig' file is located.",
                  "markdown": "Reports sections with wildcard patterns that do not match any files under the directory in which the `.editorconfig` file is located."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigHeaderUniqueness",
                "shortDescription": {
                  "text": "EditorConfig section is not unique"
                },
                "fullDescription": {
                  "text": "Reports sections that define the same file pattern as other sections.",
                  "markdown": "Reports sections that define the same file pattern as other sections."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigValueCorrectness",
                "shortDescription": {
                  "text": "Invalid property value"
                },
                "fullDescription": {
                  "text": "Reports property values that do not meet value restrictions. For example, some properties may be only “true” or “false”, others contain only integer numbers etc. If a value has a limited set of variants, use code completion to see all of them.",
                  "markdown": "Reports property values that do not meet value restrictions. For example, some properties may be only \"true\" or \"false\", others contain only integer numbers etc. If a value has a limited set of variants, use code completion to see all of them."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigRootDeclarationCorrectness",
                "shortDescription": {
                  "text": "Unexpected top-level declaration"
                },
                "fullDescription": {
                  "text": "Reports unexpected top-level declarations. Top-level declarations other than “root=true” are not allowed in the EditorConfig file.",
                  "markdown": "Reports unexpected top-level declarations. Top-level declarations other than \"root=true\" are not allowed in the EditorConfig file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPatternRedundancy",
                "shortDescription": {
                  "text": "Duplicate or redundant pattern"
                },
                "fullDescription": {
                  "text": "Reports file patterns that are redundant as there already are other patterns that define the same scope of files or even a broader one. For example, in '[{*.java,*}]' the first '*.java' pattern defines a narrower scope compared to '*'. That is why it is redundant and can be removed.",
                  "markdown": "Reports file patterns that are redundant as there already are other patterns that define the same scope of files or even a broader one. For example, in `[{*.java,*}]` the first `*.java` pattern defines a narrower scope compared to `*`. That is why it is redundant and can be removed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigDeprecatedDescriptor",
                "shortDescription": {
                  "text": "Deprecated property"
                },
                "fullDescription": {
                  "text": "Reports EditorConfig properties that are no longer supported.",
                  "markdown": "Reports EditorConfig properties that are no longer supported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigCharClassRedundancy",
                "shortDescription": {
                  "text": "Unnecessary character class"
                },
                "fullDescription": {
                  "text": "Reports character classes that consist of a single character. Such classes can be simplified to a character, for example '[a]'→'a'.",
                  "markdown": "Reports character classes that consist of a single character. Such classes can be simplified to a character, for example `[a]`→`a`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigEmptySection",
                "shortDescription": {
                  "text": "Empty section"
                },
                "fullDescription": {
                  "text": "Reports sections that do not contain any EditorConfig properties.",
                  "markdown": "Reports sections that do not contain any EditorConfig properties."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.database",
            "version": "231.5825.43",
            "rules": [
              {
                "id": "SqlMissingReturnInspection",
                "shortDescription": {
                  "text": "Missing return statement"
                },
                "fullDescription": {
                  "text": "Reports functions that have no RETURN statements. Example (Oracle): 'CREATE FUNCTION foo RETURN int AS\nBEGIN\nEND;' The 'foo' function must return the integer value but the function body returns nothing. To fix the error, add a RETURN statement (for example, 'return 1;'). 'CREATE FUNCTION foo RETURN int AS\nBEGIN\n RETURN 1;\nEND;'",
                  "markdown": "Reports functions that have no RETURN statements.\n\nExample (Oracle):\n\n    CREATE FUNCTION foo RETURN int AS\n    BEGIN\n    END;\n\nThe `foo` function must return the integer value but the function body returns nothing. To fix the error,\nadd a RETURN statement (for example, `return 1;`).\n\n    CREATE FUNCTION foo RETURN int AS\n    BEGIN\n     RETURN 1;\n    END;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlCaseVsIfInspection",
                "shortDescription": {
                  "text": "Using CASE instead of conditional function and vice versa"
                },
                "fullDescription": {
                  "text": "Reports situations when CASE and IF are interchangeable. Example (MySQL): 'SELECT CASE\nWHEN C1 IS NULL THEN 1\nELSE 0\nEND\nFROM dual;' To keep your code short, you can replace the CASE structure with IF. You can do that by applying the Replace with 'IF' call intention action. The example code will look as follows: 'SELECT IF(C1 IS NULL, 1, 0)\nFROM dual;' To revert IF to CASE, click IF and apply the Replace with CASE expression intention action.",
                  "markdown": "Reports situations when CASE and IF are interchangeable.\n\nExample (MySQL):\n\n    SELECT CASE\n    WHEN C1 IS NULL THEN 1\n    ELSE 0\n    END\n    FROM dual;\n\nTo keep your code short, you can replace the CASE structure with IF. You can do that by applying the **Replace with 'IF' call**\nintention action. The example code will look as follows:\n\n    SELECT IF(C1 IS NULL, 1, 0)\n    FROM dual;\n\nTo revert IF to CASE, click IF and apply the **Replace with CASE expression** intention action."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlShouldBeInGroupByInspection",
                "shortDescription": {
                  "text": "Column should be in group by clause"
                },
                "fullDescription": {
                  "text": "Reports columns that are not in the GROUP BY clause or inside an aggregate function call. Example (Microsoft SQL Server): 'CREATE TABLE t1 (a INT, b INT);\nSELECT a, b FROM t1 GROUP BY a;' If you run the SELECT query, you will receive an error because Microsoft SQL Server expects the 'b' column in GROUP BY or used inside an aggregate function. The following two examples will fix the error. 'SELECT a, b FROM t1 GROUP BY a, b;\nSELECT a, max(b) max_b FROM t1 GROUP BY a;'",
                  "markdown": "Reports columns that are not in the GROUP BY clause or inside an aggregate function call.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE t1 (a INT, b INT);\n    SELECT a, b FROM t1 GROUP BY a;\n\nIf you run the SELECT query, you will receive an error because Microsoft SQL Server expects the `b` column in GROUP BY or used\ninside an aggregate function. The following two examples will fix the error.\n\n    SELECT a, b FROM t1 GROUP BY a, b;\n    SELECT a, max(b) max_b FROM t1 GROUP BY a;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlMisleadingReferenceInspection",
                "shortDescription": {
                  "text": "Misleading references"
                },
                "fullDescription": {
                  "text": "Reports ambiguous references in SQL code. For example, when a name refer to both a table column and a routine parameter. The execution of such code might lead to errors or unexpected results due to counter-intuitive resolution logic. Usually, names with a more local scope have higher priority. Example (PostgreSQL): 'CREATE TABLE foo\n(\n    id   INT,\n    name VARCHAR(5)\n);\nCREATE FUNCTION func(name VARCHAR(5)) RETURNS INT AS\n$$\nDECLARE\n    b INT;\nBEGIN\n      -- `name` is ambiguous as it is used as a column name and a parameter\n    SELECT COUNT(*) INTO b FROM foo t WHERE t.name = name;\n    RETURN b;\nEND;\n$$ LANGUAGE plpgsql;' In PostgreSQL, you can use the '#variable_conflict' directives to explicitly specify a correct reference. For example, use '#variable_conflict use_column' to refer to a column name, or '#variable_conflict use_variable' to refer to a parameter. 'CREATE TABLE foo\n(\n    id   INT,\n    name VARCHAR(5)\n);\nCREATE FUNCTION func(name VARCHAR(5)) RETURNS INT AS\n$$\n    #variable_conflict use_column\nDECLARE\n    b INT;\nBEGIN\n    SELECT COUNT(*) INTO b FROM foo t WHERE t.name = name;\n    RETURN b;\nEND;\n$$ LANGUAGE plpgsql;'",
                  "markdown": "Reports ambiguous references in SQL code.\n\nFor example, when a name refer to both a table column and a routine parameter. The execution of such code might lead to errors or unexpected\nresults due to counter-intuitive resolution logic. Usually, names with a more local scope have higher priority.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo\n    (\n        id   INT,\n        name VARCHAR(5)\n    );\n    CREATE FUNCTION func(name VARCHAR(5)) RETURNS INT AS\n    $$\n    DECLARE\n        b INT;\n    BEGIN\n          -- `name` is ambiguous as it is used as a column name and a parameter\n        SELECT COUNT(*) INTO b FROM foo t WHERE t.name = name;\n        RETURN b;\n    END;\n    $$ LANGUAGE plpgsql;\n\nIn PostgreSQL, you can use the `#variable_conflict` directives to explicitly specify a correct reference. For example,\nuse `#variable_conflict use_column` to refer to a column name, or `#variable_conflict use_variable` to refer to a\nparameter.\n\n    CREATE TABLE foo\n    (\n        id   INT,\n        name VARCHAR(5)\n    );\n    CREATE FUNCTION func(name VARCHAR(5)) RETURNS INT AS\n    $$\n        #variable_conflict use_column\n    DECLARE\n        b INT;\n    BEGIN\n        SELECT COUNT(*) INTO b FROM foo t WHERE t.name = name;\n        RETURN b;\n    END;\n    $$ LANGUAGE plpgsql;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlRedundantAliasInspection",
                "shortDescription": {
                  "text": "Redundant alias expressions"
                },
                "fullDescription": {
                  "text": "Reports alias expressions that duplicate names of columns in tables and might be redundant. Example (PostgreSQL): 'CREATE TABLE foo(a INT, b INT);\n\nSELECT * FROM foo foo(a, b);\nSELECT * FROM foo foo(a);\nSELECT * FROM foo foo(x);\nSELECT * FROM foo foo(x, y);' The first two aliases use the same column names as in the 'foo' table. They are considered redundant because they column names are identical.",
                  "markdown": "Reports alias expressions that duplicate names of columns in tables and might be redundant.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo(a INT, b INT);\n\n    SELECT * FROM foo foo(a, b);\n    SELECT * FROM foo foo(a);\n    SELECT * FROM foo foo(x);\n    SELECT * FROM foo foo(x, y);\n\nThe first two aliases use the same column names as in the `foo` table. They are considered redundant because they\ncolumn names are identical."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlUnusedCteInspection",
                "shortDescription": {
                  "text": "Unused common table expression"
                },
                "fullDescription": {
                  "text": "Reports unused common table expressions (CTE) inside the query. Example (PostgreSQL): 'CREATE TABLE foo(a INT);\n\nWITH a AS (SELECT 1 AS x FROM foo)\nSELECT 1 + 2 FROM foo;' By using WITH, we create a temporary named result set with the name 'a', also known as a common table expression (CTE). But we do not use this CTE later in the code. The unused CTE is greyed out.",
                  "markdown": "Reports unused common table expressions (CTE) inside the query.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo(a INT);\n\n    WITH a AS (SELECT 1 AS x FROM foo)\n    SELECT 1 + 2 FROM foo;\n\nBy using WITH, we create a temporary named result set with the name `a`, also known as a common table expression (CTE). But\nwe do not use this CTE later in the code. The unused CTE is greyed out."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MongoJSResolveInspection",
                "shortDescription": {
                  "text": "Resolution problems"
                },
                "fullDescription": {
                  "text": "Reports unresolved references in MongoDB and JavaScript code. Example: 'db\nuse foo\n  -- a reference to a non-existing collection\ndb.non_existing_collection\ndb['non_existing_collection']\ndb['non_existing_collection'].find().hasNext()' The 'non_existing_collection' collection does not exist in the database and will be reported.",
                  "markdown": "Reports unresolved references in MongoDB and JavaScript code.\n\nExample:\n\n    db\n    use foo\n      -- a reference to a non-existing collection\n    db.non_existing_collection\n    db['non_existing_collection']\n    db['non_existing_collection'].find().hasNext()\n\nThe `non_existing_collection` collection does not exist in the database and will be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MongoJS",
                      "index": 48,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlDialectInspection",
                "shortDescription": {
                  "text": "SQL dialect detection"
                },
                "fullDescription": {
                  "text": "Reports situations when a dialect is not assigned to an SQL file. For example, when you open a new SQL file without assigning a dialect to it, you see a notification where the best matching dialect is advised. Click the Use <dialect> link to use the advised dialect. Alternatively, click the Change dialect to link to select the other dialect.",
                  "markdown": "Reports situations when a dialect is not assigned to an SQL file.\n\nFor example, when you open a new SQL file without assigning a dialect\nto it, you see a notification where the best matching dialect is advised. Click the **Use \\<dialect\\>** link to use the advised\ndialect. Alternatively, click the **Change dialect to** link to select the other dialect."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MongoJSExtDeprecationInspection",
                "shortDescription": {
                  "text": "Deprecated element"
                },
                "fullDescription": {
                  "text": "Reports usages of deprecated methods in MongoDB and JavaScript code. The quick-fix replaces deprecated methods with recommended alternatives. Example: 'db.my_collection.insert()' After the quick-fix is applied: 'db.my_collection.insertOne()'",
                  "markdown": "Reports usages of deprecated methods in MongoDB and JavaScript code.\n\nThe quick-fix replaces deprecated methods with recommended alternatives.\n\nExample:\n\n\n      db.my_collection.insert()\n\nAfter the quick-fix is applied:\n\n\n      db.my_collection.insertOne()\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MongoJS",
                      "index": 48,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MongoJSDeprecationInspection",
                "shortDescription": {
                  "text": "Deprecated element"
                },
                "fullDescription": {
                  "text": "Reports usages of deprecated methods in MongoDB and JavaScript code. The quick-fix replaces deprecated methods with recommended alternatives. Example: 'db.my_collection.insert()' After the quick-fix is applied: 'db.my_collection.insertOne()'",
                  "markdown": "Reports usages of deprecated methods in MongoDB and JavaScript code.\n\nThe quick-fix replaces deprecated methods with recommended alternatives.\n\nExample:\n\n    db.my_collection.insert()\n\nAfter the quick-fix is applied:\n\n    db.my_collection.insertOne()\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MongoJS",
                      "index": 48,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MsBuiltinInspection",
                "shortDescription": {
                  "text": "Builtin functions"
                },
                "fullDescription": {
                  "text": "Reports truncations of string arguments in ISNULL functions. The ISNULL syntax is 'ISNULL(check_expression, replacement_value)'. According to ISNULL at docs.microsoft.com, 'replacement_value' will be truncated if 'replacement_value' is longer than 'check_expression'. Example (Microsoft SQL Server): 'DECLARE @name1 VARCHAR(2) = NULL;\nDECLARE @name2 VARCHAR(10) = 'Example';\nDECLARE @name3 VARCHAR(2) = 'Hi';\n\n  -- `@name2` is VARCHAR(10) and will be truncated\nSELECT ISNULL(@name1, @name2);\n\n  -- `@name3` is VARCHAR(2) as `@name1` and will not be truncated\nSELECT ISNULL(@name1, @name3);'",
                  "markdown": "Reports truncations of string arguments in ISNULL functions.\n\nThe ISNULL syntax is `ISNULL(check_expression, replacement_value)`.\n\nAccording to [ISNULL at\ndocs.microsoft.com](https://docs.microsoft.com/en-us/sql/t-sql/functions/isnull-transact-sql), `replacement_value` will be truncated if `replacement_value` is longer than\n`check_expression`.\n\nExample (Microsoft SQL Server):\n\n    DECLARE @name1 VARCHAR(2) = NULL;\n    DECLARE @name2 VARCHAR(10) = 'Example';\n    DECLARE @name3 VARCHAR(2) = 'Hi';\n\n      -- `@name2` is VARCHAR(10) and will be truncated\n    SELECT ISNULL(@name1, @name2);\n\n      -- `@name3` is VARCHAR(2) as `@name1` and will not be truncated\n    SELECT ISNULL(@name1, @name3);\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL server",
                      "index": 51,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlMultipleLimitClausesInspection",
                "shortDescription": {
                  "text": "Multiple row limiting/offset clauses in queries"
                },
                "fullDescription": {
                  "text": "Reports usages of multiple row limiting clauses in a single query. Example (Microsoft SQL Server): 'create table foo(a int);\nselect top 1 * from foo order by a offset 10 rows fetch next 20 rows only;' The SELECT TOP clause is used to specify that only 1 record must be returned. The FETCH clause specifies the number of rows to return after the OFFSET clause has been processed. But as we already have the SELECT TOP limiting clause, the FETCH clause might be redundant.",
                  "markdown": "Reports usages of multiple row limiting clauses in a single query.\n\nExample (Microsoft SQL Server):\n\n    create table foo(a int);\n    select top 1 * from foo order by a offset 10 rows fetch next 20 rows only;\n\nThe SELECT TOP clause is used to specify that only 1 record must be\nreturned. The FETCH clause specifies the number of rows to return after the OFFSET\nclause has been processed. But as we already have the SELECT TOP limiting clause, the FETCH clause might be redundant."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlAmbiguousColumnInspection",
                "shortDescription": {
                  "text": "Ambiguous reference"
                },
                "fullDescription": {
                  "text": "Reports columns that have identical names but belong to different tables. Example (MySQL): 'CREATE TABLE foo(id INT PRIMARY KEY);\nCREATE TABLE bar(id INT PRIMARY KEY);\n\nSELECT foo.id, bar.id FROM foo, bar WHERE id > 0;' The 'id' column appears in 'foo' and 'bar' tables. You need to qualify the column name to make the query correct. 'SELECT foo.id, bar.id FROM foo, bar WHERE foo.id > 0;'",
                  "markdown": "Reports columns that have identical names but belong to different tables.\n\nExample (MySQL):\n\n    CREATE TABLE foo(id INT PRIMARY KEY);\n    CREATE TABLE bar(id INT PRIMARY KEY);\n\n    SELECT foo.id, bar.id FROM foo, bar WHERE id > 0;\n\nThe `id` column appears in `foo` and `bar` tables. You need to qualify the column name to\nmake the query correct.\n\n    SELECT foo.id, bar.id FROM foo, bar WHERE foo.id > 0;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlNullComparisonInspection",
                "shortDescription": {
                  "text": "Null comparison"
                },
                "fullDescription": {
                  "text": "Reports comparisons with NULL that can be replaced with IS NULL or IS NOT NULL operators. Example (Microsoft SQL Server): 'CREATE TABLE foo ( id int );\n\nSELECT * FROM foo WHERE NULL = NULL;\nSELECT * FROM foo WHERE NULL != NULL;' The 'NULL = NULL' can be replaced with 'IS NULL', the 'NULL != NULL' comparison with 'IS NOT NULL'. To do this replacement, you can use Use IS NULL operator or Use IS NOT NULL operator quick-fixes. 'SELECT * FROM foo WHERE NULL IS NULL;\nSELECT * FROM foo WHERE NULL IS NOT NULL;'",
                  "markdown": "Reports comparisons with NULL that can be replaced with IS NULL or IS NOT NULL operators.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE foo ( id int );\n\n    SELECT * FROM foo WHERE NULL = NULL;\n    SELECT * FROM foo WHERE NULL != NULL;\n\nThe `NULL = NULL` can be replaced with `IS NULL`, the `NULL != NULL` comparison\nwith `IS NOT NULL`. To do this replacement, you can use **Use IS NULL operator** or **Use IS NOT NULL operator**\nquick-fixes.\n\n    SELECT * FROM foo WHERE NULL IS NULL;\n    SELECT * FROM foo WHERE NULL IS NOT NULL;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlInsertValuesInspection",
                "shortDescription": {
                  "text": "VALUES clause cardinality"
                },
                "fullDescription": {
                  "text": "Reports situations when a number of parameters in VALUES does not match a number of columns in a target table. Example (MySQL): 'CREATE TABLE foo(a INT, b INT, c INT);\n\nINSERT INTO foo VALUES (1,2,3,4)' The 'foo' table has three columns but in the INSERT INTO statement we pass four.",
                  "markdown": "Reports situations when a number of parameters in VALUES does not match a number of columns in a target table.\n\nExample (MySQL):\n\n    CREATE TABLE foo(a INT, b INT, c INT);\n\n    INSERT INTO foo VALUES (1,2,3,4)\n\nThe `foo` table has three columns but in the INSERT INTO statement we pass four."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlRedundantElseNullInspection",
                "shortDescription": {
                  "text": "Redundant ELSE NULL clause"
                },
                "fullDescription": {
                  "text": "Reports redundant ELSE NULL clauses. Example (MySQL): 'SELECT CASE WHEN 2 > 1 THEN 'OK' ELSE NULL END AS alias FROM foo;' The 'ELSE NULL' part will never be executed and may be omitted.",
                  "markdown": "Reports redundant ELSE NULL clauses.\n\nExample (MySQL):\n\n    SELECT CASE WHEN 2 > 1 THEN 'OK' ELSE NULL END AS alias FROM foo;\n\nThe `ELSE NULL` part will never be executed and may be omitted."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlCurrentSchemaInspection",
                "shortDescription": {
                  "text": "Current console schema introspected"
                },
                "fullDescription": {
                  "text": "Reports schemas and databases in the current session that are not introspected. For example, this warning might occur when you try to create a table in the schema that is not introspected. Introspection is a method of inspecting a data source. When you perform introspection, structural information in the data source is inspected to detect tables, columns, functions, and other elements with their attributes.",
                  "markdown": "Reports schemas and databases in the current session that are not introspected.\n\nFor example, this warning might occur when you try to create a table in the schema that is not introspected.\n\nIntrospection is a method of inspecting a data source. When you perform introspection, structural information in the data source is\ninspected to detect tables, columns, functions, and other elements with their attributes."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlInsertNullIntoNotNullInspection",
                "shortDescription": {
                  "text": "Insert NULL into NOT NULL column"
                },
                "fullDescription": {
                  "text": "Reports cases when you insert NULL values into columns that accept only NOT NULL values. Example (Microsoft SQL Server): 'CREATE TABLE br2 (\nid INT NOT NULL,\ncol1 NVARCHAR (20) NOT NULL,\ncol2 NVARCHAR (20) NOT NULL,\n);\n--\nINSERT INTO br2 (id, col1, col2)\nVALUES (1, NULL, NULL);' You cannot insert NULL values in 'col1' and 'col2' because they are defined as NOT NULL. If you run the script as is, you will receive an error. To fix this code, replace NULL in the VALUES part with some values (for example, '42' and ''bird''). INSERT INTO br2 (id, col1, col2)\nVALUES (1, 42, 'bird');",
                  "markdown": "Reports cases when you insert NULL values into columns that accept only NOT NULL values.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE br2 (\n    id INT NOT NULL,\n    col1 NVARCHAR (20) NOT NULL,\n    col2 NVARCHAR (20) NOT NULL,\n    );\n    --\n    INSERT INTO br2 (id, col1, col2)\n    VALUES (1, NULL, NULL);\n\nYou cannot insert NULL values in `col1` and `col2` because they are defined as NOT NULL. If you run the script as\nis,\nyou will receive an error. To fix this code, replace NULL in the VALUES part with some values (for example, `42` and\n`'bird'`).\n\n```\nINSERT INTO br2 (id, col1, col2)\nVALUES (1, 42, 'bird');\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlTriggerTransitionInspection",
                "shortDescription": {
                  "text": "Suspicious code in triggers"
                },
                "fullDescription": {
                  "text": "Reports incorrect usages of transition table variables in triggers. Example (HSQLDB): 'CREATE TABLE foo(a INT);\n\nCREATE TRIGGER trg\n AFTER DELETE ON foo\nBEGIN\n   SELECT * FROM NEW;\nEND;\n\nCREATE TRIGGER trig AFTER INSERT ON foo\n   REFERENCING OLD ROW AS newrow\n   FOR EACH ROW WHEN (a > 1)\n   INSERT INTO foo VALUES (1)' In HSQLDB, DELETE triggers may be used only with the OLD state while INSERT triggers may have only the NEW state. So, in the previous example, NEW in 'SELECT * FROM NEW;' will be highlighted as well as OLD in 'REFERENCING OLD ROW AS newrow'.",
                  "markdown": "Reports incorrect usages of transition table variables in triggers.\n\nExample (HSQLDB):\n\n    CREATE TABLE foo(a INT);\n\n    CREATE TRIGGER trg\n     AFTER DELETE ON foo\n    BEGIN\n       SELECT * FROM NEW;\n    END;\n\n    CREATE TRIGGER trig AFTER INSERT ON foo\n       REFERENCING OLD ROW AS newrow\n       FOR EACH ROW WHEN (a > 1)\n       INSERT INTO foo VALUES (1)\n\nIn HSQLDB, DELETE triggers may be used only with the OLD state while INSERT triggers may have only the NEW state. So, in the previous\nexample, NEW in `SELECT * FROM NEW;` will be highlighted as well as OLD in `REFERENCING OLD ROW AS newrow`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlNamedArgumentsInspection",
                "shortDescription": {
                  "text": "Named arguments should be used"
                },
                "fullDescription": {
                  "text": "Reports arguments that are used without names in routine calls. By default, this inspection is disabled. For more information about the difference between named and unnamed parameters, see Binding Parameters by Name (Named Parameters) at docs.microsoft.com . Example (Microsoft SQL Server): 'CREATE FUNCTION foo(n INT, m INT) RETURNS INT AS\nBEGIN\n    RETURN n + m;\nEND;\n\nCREATE PROCEDURE test AS\nBEGIN\n    foo n = 1, m = 2;\n\n--- The following call misses parameter names and will be highlighted\n    foo 1, 2;\nEND;' Parameters '1, 2' in the 'foo 1, 2;' call are highlighted because they miss names.",
                  "markdown": "Reports arguments that are used without names in routine calls. By default, this inspection is disabled.\n\nFor more information about the difference between named and unnamed parameters, see [Binding Parameters by Name (Named Parameters) at docs.microsoft.com](https://docs.microsoft.com/en-us/sql/odbc/reference/develop-app/binding-parameters-by-name-named-parameters).\n\nExample (Microsoft SQL Server):\n\n    CREATE FUNCTION foo(n INT, m INT) RETURNS INT AS\n    BEGIN\n        RETURN n + m;\n    END;\n\n    CREATE PROCEDURE test AS\n    BEGIN\n        foo n = 1, m = 2;\n\n    --- The following call misses parameter names and will be highlighted\n        foo 1, 2;\n    END;\n\nParameters `1, 2` in the `foo 1, 2;` call are highlighted because they miss names."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlTransactionStatementInTriggerInspection",
                "shortDescription": {
                  "text": "Use of transaction management statements in triggers"
                },
                "fullDescription": {
                  "text": "Reports usages of transaction management statements like COMMIT or ROLLBACK in trigger bodies. With COMMIT or ROLLBACK statements in a trigger body, the trigger will not compile. The fail happens because triggers start during transactions. When the trigger starts the current transaction is still not complete. As COMMIT terminates a transaction, both statements (COMMIT and ROLLBACK) would lead to an exception. Changes that are executed in a trigger should be committed (or rolled back) by the owning transaction that started the trigger. Example (Oracle): 'CREATE TABLE employee_audit\n(\n    id          INT  NOT NULL,\n    update_date DATE NOT NULL,\n    old_name    VARCHAR2(100),\n    new_name    VARCHAR2(100)\n);\n\nCREATE TABLE employees\n(\n    id   INT           NOT NULL,\n    name VARCHAR2(100) NOT NULL\n);\n\nCREATE OR REPLACE TRIGGER trig_commit\n    AFTER UPDATE OF name\n    ON employees\n    FOR EACH ROW\nBEGIN\n    INSERT INTO employee_audit VALUES (:old.id, SYSDATE, :old.name, :new.name);\n    COMMIT;\nEND;\n\nCREATE OR REPLACE TRIGGER trig_rollback\n    AFTER UPDATE OF name\n    ON employees\n    FOR EACH ROW\nBEGIN\n    INSERT INTO employee_audit VALUES (:old.id, SYSDATE, :old.name, :new.name);\n    ROLLBACK;\nEND;'",
                  "markdown": "Reports usages of transaction management statements like COMMIT or ROLLBACK in trigger bodies.\n\nWith COMMIT or ROLLBACK statements in a trigger body, the trigger will not compile.\nThe fail happens because triggers start during transactions. When the trigger starts the current transaction is still not complete. As\nCOMMIT\nterminates a transaction, both statements (COMMIT and ROLLBACK) would lead to an exception.\nChanges that are executed in a trigger should be committed (or rolled back) by the owning transaction that started the trigger.\n\nExample (Oracle):\n\n    CREATE TABLE employee_audit\n    (\n        id          INT  NOT NULL,\n        update_date DATE NOT NULL,\n        old_name    VARCHAR2(100),\n        new_name    VARCHAR2(100)\n    );\n\n    CREATE TABLE employees\n    (\n        id   INT           NOT NULL,\n        name VARCHAR2(100) NOT NULL\n    );\n\n    CREATE OR REPLACE TRIGGER trig_commit\n        AFTER UPDATE OF name\n        ON employees\n        FOR EACH ROW\n    BEGIN\n        INSERT INTO employee_audit VALUES (:old.id, SYSDATE, :old.name, :new.name);\n        COMMIT;\n    END;\n\n    CREATE OR REPLACE TRIGGER trig_rollback\n        AFTER UPDATE OF name\n        ON employees\n        FOR EACH ROW\n    BEGIN\n        INSERT INTO employee_audit VALUES (:old.id, SYSDATE, :old.name, :new.name);\n        ROLLBACK;\n    END;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OraMissingBodyInspection",
                "shortDescription": {
                  "text": "Missing body for package/object type specification"
                },
                "fullDescription": {
                  "text": "Reports package and object type specifications that are missing body declarations. Package specifications and object types that declare routines as well as package specifications with cursors must have body declarations where those routines and cursors are implemented. Absence of a body leads to a runtime error when routines or cursors are invoked in program code. Example (Oracle): 'CREATE OR REPLACE PACKAGE ppp IS\n    FUNCTION foo(a INT) RETURN INT;\nEND;'",
                  "markdown": "Reports package and object type specifications that are missing body declarations.\n\nPackage specifications and object types that declare routines as well as package specifications with cursors must have body\ndeclarations where those routines and cursors are implemented. Absence of a body leads to a runtime error when routines or cursors are\ninvoked in program code.\n\nExample (Oracle):\n\n    CREATE OR REPLACE PACKAGE ppp IS\n        FUNCTION foo(a INT) RETURN INT;\n    END;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Oracle",
                      "index": 65,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlCheckUsingColumnsInspection",
                "shortDescription": {
                  "text": "Check using clause columns"
                },
                "fullDescription": {
                  "text": "Reports columns in the USING clause that does not exist in both tables. Example (MySQL): 'CREATE TABLE t1 (i INT, j INT);\nCREATE TABLE t2 (k INT, l INT);\nSELECT * FROM t1 JOIN t2 USING (j);' In USING clauses, a column name must be present in both tables, and the SELECT query will automatically join those tables by using the given column name. As we do not have the 'j' column in 't2', we can rewrite the query using ON. The ON clause can join tables where the column names do not match in both tables. 'SELECT * FROM t1 JOIN t2 ON t1.j = t2.l;'",
                  "markdown": "Reports columns in the USING clause that does not exist in both tables.\n\nExample (MySQL):\n\n    CREATE TABLE t1 (i INT, j INT);\n    CREATE TABLE t2 (k INT, l INT);\n    SELECT * FROM t1 JOIN t2 USING (j);\n\nIn USING clauses, a column name must be present in both tables, and the SELECT query will automatically join\nthose tables by using the given column name. As we do not have the `j` column in `t2`, we can\nrewrite the query using ON. The ON clause can join tables where the column names do not match in both tables.\n\n    SELECT * FROM t1 JOIN t2 ON t1.j = t2.l;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlConstantConditionInspection",
                "shortDescription": {
                  "text": "Constant condition"
                },
                "fullDescription": {
                  "text": "Reports conditions in WHERE or JOIN clauses that are always TRUE or always FALSE. Example (MySQL): 'CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\nSELECT a FROM t1 WHERE 'Cat' = 'Cat';' The ''Cat' = 'Cat'' is always true and will be reported.",
                  "markdown": "Reports conditions in WHERE or JOIN clauses that are always TRUE or always FALSE.\n\nExample (MySQL):\n\n    CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\n    SELECT a FROM t1 WHERE 'Cat' = 'Cat';\n\nThe `'Cat' = 'Cat'` is always true and will be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlInsertIntoGeneratedColumnInspection",
                "shortDescription": {
                  "text": "Insertion into generated columns"
                },
                "fullDescription": {
                  "text": "Reports INSERT statements that assign values to generated columns. Generated columns can be read, but their values can not be directly written. Example (PostgreSQL): 'CREATE TABLE foo\n(\n   col1 INT,\n   col2 INT GENERATED ALWAYS AS (col1 + 1) STORED\n);\nINSERT INTO foo(col1, col2) VALUES (1, 2);'\n You cannot insert '2' into the 'col2' column because this column is generated. For this script to work, you can change '2' to DEFAULT. 'INSERT INTO foo(col1, col2) VALUES (1, DEFAULT);'",
                  "markdown": "Reports INSERT statements that assign values to generated columns. Generated columns can be read, but their values can not be directly written.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo\n    (\n       col1 INT,\n       col2 INT GENERATED ALWAYS AS (col1 + 1) STORED\n    );\n    INSERT INTO foo(col1, col2) VALUES (1, 2);\n\nYou cannot insert `2` into the `col2` column because this column is generated.\nFor this script to work, you can change `2` to DEFAULT.\n`INSERT INTO foo(col1, col2) VALUES (1, DEFAULT);`"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MsOrderByInspection",
                "shortDescription": {
                  "text": "ORDER BY in queries"
                },
                "fullDescription": {
                  "text": "Reports usages when the 'ORDER BY' clause is used without 'TOP', 'OFFSET', or 'FOR XML' in views, inline functions, derived tables, subqueries, and common table expressions. For more information about usages of 'ORDER BY', see SELECT - ORDER BY Clause (Transact-SQL) at docs.microsoft.com. Example (Microsoft SQL server): 'CREATE TABLE foo (a INT NOT NULL, b  INT NOT NULL);\n\nSELECT *\nFROM (SELECT a, b\nFROM foo A\nWHERE a < 89\nORDER BY b) ALIAS;' In a subquery, ORDER BY will be highlighted as an error. You can add TOP, OFFSET, or FOR XML to a subquery. Alternatively, use the Delete element quick-fix to delete the ORDER BY section. After the quick-fix is applied: 'SELECT *\nFROM (SELECT a, b\nFROM foo A\nWHERE a < 89) ALIAS;'",
                  "markdown": "Reports usages when the `ORDER BY` clause is used without `TOP`, `OFFSET`, or `FOR XML` in views, inline functions, derived tables, subqueries, and common table expressions.\n\nFor more information about usages of `ORDER BY`, see [SELECT - ORDER BY Clause (Transact-SQL) at\ndocs.microsoft.com](https://docs.microsoft.com/en-us/sql/t-sql/queries/select-order-by-clause-transact-sql).\n\nExample (Microsoft SQL server):\n\n    CREATE TABLE foo (a INT NOT NULL, b  INT NOT NULL);\n\n    SELECT *\n    FROM (SELECT a, b\n    FROM foo A\n    WHERE a < 89\n    ORDER BY b) ALIAS;\n\nIn a subquery, ORDER BY will be highlighted as an error. You can add TOP, OFFSET, or FOR XML to a subquery.\nAlternatively, use the **Delete element** quick-fix to delete the ORDER BY section.\n\nAfter the quick-fix is applied:\n\n    SELECT *\n    FROM (SELECT a, b\n    FROM foo A\n    WHERE a < 89) ALIAS;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL server",
                      "index": 51,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlDeprecateTypeInspection",
                "shortDescription": {
                  "text": "Deprecated type"
                },
                "fullDescription": {
                  "text": "Reports usages of types that are deprecated and might disappear in future versions of DBMS. Reported types: LONG in Oracle (see Deprecated and Desupported Features at docs.oracle.com). TEXT, NTEXT, and IMAGE in Microsoft SQL Server (see Deprecated Database Engine Features in SQL Server 2016 at docs.microsoft.com). Example (Oracle): 'CREATE TABLE ot.foo(\na NUMBER GENERATED BY DEFAULT AS IDENTITY,\nb LONG NOT NULL\n);'",
                  "markdown": "Reports usages of types that are deprecated and might disappear in future versions of DBMS.\n\nReported types:\n\n* LONG in Oracle (see [Deprecated\n  and Desupported Features at docs.oracle.com](https://docs.oracle.com/cd/A91202_01/901_doc/server.901/a90120/ch4_dep.htm#6690)).\n* TEXT, NTEXT, and IMAGE in Microsoft SQL Server (see [Deprecated Database Engine Features in SQL Server 2016 at docs.microsoft.com](https://docs.microsoft.com/en-us/sql/database-engine/deprecated-database-engine-features-in-sql-server-2016?view=sql-server-ver15)).\n\nExample (Oracle):\n\n    CREATE TABLE ot.foo(\n    a NUMBER GENERATED BY DEFAULT AS IDENTITY,\n    b LONG NOT NULL\n    );\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlGotoInspection",
                "shortDescription": {
                  "text": "Usages of GOTO statements"
                },
                "fullDescription": {
                  "text": "Reports usages of backward GOTO statements and GOTO statements used to exit a loop. The extensive use of GOTO statements is generally not recommended. For details, see GOTO statement in SQL procedures at ibm.com. Instead of jumping back to a previous statement using GOTO, consider using a loop. Instead of exiting the WHILE loop with GOTO, consider using other control-of-flow statements (for example, RETURN or BREAK). Example (Oracle): 'CREATE PROCEDURE test(n INT) AS\nDECLARE\n    x INT;\nBEGIN\n    x := 0;\n    GOTO a;\n    <<a>> x := 1;\n    IF (n = 0) THEN\n        GOTO a;\n    END IF;\n    WHILE TRUE\n        LOOP\n            GOTO b;\n        END LOOP;\n    <<b>> x := 3;\nEND;'",
                  "markdown": "Reports usages of backward GOTO statements and GOTO statements used to exit a loop.\n\nThe extensive use of GOTO statements is generally\nnot recommended. For details, see [GOTO statement in\nSQL\nprocedures at ibm.com](https://www.ibm.com/docs/no/db2/11.5?topic=procedures-goto-statement-in-sql).\n\nInstead of jumping back to a previous statement using GOTO, consider using a loop.\n\nInstead of exiting the WHILE loop with GOTO, consider using other control-of-flow statements (for example, RETURN or BREAK).\n\nExample (Oracle):\n\n    CREATE PROCEDURE test(n INT) AS\n    DECLARE\n        x INT;\n    BEGIN\n        x := 0;\n        GOTO a;\n        <<a>> x := 1;\n        IF (n = 0) THEN\n            GOTO a;\n        END IF;\n        WHILE TRUE\n            LOOP\n                GOTO b;\n            END LOOP;\n        <<b>> x := 3;\n    END;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MysqlLoadDataPathInspection",
                "shortDescription": {
                  "text": "LOAD statement path"
                },
                "fullDescription": {
                  "text": "Reports paths that start with the tilde character in LOAD statements. Example (MySQL): 'CREATE TABLE table_name (id int);\nLOAD DATA LOCAL INFILE '~/Documents/some_file.txt'\nINTO TABLE table_name FIELDS TERMINATED BY ',' LINES TERMINATED BY '\\n'\nIGNORE 1 LINES;' Instead of the tilde character, use a full path to the file.",
                  "markdown": "Reports paths that start with the tilde character in LOAD statements.\n\nExample (MySQL):\n\n    CREATE TABLE table_name (id int);\n    LOAD DATA LOCAL INFILE '~/Documents/some_file.txt'\n    INTO TABLE table_name FIELDS TERMINATED BY ',' LINES TERMINATED BY '\\n'\n    IGNORE 1 LINES;\n\nInstead of the tilde character, use a full path to the file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MySQL",
                      "index": 72,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlDtInspection",
                "shortDescription": {
                  "text": "Ill-formed date/time literals"
                },
                "fullDescription": {
                  "text": "Reports errors in date and time literals. This inspection is available in MySQL, Oracle, Db2, and H2. Example (MySQL): 'SELECT TIME '10 -12:13:14' FROM dual;\nSELECT TIME ' 12 : 13 : 14 ' FROM dual;\nSELECT TIME '12 13 14' FROM dual;\nSELECT TIME '12-13-14' FROM dual;\nSELECT TIME '12.13.14' FROM dual;\nSELECT TIME '12:13:' FROM dual;\nSELECT TIME '12:13' FROM dual;\nSELECT TIME '12:' FROM dual;' In this example, dates ignore the MySQL standard for date and time literals. Therefore, they will be highlighted. For more information about date and time literals in MySQL, see Date and Time Literals at dev.mysql.com. The following date and type literals are valid for MySQL. 'SELECT TIME '12:13:14' FROM dual;\nSELECT TIME '12:13:14.555' FROM dual;\nSELECT TIME '12:13:14.' FROM dual;\nSELECT TIME '-12:13:14' FROM dual;\nSELECT TIME '10 12:13:14' FROM dual;\nSELECT TIME '-10 12:13:14' FROM dual;'",
                  "markdown": "Reports errors in date and time literals. This inspection is available in MySQL, Oracle, Db2, and H2.\n\nExample (MySQL):\n\n    SELECT TIME '10 -12:13:14' FROM dual;\n    SELECT TIME ' 12 : 13 : 14 ' FROM dual;\n    SELECT TIME '12 13 14' FROM dual;\n    SELECT TIME '12-13-14' FROM dual;\n    SELECT TIME '12.13.14' FROM dual;\n    SELECT TIME '12:13:' FROM dual;\n    SELECT TIME '12:13' FROM dual;\n    SELECT TIME '12:' FROM dual;\n\nIn this example, dates ignore the MySQL standard for date and time literals. Therefore, they will be highlighted.\nFor more information about date and time literals in MySQL, see [Date and Time Literals at dev.mysql.com](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-literals.html).\n\nThe following date and type literals are valid for MySQL.\n\n    SELECT TIME '12:13:14' FROM dual;\n    SELECT TIME '12:13:14.555' FROM dual;\n    SELECT TIME '12:13:14.' FROM dual;\n    SELECT TIME '-12:13:14' FROM dual;\n    SELECT TIME '10 12:13:14' FROM dual;\n    SELECT TIME '-10 12:13:14' FROM dual;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlNoDataSourceInspection",
                "shortDescription": {
                  "text": "No data sources configured"
                },
                "fullDescription": {
                  "text": "Reports the absence of data sources in the Database tool window (View | Tool Windows | Database).",
                  "markdown": "Reports the absence of data sources in the **Database** tool window (**View \\| Tool Windows \\| Database**)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlConstantExpressionInspection",
                "shortDescription": {
                  "text": "Constant expression"
                },
                "fullDescription": {
                  "text": "Reports conditions and expressions that are always true, false or null. Example (MySQL): 'CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\nSELECT a FROM t1 WHERE 'Cat' = 'Cat';\nSELECT a FROM t1 WHERE 'Cat' = null;' The ''Cat' = 'Cat'' is always true and will be reported. The ''Cat' = null' is always null and will be reported.",
                  "markdown": "Reports conditions and expressions that are always true, false or null.\n\nExample (MySQL):\n\n    CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\n    SELECT a FROM t1 WHERE 'Cat' = 'Cat';\n    SELECT a FROM t1 WHERE 'Cat' = null;\n\nThe `'Cat' = 'Cat'` is always true and will be reported.\n\nThe `'Cat' = null` is always null and will be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OraUnmatchedForwardDeclarationInspection",
                "shortDescription": {
                  "text": "Forward declaration without definition"
                },
                "fullDescription": {
                  "text": "Reports declarations of procedures and functions that are missing their implementation in code. In Oracle, you can declare a procedure or a function without its body, and write the implementation later. The inspection will report names of such procedures or functions that are left without implementation. Example (Oracle): 'DECLARE PROCEDURE foo(a int, b varchar2);\nBEGIN\n    NULL;\nEND;' The 'foo' procedure is declared but is missing implementation. We can add the implementation to get rid of the error. 'DECLARE PROCEDURE foo(a int, b varchar2);\n  PROCEDURE foo(a int, b varchar2) IS\nBEGIN\n    NULL;\nEND;\nBEGIN\n    NULL;\nEND;'",
                  "markdown": "Reports declarations of procedures and functions that are missing their implementation in code.\n\nIn Oracle, you can declare a procedure or a function without its body, and write the implementation later. The inspection will report names\nof such procedures or functions that are left without implementation.\n\nExample (Oracle):\n\n    DECLARE PROCEDURE foo(a int, b varchar2);\n    BEGIN\n        NULL;\n    END;\n\nThe `foo` procedure is declared but is missing implementation. We can add the implementation to get rid of the error.\n\n    DECLARE PROCEDURE foo(a int, b varchar2);\n      PROCEDURE foo(a int, b varchar2) IS\n    BEGIN\n        NULL;\n    END;\n    BEGIN\n        NULL;\n    END;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Oracle",
                      "index": 65,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlWithoutWhereInspection",
                "shortDescription": {
                  "text": "Delete or update statement without where clauses"
                },
                "fullDescription": {
                  "text": "Reports usages of DELETE or UPDATE statements without WHERE clauses. Without WHERE clauses, DELETE drops all the data from the table, and UPDATE overwrites values for all the table rows. Example (MySQL): 'CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\nupdate t1 set  a = 'Smith';\ndelete from t1;'",
                  "markdown": "Reports usages of DELETE or UPDATE statements without WHERE clauses.\n\nWithout WHERE clauses, DELETE drops all the data from the table, and UPDATE overwrites values for all the table rows.\n\nExample (MySQL):\n\n    CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\n    update t1 set  a = 'Smith';\n    delete from t1;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MongoJSSideEffectsInspection",
                "shortDescription": {
                  "text": "Statement with side effects"
                },
                "fullDescription": {
                  "text": "Reports statements that can cause side effects while the data source is in read-only mode. For more information about enabling read-only mode, see Enable read-only mode for a connection in the IDE documentation. The Disable read-only mode quick-fix turns off the read-only mode for the respective data source. Example: 'db.my_collection.insertOne()'",
                  "markdown": "Reports statements that can cause side effects while the data source is in read-only mode.\n\nFor more information about enabling read-only mode, see\n[Enable\nread-only mode for a connection in the IDE documentation](https://www.jetbrains.com/help/datagrip/configuring-database-connections.html#enable-read-only-mode-for-a-connection).\n\nThe **Disable read-only mode** quick-fix turns off the read-only mode for the respective data source.\n\nExample:\n\n\n    db.my_collection.insertOne()\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MongoJS",
                      "index": 48,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MongoJSExtSideEffectsInspection",
                "shortDescription": {
                  "text": "Statement with side effects"
                },
                "fullDescription": {
                  "text": "Reports statements that may cause side effects while the data source is in read-only mode. The quick-fix turns off the read-only mode for the respective data source. Example: 'db.my_collection.insertOne()'",
                  "markdown": "Reports statements that may cause side effects while the data source is in read-only mode.\n\nThe quick-fix turns off the read-only mode for the respective data source.\n\nExample:\n\n\n    db.my_collection.insertOne()\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MongoJS",
                      "index": 48,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlUnusedSubqueryItemInspection",
                "shortDescription": {
                  "text": "Unused subquery item"
                },
                "fullDescription": {
                  "text": "Reports columns, aliases, and other subquery items that are not referenced in the outer query expression. Example (PostgreSQL): 'CREATE TABLE for_subquery(id INT);\nSELECT a, q FROM (SELECT 1 AS a, 10 AS b, 2 + 3 AS q, id\n      FROM for_subquery) x;' We reference 'a' and 'q' aliases from a subquery. But the 'b' alias and the 'id' column are not referenced in the outer SELECT statement. Therefore, 'b' and 'id' are grayed out.",
                  "markdown": "Reports columns, aliases, and other subquery items that are not referenced in the outer query expression.\n\nExample (PostgreSQL):\n\n    CREATE TABLE for_subquery(id INT);\n    SELECT a, q FROM (SELECT 1 AS a, 10 AS b, 2 + 3 AS q, id\n          FROM for_subquery) x;\n\nWe reference `a` and `q` aliases from a subquery. But the `b` alias and the `id` column are\nnot referenced in the outer SELECT statement. Therefore, `b` and `id` are grayed out."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlSideEffectsInspection",
                "shortDescription": {
                  "text": "Statement with side effects"
                },
                "fullDescription": {
                  "text": "Reports statements that might lead to modification of a database during a read-only connection. To enable read-only mode for a connection, right-click a data source in the Database tool window (View | Tool Windows | Database) and select Properties. In the Data Sources and Drivers dialog, click the Options tab and select the Read-only checkbox. Example (MySQL): 'CREATE TABLE foo(a INT);\nINSERT INTO foo VALUES (1);' As 'CREATE TABLE' and 'INSERT INTO' statements lead to a database modification, these statements will be highlighted in read-only connection mode.",
                  "markdown": "Reports statements that might lead to modification of a database during a read-only connection.\n\nTo enable read-only mode for a\nconnection,\nright-click a data source in the **Database** tool window (**View \\| Tool Windows \\| Database** ) and select **Properties** .\nIn the **Data Sources and Drivers** dialog, click the **Options** tab and select the **Read-only** checkbox.\n\nExample (MySQL):\n\n    CREATE TABLE foo(a INT);\n    INSERT INTO foo VALUES (1);\n\nAs `CREATE TABLE` and `INSERT INTO` statements lead to a database modification, these statements will be highlighted\nin read-only connection mode."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlJoinWithoutOnInspection",
                "shortDescription": {
                  "text": "Unsafe 'join' clause in 'delete' statement"
                },
                "fullDescription": {
                  "text": "Reports missing conditional checks for statements that might modify the whole database. For example, usages of JOIN clauses inside DELETE statements without ON or WHERE. Without conditional checks on JOIN, DELETE drops contents of the entire table. Example (MySQL): 'CREATE TABLE foo (a INT,b INT,c INT);\nCREATE TABLE bar (a INT,b INT,c INT);\n\nDELETE table1 FROM foo table1  INNER JOIN bar table2;'",
                  "markdown": "Reports missing conditional checks for statements that might modify the whole database.\n\nFor example, usages of JOIN clauses inside DELETE statements without ON or WHERE. Without conditional checks on JOIN, DELETE drops\ncontents of the entire table.\n\nExample (MySQL):\n\n    CREATE TABLE foo (a INT,b INT,c INT);\n    CREATE TABLE bar (a INT,b INT,c INT);\n\n    DELETE table1 FROM foo table1  INNER JOIN bar table2;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlDropIndexedColumnInspection",
                "shortDescription": {
                  "text": "Index is dependent on column"
                },
                "fullDescription": {
                  "text": "Reports cases when you try to drop columns from indexed tables. This inspection is available in Microsoft SQL Server and Sybase ASE. Example (Microsoft SQL Server): 'CREATE TABLE test_index\n(\ncol  INT NOT NULL,\ncol2 INT NOT NULL,\ncol3 INT NOT NULL UNIQUE,\ncol4 VARCHAR(200)\n);\n\nCREATE UNIQUE INDEX aaaa ON test_index (col, col2);\n\nALTER TABLE test_index\nDROP COLUMN col;' You cannot delete the 'col' column because it is in the indexed table. To delete the column, you need to delete the 'aaaa' index first (for example, DROP INDEX aaaa).",
                  "markdown": "Reports cases when you try to drop columns from indexed tables. This inspection is available in Microsoft SQL Server and Sybase ASE.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE test_index\n    (\n    col  INT NOT NULL,\n    col2 INT NOT NULL,\n    col3 INT NOT NULL UNIQUE,\n    col4 VARCHAR(200)\n    );\n\n    CREATE UNIQUE INDEX aaaa ON test_index (col, col2);\n\n    ALTER TABLE test_index\n    DROP COLUMN col;\n\nYou cannot delete the `col` column because it is in the indexed table. To delete the column, you need to delete the\n`aaaa` index first (for example, DROP INDEX aaaa)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlTypeInspection",
                "shortDescription": {
                  "text": "Types compatibility"
                },
                "fullDescription": {
                  "text": "Reports type-related errors.",
                  "markdown": "Reports type-related errors."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlUnicodeStringLiteralInspection",
                "shortDescription": {
                  "text": "Unicode usage in SQL"
                },
                "fullDescription": {
                  "text": "Reports string literals that use national characters without the 'N' prefix. Without the N prefix, the string is converted to the default code page of the database. This default code page may not recognize certain characters. For more information, see nchar and nvarchar (Transact-SQL) at docs.microsoft.com. Example (Microsoft SQL Server): 'SELECT 'abcde' AS a;\nSELECT N'abcde' AS b;\nSELECT 'абвгд' AS c;\nSELECT N'абвгд' AS d;' The 'SELECT 'абвгд' AS c;' does not have the 'N' prefix, the ''абвгд'' part will be highlighted.",
                  "markdown": "Reports string literals that use national characters without the `N` prefix.\n\nWithout the N prefix, the string is converted to the default\ncode page of the database. This default code page may not recognize certain characters. For more information, see\n[nchar and nvarchar\n(Transact-SQL)\nat docs.microsoft.com](https://docs.microsoft.com/en-us/sql/t-sql/data-types/nchar-and-nvarchar-transact-sql).\n\nExample (Microsoft SQL Server):\n\n    SELECT 'abcde' AS a;\n    SELECT N'abcde' AS b;\n    SELECT 'абвгд' AS c;\n    SELECT N'абвгд' AS d;\n\nThe `SELECT 'абвгд' AS c;` does not have the `N` prefix, the `'абвгд'` part will be highlighted."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlUnusedVariableInspection",
                "shortDescription": {
                  "text": "Unused variable"
                },
                "fullDescription": {
                  "text": "Reports unused arguments, variables, or parameters. Example (PostgreSQL): 'CREATE FUNCTION foo(PARAMUSED INT, PARAMUNUSED INT) RETURNS INT AS\n$$\nBEGIN\n    RETURN PARAMUSED;\nEND\n$$ LANGUAGE plpgsql;' The 'PARAMUNUSED' parameter is not used in the function and might be deleted.",
                  "markdown": "Reports unused arguments, variables, or parameters.\n\nExample (PostgreSQL):\n\n    CREATE FUNCTION foo(PARAMUSED INT, PARAMUNUSED INT) RETURNS INT AS\n    $$\n    BEGIN\n        RETURN PARAMUSED;\n    END\n    $$ LANGUAGE plpgsql;\n\nThe `PARAMUNUSED` parameter is not used in the function and might be deleted."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PgSelectFromProcedureInspection",
                "shortDescription": {
                  "text": "Postgres: Select from procedure call"
                },
                "fullDescription": {
                  "text": "Reports situations when you make SELECT from a function or a DBLINK without an alias with a type (for example, 'AS t1(s VARCHAR)'). This requirement does not apply to scalar functions. Example (PostgreSQL): 'CREATE FUNCTION produce_a_table() RETURNS RECORD AS $$\nSELECT 1;\n$$ LANGUAGE sql;\nSELECT * FROM produce_a_table() AS s (c1 INT);\nSELECT * FROM produce_a_table() AS s (c1);\nSELECT * FROM DBLINK('dbname=mydb', 'SELECT proname, prosrc FROM pg_proc') AS t1;' The 'AS s (c1 INT)' has a typed alias, while 'AS s (c1)' and 'AS t1' do not. In this case, the second call of 'produce_a_table()' and 'DBLINK()' will be highlighted.",
                  "markdown": "Reports situations when you make SELECT from a function or a DBLINK without an alias with a type (for example, `AS t1(s VARCHAR)`).\n\nThis requirement does not apply to scalar functions.\n\nExample (PostgreSQL):\n\n    CREATE FUNCTION produce_a_table() RETURNS RECORD AS $$\n    SELECT 1;\n    $$ LANGUAGE sql;\n    SELECT * FROM produce_a_table() AS s (c1 INT);\n    SELECT * FROM produce_a_table() AS s (c1);\n    SELECT * FROM DBLINK('dbname=mydb', 'SELECT proname, prosrc FROM pg_proc') AS t1;\n\nThe `AS s (c1 INT)` has a typed alias, while `AS s (c1)` and `AS t1` do not.\nIn this case, the second call of `produce_a_table()` and `DBLINK()` will be highlighted."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "PostgreSQL",
                      "index": 78,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlStorageInspection",
                "shortDescription": {
                  "text": "SQL source modification detection"
                },
                "fullDescription": {
                  "text": "Reports situations when source code of a database object has been changed. The inspection is triggered when you perform database or object introspection. The introspection is run when you open source code of an object, run statements, and perform code refactoring. Also, you can run introspection by right-clicking an object and selecting Refresh. The inspection covers the following situations: Object source code was changed in the database but code in the editor was not updated. Works in PostgreSQL, Microsoft SQL Server, Oracle, and Sybase ASE. You changed the object source code, introspected the database, but source code has been already changed by someone else. The database introspector was updated in the IDE and you need to download new object properties that were missing in the previous introspector version.",
                  "markdown": "Reports situations when source code of a database object has been changed.\n\nThe inspection is triggered when you perform database or object introspection. The introspection is run when you open source code of an\nobject, run statements, and perform code refactoring.\nAlso, you can run introspection by right-clicking an object and selecting **Refresh**.\n\nThe inspection covers the following situations:\n\n* Object source code was changed in the database but code in the editor was not updated. Works in PostgreSQL, Microsoft SQL Server, Oracle, and Sybase ASE.\n* You changed the object source code, introspected the database, but source code has been already changed by someone else.\n* The database introspector was updated in the IDE and you need to download new object properties that were missing in the previous introspector version."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlSignatureInspection",
                "shortDescription": {
                  "text": "Function signature"
                },
                "fullDescription": {
                  "text": "Reports signature issues for built-in functions. The inspection will report a wrong number of arguments, invalid keywords, wrong data types, and other issues. Example (MySQL): 'CREATE TABLE foo (a INT, b INT, c INT)\n\nSELECT IFNULL() FROM foo; -- error\nSELECT IFNULL(a) FROM foo; -- error\nSELECT IFNULL(a, b) FROM foo; -- OK\nSELECT IFNULL(a, b, c) FROM foo; -- error' In MySQL, the 'IFNULL()' function accepts strictly two arguments. So, only the 'SELECT IFNULL(a, b) FROM foo;' query is correct.",
                  "markdown": "Reports signature issues for built-in functions.\n\nThe inspection will report a wrong number of arguments, invalid keywords, wrong data types, and other issues.\n\nExample (MySQL):\n\n    CREATE TABLE foo (a INT, b INT, c INT)\n\n    SELECT IFNULL() FROM foo; -- error\n    SELECT IFNULL(a) FROM foo; -- error\n    SELECT IFNULL(a, b) FROM foo; -- OK\n    SELECT IFNULL(a, b, c) FROM foo; -- error\n\nIn MySQL, the `IFNULL()` function accepts strictly two arguments. So, only the `SELECT IFNULL(a, b) FROM foo;`\nquery is correct."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlRedundantOrderingDirectionInspection",
                "shortDescription": {
                  "text": "Redundant ordering direction"
                },
                "fullDescription": {
                  "text": "Reports redundant ordering directions like ASC and DESC in ORDER BY clauses. Example (MySQL): 'CREATE TABLE foo(a INT, b INT, c INT);\nSELECT * FROM foo ORDER BY a ASC, b DESC, c ASC;' The ORDER BY keyword sorts the records in the ascending order by default. So, the 'ASC' keyword for 'a' and 'c' columns is redundant.",
                  "markdown": "Reports redundant ordering directions like ASC and DESC in ORDER BY clauses.\n\nExample (MySQL):\n\n    CREATE TABLE foo(a INT, b INT, c INT);\n    SELECT * FROM foo ORDER BY a ASC, b DESC, c ASC;\n\nThe ORDER BY keyword sorts the records in the ascending order by default. So, the `ASC` keyword for `a` and\n`c` columns is redundant."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OraOverloadInspection",
                "shortDescription": {
                  "text": "Overloading errors"
                },
                "fullDescription": {
                  "text": "Reports invalid cases of subprogram overloading in Oracle. Example (Oracle): 'DECLARE\n    SUBTYPE fff IS BINARY_INTEGER;\n    SUBTYPE ggg IS NATURAL;\n    PROCEDURE foo (a IN ggg) IS BEGIN NULL; END;\n    PROCEDURE foo (a IN fff) IS BEGIN NULL; END;\nBEGIN\n    NULL;\nEND;' You cannot overload subprograms which parameters differ only in subtypes. For example, you cannot overload procedures where one accepts a BINARY INTEGER parameter and the other accepts a NATURAL parameter. For more information about restrictions on procedure overloading, see Restrictions on Overloading at docs.oracle.com.",
                  "markdown": "Reports invalid cases of subprogram overloading in Oracle.\n\nExample (Oracle):\n\n    DECLARE\n        SUBTYPE fff IS BINARY_INTEGER;\n        SUBTYPE ggg IS NATURAL;\n        PROCEDURE foo (a IN ggg) IS BEGIN NULL; END;\n        PROCEDURE foo (a IN fff) IS BEGIN NULL; END;\n    BEGIN\n        NULL;\n    END;\n\nYou cannot overload subprograms which parameters differ only in subtypes. For example, you cannot overload procedures where one accepts a\nBINARY INTEGER parameter and the other accepts a NATURAL parameter. For more information about restrictions on procedure overloading,\nsee [Restrictions on Overloading at docs.oracle.com](https://docs.oracle.com/cd/B19306_01/appdev.102/b14261/subprograms.htm)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Oracle",
                      "index": 65,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MysqlSpaceAfterFunctionNameInspection",
                "shortDescription": {
                  "text": "Whitespace between the function name and the open parenthesis"
                },
                "fullDescription": {
                  "text": "Reports any whitespace in a function call between the function name and the open parenthesis, which is not supported by default. Example (MySQL): 'SELECT MAX (qty) FROM orders;'",
                  "markdown": "Reports any whitespace in a function call between the function name and the open parenthesis, which is not supported by default.\n\nExample (MySQL):\n\n    SELECT MAX (qty) FROM orders;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MySQL",
                      "index": 72,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlAutoIncrementDuplicateInspection",
                "shortDescription": {
                  "text": "Auto-increment duplicate"
                },
                "fullDescription": {
                  "text": "Reports tables that contain two columns with an automatic increment. In MySQL, Microsoft SQL Server, and Db2 dialects, a table can have only one field with a auto-increment option, and this field must be a key. Example (MySQL): 'CREATE TABLE my_table\n(\n    id INT AUTO_INCREMENT,\n    c2 INT AUTO_INCREMENT,\n);' The AUTO_INCREMENT constraint for 'c2' will be highlighted as 'c1' already has this constraint. To fix the warning, you can make 'id' a primary key and delete AUTO_INCREMENT for 'c2'. 'CREATE TABLE my_table\n(\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    c2 INT,\n);'",
                  "markdown": "Reports tables that contain two columns with an automatic increment. In MySQL, Microsoft SQL Server, and Db2 dialects, a table can have only one field with a auto-increment option, and this field must be a key.\n\nExample (MySQL):\n\n    CREATE TABLE my_table\n    (\n        id INT AUTO_INCREMENT,\n        c2 INT AUTO_INCREMENT,\n    );\n\nThe AUTO_INCREMENT constraint for `c2` will be highlighted as `c1` already has this constraint. To fix the warning,\nyou can make `id` a primary key and delete AUTO_INCREMENT for `c2`.\n\n    CREATE TABLE my_table\n    (\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        c2 INT,\n    );\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlStringLengthExceededInspection",
                "shortDescription": {
                  "text": "Implicit string truncation"
                },
                "fullDescription": {
                  "text": "Reports variables that exceed the defined length in characters. Example (Microsoft SQL Server): 'CREATE PROCEDURE test() AS\nBEGIN\nDECLARE myVarOk VARCHAR(5) = 'abcde';\nDECLARE myVarExceeded VARCHAR(5) = 'abcde12345';\n\nSET myVarOk = 'xyz';\nSET myVarExceeded = '123456789';\nEND;' The 'myVarExceeded' variable is defined as 'VARCHAR(5)' but both assigned values (''abcde12345'' and ''123456789'') exceed this limitation. You can truncate assigned values or increase the defined length. To increase the length, use the Increase type length quick-fix. After the quick-fix is applied: 'CREATE PROCEDURE test() AS\nBEGIN\nDECLARE myVarOk VARCHAR(5) = 'abcde';\nDECLARE myVarExceeded VARCHAR(10) = 'abcde12345';\n\nSET myVarOk = 'xyz';\nSET myVarExceeded = '123456789';\nEND;'",
                  "markdown": "Reports variables that exceed the defined length in characters.\n\nExample (Microsoft SQL Server):\n\n    CREATE PROCEDURE test() AS\n    BEGIN\n    DECLARE myVarOk VARCHAR(5) = 'abcde';\n    DECLARE myVarExceeded VARCHAR(5) = 'abcde12345';\n\n    SET myVarOk = 'xyz';\n    SET myVarExceeded = '123456789';\n    END;\n\nThe `myVarExceeded` variable is defined as `VARCHAR(5)` but both assigned values (`'abcde12345'` and\n`'123456789'`) exceed this limitation. You can truncate assigned values or increase the defined length.\nTo increase the length, use the **Increase type length** quick-fix.\n\nAfter the quick-fix is applied:\n\n    CREATE PROCEDURE test() AS\n    BEGIN\n    DECLARE myVarOk VARCHAR(5) = 'abcde';\n    DECLARE myVarExceeded VARCHAR(10) = 'abcde12345';\n\n    SET myVarOk = 'xyz';\n    SET myVarExceeded = '123456789';\n    END;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlCallNotationInspection",
                "shortDescription": {
                  "text": "Using of named and positional arguments"
                },
                "fullDescription": {
                  "text": "Reports calls in which positional arguments go after the named ones. Works in PostgreSQL, Oracle, and Db2. Example (In PostgreSQL): 'CREATE FUNCTION foo(a int, b int, c int) RETURNS int\n    LANGUAGE plpgsql AS\n$$\nBEGIN\n    RETURN a + b + c;\nEND\n$$;\nSELECT foo(a => 1, b => 2, c => 3);\n  -- `3` goes after the named argument\nSELECT foo(1, b => 2, 3);\n  -- `1` and `3` go after the named argument\nSELECT foo(b => 2, 1, 3);'",
                  "markdown": "Reports calls in which positional arguments go after the named ones. Works in PostgreSQL, Oracle, and Db2.\n\nExample (In PostgreSQL):\n\n    CREATE FUNCTION foo(a int, b int, c int) RETURNS int\n        LANGUAGE plpgsql AS\n    $$\n    BEGIN\n        RETURN a + b + c;\n    END\n    $$;\n    SELECT foo(a => 1, b => 2, c => 3);\n      -- `3` goes after the named argument\n    SELECT foo(1, b => 2, 3);\n      -- `1` and `3` go after the named argument\n    SELECT foo(b => 2, 1, 3);\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MysqlParsingInspection",
                "shortDescription": {
                  "text": "Unsupported syntax in pre-8.0 versions"
                },
                "fullDescription": {
                  "text": "Reports invalid usages of UNION in queries. The inspection works in MySQL versions that are earlier than 8.0. Example (MySQL): 'SELECT * FROM (SELECT 1 UNION (SELECT 1 UNION SELECT 2)) a;'",
                  "markdown": "Reports invalid usages of UNION in queries.\n\nThe inspection works in MySQL versions that are earlier than 8.0.\n\nExample (MySQL):\n\n\n    SELECT * FROM (SELECT 1 UNION (SELECT 1 UNION SELECT 2)) a;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MySQL",
                      "index": 72,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlShadowingAliasInspection",
                "shortDescription": {
                  "text": "Column is shadowed by alias"
                },
                "fullDescription": {
                  "text": "Reports SELECT aliases with names that match column names in the FROM clause. Example (MySQL): 'CREATE TABLE foo (a INT, b INT, c INT);\nSELECT a b, c FROM foo;' The 'a' column uses the 'b' alias but the 'b' name is also used by the column from the 'foo' table.",
                  "markdown": "Reports SELECT aliases with names that match column names in the FROM clause.\n\nExample (MySQL):\n\n    CREATE TABLE foo (a INT, b INT, c INT);\n    SELECT a b, c FROM foo;\n\nThe `a` column uses the `b` alias but the `b` name is also used by the column from the `foo`\ntable."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlUnreachableCodeInspection",
                "shortDescription": {
                  "text": "Unreachable code"
                },
                "fullDescription": {
                  "text": "Reports unreachable statements inside SQL routines. Example (Microsoft SQL Server): 'CREATE FUNCTION foo() RETURNS INT AS\nBEGIN\n    THROW;\n    RETURN 1;\nEND;' In Microsoft SQL Server, the 'THROW' statement raises an exception and transfers execution to the CATCH block of the TRY...CATCH construct. Therefore, the 'RETURN 1;' part will never be executed.",
                  "markdown": "Reports unreachable statements inside SQL routines.\n\nExample (Microsoft SQL Server):\n\n    CREATE FUNCTION foo() RETURNS INT AS\n    BEGIN\n        THROW;\n        RETURN 1;\n    END;\n\nIn Microsoft SQL Server, the `THROW` statement raises an exception and transfers execution to the CATCH block of the TRY...CATCH\nconstruct. Therefore, the `RETURN 1;` part will never be executed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlResolveInspection",
                "shortDescription": {
                  "text": "Unresolved reference"
                },
                "fullDescription": {
                  "text": "Reports unresolved SQL references. Example (MySQL): 'CREATE TABLE users(id INT, name VARCHAR(40));\nCREATE TABLE admins(id INT, col1 INT);\n\nSELECT users.id, admins.id FROM admins WHERE admins.id > 1;' The 'users.id' column is unresolved because the 'users' table is missing in the FROM clause.",
                  "markdown": "Reports unresolved SQL references.\n\nExample (MySQL):\n\n    CREATE TABLE users(id INT, name VARCHAR(40));\n    CREATE TABLE admins(id INT, col1 INT);\n\n    SELECT users.id, admins.id FROM admins WHERE admins.id > 1;\n\nThe `users.id` column is unresolved because the `users` table is missing in the FROM clause."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlRedundantLimitInspection",
                "shortDescription": {
                  "text": "Redundant row limiting in queries"
                },
                "fullDescription": {
                  "text": "Reports redundant row limiting clauses like FETCH and LIMIT in queries. Example (PostgreSQL): 'CREATE TABLE foo(a INT);\n\nSELECT * FROM foo WHERE EXISTS(SELECT * FROM foo LIMIT 2);\nSELECT * FROM foo WHERE EXISTS(SELECT * FROM foo FETCH FIRST 2 ROWS ONLY);' To fix the warning, you can add OFFSET to limiting clauses. If OFFSET is missing, then LIMIT is redundant because the usage of LIMIT does not influence the operation result of EXISTS. In case with OFFSET, we skip first 'N' rows and this will influence the output. 'SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo OFFSET 1 ROW LIMIT 2);\nSELECT * FROM foo WHERE EXISTS(SELECT * FROM foo OFFSET 1 ROW FETCH FIRST 2 ROWS ONLY);'",
                  "markdown": "Reports redundant row limiting clauses like FETCH and LIMIT in queries.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo(a INT);\n\n    SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo LIMIT 2);\n    SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo FETCH FIRST 2 ROWS ONLY);\n\nTo fix the warning, you can add OFFSET to limiting clauses. If OFFSET is missing, then LIMIT is redundant because\nthe usage of LIMIT does not influence the operation result of EXISTS. In case with OFFSET, we skip first `N` rows and this will\ninfluence the output.\n\n    SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo OFFSET 1 ROW LIMIT 2);\n    SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo OFFSET 1 ROW FETCH FIRST 2 ROWS ONLY);\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlDerivedTableAliasInspection",
                "shortDescription": {
                  "text": "Each derived table should have alias"
                },
                "fullDescription": {
                  "text": "Reports derived tables without aliases. Example (MySQL): 'CREATE TABLE table1 (id INT, name VARCHAR(20), cats FLOAT);\nCREATE TABLE table2 (id INT, age INTEGER);\n\nSELECT id AS ID, name, cats, age\nFROM (SELECT table1.id, name, cats, age\nFROM table1\nJOIN table2 ON table1.id = table2.id);' According to Derived Tables at dev.mysql.com, an alias is mandatory. You can add the alias by using the Introduce alias quick-fix. After the quick-fix is applied: 'SELECT id AS ID, name, cats, age\nFROM (SELECT table1.id, name, cats, age\nFROM table1\nJOIN table2 ON table1.id = table2.id);'",
                  "markdown": "Reports derived tables without aliases.\n\nExample (MySQL):\n\n    CREATE TABLE table1 (id INT, name VARCHAR(20), cats FLOAT);\n    CREATE TABLE table2 (id INT, age INTEGER);\n\n    SELECT id AS ID, name, cats, age\n    FROM (SELECT table1.id, name, cats, age\n    FROM table1\n    JOIN table2 ON table1.id = table2.id);\n\nAccording to [Derived Tables at dev.mysql.com](https://dev.mysql.com/doc/refman/8.0/en/derived-tables.html), an alias is\nmandatory. You can add the alias by using the **Introduce alias** quick-fix.\n\nAfter the quick-fix is applied:\n\n    SELECT id AS ID, name, cats, age\n    FROM (SELECT table1.id, name, cats, age\n    FROM table1\n    JOIN table2 ON table1.id = table2.id);\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlCaseVsCoalesceInspection",
                "shortDescription": {
                  "text": "Using CASE instead of COALESCE function and vice versa"
                },
                "fullDescription": {
                  "text": "Reports situations when CASE and COALESCE calls are interchangeable. This inspection has the following intention actions: Replace with 'COALESCE' call and the opposite one Replace with CASE expression. Example (MySQL): 'SELECT\n  -- this CASE may be replaced by COALESCE\n\tCASE\n\t\tWHEN C1 IS NOT NULL THEN C1\n\t\tELSE 0\n\t\tEND\nFROM dual;' In the example, the CASE statement can be replaced with 'SELECT COALESCE(C1, 0)' that produces the same output. If you prefer using CASE expressions, select the Prefer CASE expressions over COALESCE function option on the inspection page.",
                  "markdown": "Reports situations when CASE and COALESCE calls are interchangeable. This inspection has the following intention actions: **Replace\nwith 'COALESCE' call** and the opposite one **Replace with CASE expression** .\n\nExample (MySQL):\n\n    SELECT\n      -- this CASE may be replaced by COALESCE\n    \tCASE\n    \t\tWHEN C1 IS NOT NULL THEN C1\n    \t\tELSE 0\n    \t\tEND\n    FROM dual;\n\nIn the example, the CASE statement can be replaced with `SELECT COALESCE(C1, 0)` that produces the same output.\n\nIf you prefer using CASE expressions, select the **Prefer CASE expressions over COALESCE function** option on\nthe inspection page."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlRedundantCodeInCoalesceInspection",
                "shortDescription": {
                  "text": "Redundant code in COALESCE call"
                },
                "fullDescription": {
                  "text": "Reports all the arguments except for the first expression that does not evaluate to NULL in COALESCE functions. Example (MySQL): 'SELECT COALESCE(NULL, NULL, NULL, 42, NULL, 'string') as a;' The first NOT NULL argument is '42', all other arguments will be grayed out.",
                  "markdown": "Reports all the arguments except for the first expression that does not evaluate to NULL in COALESCE functions.\n\nExample (MySQL):\n\n    SELECT COALESCE(NULL, NULL, NULL, 42, NULL, 'string') as a;\n\nThe first NOT NULL argument is `42`, all other arguments will be grayed out."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlAggregatesInspection",
                "shortDescription": {
                  "text": "Aggregate-related problems"
                },
                "fullDescription": {
                  "text": "Reports invalid usages of SQL aggregate functions. The following situations are considered: Columns that are used in HAVING and ORDER BY clauses but are missed in GROUP BY clauses. 'CREATE TABLE foo(id INT PRIMARY KEY, a INT, b INT);\nSELECT a, MAX(b) FROM foo GROUP BY a HAVING b > 0;\nSELECT * FROM foo GROUP BY a ORDER BY b;' This rule does not apply when grouping is made by the primary key. 'SELECT * FROM foo GROUP BY id ORDER BY b;' Aggregate functions in a wrong context. Usually, you can use aggregate functions in the following contexts: a list of expressions in SELECT; in HAVING and ORDER BY sections; and other dialect-specific cases. The following queries will display an error. 'SELECT a FROM foo WHERE MAX(b) > 0;\nSELECT a FROM foo GROUP BY MAX(a);' Nested calls of aggregate functions. 'SELECT MAX(SUM(a)) FROM foo GROUP BY a;' This rule does not apply to analytic functions. The following query is valid and correct. 'SELECT MAX(SUM(a) OVER ()) FROM foo;' Usages of HAVING without aggregate functions. In this case, consider rewriting your code using the WHERE section. 'SELECT a, MAX(b) FROM foo GROUP BY a HAVING a > 0;'",
                  "markdown": "Reports invalid usages of SQL aggregate functions.\n\nThe following situations are considered:\n\n* Columns that are used in HAVING and ORDER BY clauses but are missed in GROUP BY clauses.\n\n      CREATE TABLE foo(id INT PRIMARY KEY, a INT, b INT);\n      SELECT a, MAX(b) FROM foo GROUP BY a HAVING b > 0;\n      SELECT * FROM foo GROUP BY a ORDER BY b;\n\n  This rule does not apply when grouping is made by the primary key.\n\n      SELECT * FROM foo GROUP BY id ORDER BY b;\n\n* Aggregate functions in a wrong context. Usually, you can use aggregate functions in the following contexts: a list of expressions in\n  SELECT; in HAVING and ORDER BY sections; and other dialect-specific cases. The following queries will display an error.\n\n      SELECT a FROM foo WHERE MAX(b) > 0;\n      SELECT a FROM foo GROUP BY MAX(a);\n\n* Nested calls of aggregate functions.\n\n      SELECT MAX(SUM(a)) FROM foo GROUP BY a;\n\n  This rule does not apply to analytic functions. The following query is valid and correct.\n\n      SELECT MAX(SUM(a) OVER ()) FROM foo;\n\n* Usages of HAVING without aggregate functions. In this case, consider rewriting your code using the WHERE section.\n\n      SELECT a, MAX(b) FROM foo GROUP BY a HAVING a > 0;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlMissingColumnAliasesInspection",
                "shortDescription": {
                  "text": "Missing column aliases"
                },
                "fullDescription": {
                  "text": "Reports queries without explicit aliases in output expressions (for example, in the SELECT statement). Example (PostgreSQL): 'CREATE TABLE foo(a INT, b INT);\n\nSELECT 1, a + 1 AS A2, MAX(b) AS M\nFROM foo;'",
                  "markdown": "Reports queries without explicit aliases in output expressions (for example, in the SELECT statement).\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo(a INT, b INT);\n\n    SELECT 1, a + 1 AS A2, MAX(b) AS M\n    FROM foo;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlAddNotNullColumnInspection",
                "shortDescription": {
                  "text": "Adding not null column without default value"
                },
                "fullDescription": {
                  "text": "Reports attempts to create NOT NULL columns without DEFAULT values. Example (Microsoft SQL Server): 'CREATE TABLE foo (a INT, b  INT)\n\nALTER TABLE foo ADD c INT NOT NULL;' By default, a column holds NULL values. In the example, we use the NOT NULL constraint that enforces a column not to accept NULL values. If we prohibit to use NULL values, we must set the DEFAULT value that SQL can use when we create a new record. 'ALTER TABLE foo ADD c INT NOT NULL DEFAULT 42;' You can quickly add the DEFAULT value by using the Add DEFAULT value quick-fix.",
                  "markdown": "Reports attempts to create NOT NULL columns without DEFAULT values.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE foo (a INT, b  INT)\n\n    ALTER TABLE foo ADD c INT NOT NULL;\n\nBy default, a column holds NULL values. In the example, we use the NOT NULL constraint that enforces a column not to accept NULL values.\nIf we prohibit to use NULL values, we must set the DEFAULT value that SQL can use when we create a new record.\n\n    ALTER TABLE foo ADD c INT NOT NULL DEFAULT 42;\n\nYou can quickly add the DEFAULT value by using the **Add DEFAULT value** quick-fix."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MongoJSExtResolveInspection",
                "shortDescription": {
                  "text": "Resolution problems"
                },
                "fullDescription": {
                  "text": "Reports unresolved references in MongoDB and JavaScript code.",
                  "markdown": "Reports unresolved references in MongoDB and JavaScript code."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MongoJS",
                      "index": 48,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlIllegalCursorStateInspection",
                "shortDescription": {
                  "text": "Illegal cursor state"
                },
                "fullDescription": {
                  "text": "Reports illegal cursor states inside SQL routines. A routine has CLOSE or FETCH statements but a cursor might be closed. A routine has the OPEN statement but a cursor might be opened. Example (Microsoft SQL Server): 'CREATE TABLE t(col INT);\n\nCREATE PROCEDURE foo() AS\nBEGIN\nDECLARE my_cursor CURSOR FOR SELECT * FROM t;\nDECLARE a INT;\nFETCH my_cursor INTO a;\nCLOSE my_cursor;\nEND;' According to CLOSE (Transact-SQL) at docs.microsoft.com, CLOSE must be issued on an open cursor, and CLOSE is not allowed on cursors that have only been declared or are already closed. So, we need to open the cursor to fix the warning. 'CREATE PROCEDURE foo() AS\nBEGIN\nDECLARE my_cursor CURSOR FOR SELECT * FROM t;\nDECLARE a INT;\nOPEN my_cursor;\nFETCH my_cursor INTO a;\nCLOSE my_cursor;\nEND;'",
                  "markdown": "Reports illegal cursor states inside SQL routines.\n\n* A routine has CLOSE or FETCH statements but a cursor might be closed.\n* A routine has the OPEN statement but a cursor might be opened.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE t(col INT);\n\n    CREATE PROCEDURE foo() AS\n    BEGIN\n    DECLARE my_cursor CURSOR FOR SELECT * FROM t;\n    DECLARE a INT;\n    FETCH my_cursor INTO a;\n    CLOSE my_cursor;\n    END;\n\nAccording to [CLOSE (Transact-SQL) at\ndocs.microsoft.com](https://docs.microsoft.com/en-us/sql/t-sql/language-elements/close-transact-sql), CLOSE must be issued on an open cursor, and CLOSE is not allowed on cursors that have only been declared or are\nalready closed. So, we need to open the cursor to fix the warning.\n\n    CREATE PROCEDURE foo() AS\n    BEGIN\n    DECLARE my_cursor CURSOR FOR SELECT * FROM t;\n    DECLARE a INT;\n    OPEN my_cursor;\n    FETCH my_cursor INTO a;\n    CLOSE my_cursor;\n    END;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlDuplicateColumnInspection",
                "shortDescription": {
                  "text": "Duplicating column name in SELECT"
                },
                "fullDescription": {
                  "text": "Reports duplicated names of column aliases in SELECT lists. Example (Sybase ASE): 'CREATE TABLE t1 (a TEXT, b INT, c INT);\n\nSELECT a AS x, b AS x FROM t1;' The 'x' alias name is used for 'a' and 'b' columns. These assignments are highlighted as errors because you cannot use identical alias names for columns in Sybase ASE.",
                  "markdown": "Reports duplicated names of column aliases in SELECT lists.\n\nExample (Sybase ASE):\n\n    CREATE TABLE t1 (a TEXT, b INT, c INT);\n\n    SELECT a AS x, b AS x FROM t1;\n\nThe `x` alias name is used for `a` and `b` columns. These assignments are highlighted as errors because\nyou cannot use identical alias names for columns in Sybase ASE."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlIdentifierInspection",
                "shortDescription": {
                  "text": "Identifier should be quoted"
                },
                "fullDescription": {
                  "text": "Reports situations when you use SQL reserved keywords as identifier names in your query. Example (Microsoft SQL Server): 'CREATE TABLE select (identity INT IDENTITY NOT NULL, order INT NOT NULL);' We use 'select', 'identity', and 'order' as table and column names. But they are also reserved keywords in Microsoft SQL Server. Therefore, in order to use them as object names in the query, you must quote these identifiers. To quote them, you can use the Quote identifier quick-fix. After the quick-fix is applied: 'CREATE TABLE [select] ([identity] INT IDENTITY NOT NULL, [order] INT NOT NULL);'",
                  "markdown": "Reports situations when you use SQL reserved keywords as identifier names in your query.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE select (identity INT IDENTITY NOT NULL, order INT NOT NULL);\n\nWe use `select`, `identity`, and `order` as table and column names.\nBut they are also reserved keywords in Microsoft SQL Server.\nTherefore, in order to use them as object names in the query, you must quote these identifiers. To quote them, you can use the\n**Quote identifier** quick-fix.\n\nAfter the quick-fix is applied:\n\n    CREATE TABLE [select] ([identity] INT IDENTITY NOT NULL, [order] INT NOT NULL);\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.css",
            "version": "231.5825.43",
            "rules": [
              {
                "id": "CssInvalidFunction",
                "shortDescription": {
                  "text": "Invalid function"
                },
                "fullDescription": {
                  "text": "Reports an unknown CSS function or an incorrect function parameter.",
                  "markdown": "Reports an unknown [CSS function](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Functions) or an incorrect function parameter."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 22,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssConvertColorToRgbInspection",
                "shortDescription": {
                  "text": "Color could be replaced with rgb()"
                },
                "fullDescription": {
                  "text": "Reports an 'hsl()' or 'hwb()' color function or a hexadecimal color notation. Suggests replacing such color value with an equivalent 'rgb()' or 'rgba()' color function. Example: '#0c0fff' After the quick-fix is applied: 'rgb(12, 15, 255)'.",
                  "markdown": "Reports an `hsl()` or `hwb()` color function or a hexadecimal color notation.\n\nSuggests replacing such color value with an equivalent `rgb()` or `rgba()` color function.\n\n**Example:**\n\n    #0c0fff\n\nAfter the quick-fix is applied:\n\n    rgb(12, 15, 255).\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 21,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssOverwrittenProperties",
                "shortDescription": {
                  "text": "Overwritten property"
                },
                "fullDescription": {
                  "text": "Reports a duplicated CSS property within a ruleset. Respects shorthand properties. Example: '.foo {\n  margin-bottom: 1px;\n  margin-bottom: 1px; /* duplicates margin-bottom */\n  margin: 0; /* overrides margin-bottom */\n}'",
                  "markdown": "Reports a duplicated CSS property within a ruleset. Respects shorthand properties.\n\n**Example:**\n\n\n    .foo {\n      margin-bottom: 1px;\n      margin-bottom: 1px; /* duplicates margin-bottom */\n      margin: 0; /* overrides margin-bottom */\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 21,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidHtmlTagReference",
                "shortDescription": {
                  "text": "Invalid type selector"
                },
                "fullDescription": {
                  "text": "Reports a CSS type selector that matches an unknown HTML element.",
                  "markdown": "Reports a CSS [type selector](https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors) that matches an unknown HTML element."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 22,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssMissingSemicolon",
                "shortDescription": {
                  "text": "Missing semicolon"
                },
                "fullDescription": {
                  "text": "Reports a missing semicolon at the end of a declaration.",
                  "markdown": "Reports a missing semicolon at the end of a declaration."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Code style issues",
                      "index": 59,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssUnknownTarget",
                "shortDescription": {
                  "text": "Unresolved file reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved file reference, for example, an incorrect path in an '@import' statement.",
                  "markdown": "Reports an unresolved file reference, for example, an incorrect path in an `@import` statement."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 22,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidCharsetRule",
                "shortDescription": {
                  "text": "Misplaced or incorrect @charset"
                },
                "fullDescription": {
                  "text": "Reports a misplaced '@charset' at-rule or an incorrect charset value.",
                  "markdown": "Reports a misplaced `@charset` at-rule or an incorrect charset value."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 22,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidPseudoSelector",
                "shortDescription": {
                  "text": "Invalid pseudo-selector"
                },
                "fullDescription": {
                  "text": "Reports an incorrect CSS pseudo-class pseudo-element.",
                  "markdown": "Reports an incorrect CSS [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes) [pseudo-element](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 22,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssBrowserCompatibilityForProperties",
                "shortDescription": {
                  "text": "Property is incompatible with selected browsers"
                },
                "fullDescription": {
                  "text": "Reports a CSS property that is not supported by the specified browsers. Based on the MDN Compatibility Data.",
                  "markdown": "Reports a CSS property that is not supported by the specified browsers. Based on the [MDN Compatibility Data](https://github.com/mdn/browser-compat-data)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 21,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidMediaFeature",
                "shortDescription": {
                  "text": "Invalid media feature"
                },
                "fullDescription": {
                  "text": "Reports an unknown CSS media feature or an incorrect media feature value.",
                  "markdown": "Reports an unknown [CSS media feature](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries) or an incorrect media feature value."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 22,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssUnresolvedCustomProperty",
                "shortDescription": {
                  "text": "Unresolved custom property"
                },
                "fullDescription": {
                  "text": "Reports an unresolved reference to a custom property among the arguments of the 'var()' function.",
                  "markdown": "Reports an unresolved reference to a [custom property](https://developer.mozilla.org/en-US/docs/Web/CSS/--*) among the arguments of the `var()` function."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 22,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssUnknownProperty",
                "shortDescription": {
                  "text": "Unknown property"
                },
                "fullDescription": {
                  "text": "Reports an unknown CSS property or a property used in a wrong context. Add the unknown property to the 'Custom CSS properties' list to skip validation.",
                  "markdown": "Reports an unknown CSS property or a property used in a wrong context.\n\nAdd the unknown property to the 'Custom CSS properties' list to skip validation."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 22,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssMissingComma",
                "shortDescription": {
                  "text": "Missing comma in selector list"
                },
                "fullDescription": {
                  "text": "Reports a multi-line selector. Most likely this means that several single-line selectors are actually intended but a comma is missing at the end of one or several lines. Example: 'input /* comma has probably been forgotten */\n.button {\n  margin: 1px;\n}'",
                  "markdown": "Reports a multi-line selector. Most likely this means that several single-line selectors are actually intended but a comma is missing at the end of one or several lines.\n\n**Example:**\n\n\n    input /* comma has probably been forgotten */\n    .button {\n      margin: 1px;\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Probable bugs",
                      "index": 74,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssUnusedSymbol",
                "shortDescription": {
                  "text": "Unused selector"
                },
                "fullDescription": {
                  "text": "Reports a CSS class or an element IDs that appears in selectors but is not used in HTML. Note that complete inspection results are available only when running it via Code | Inspect Code or Code | Analyze Code | Run Inspection by Name. Due to performance reasons, style sheet files are not inspected on the fly.",
                  "markdown": "Reports a CSS class or an element IDs that appears in selectors but is not used in HTML.\n\n\nNote that complete inspection results are available only when running it via **Code \\| Inspect Code** or\n**Code \\| Analyze Code \\| Run Inspection by Name**.\nDue to performance reasons, style sheet files are not inspected on the fly."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 21,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssNonIntegerLengthInPixels",
                "shortDescription": {
                  "text": "Non-integer length in pixels"
                },
                "fullDescription": {
                  "text": "Reports a non-integer length in pixels. Example: 'width: 3.14px'",
                  "markdown": "Reports a non-integer length in pixels.\n\n**Example:**\n\n     width: 3.14px\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Probable bugs",
                      "index": 74,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssConvertColorToHexInspection",
                "shortDescription": {
                  "text": "Color could be replaced with #-hex"
                },
                "fullDescription": {
                  "text": "Reports an 'rgb()', 'hsl()', or other color function. Suggests replacing a color function with an equivalent hexadecimal notation. Example: 'rgb(12, 15, 255)' After the quick-fix is applied: '#0c0fff'.",
                  "markdown": "Reports an `rgb()`, `hsl()`, or other color function.\n\nSuggests replacing a color function with an equivalent hexadecimal notation.\n\n**Example:**\n\n    rgb(12, 15, 255)\n\nAfter the quick-fix is applied:\n\n    #0c0fff.\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 21,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidAtRule",
                "shortDescription": {
                  "text": "Unknown at-rule"
                },
                "fullDescription": {
                  "text": "Reports an unknown CSS at-rule.",
                  "markdown": "Reports an unknown [CSS at-rule](https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 22,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssNegativeValue",
                "shortDescription": {
                  "text": "Negative property value"
                },
                "fullDescription": {
                  "text": "Reports a negative value of a CSS property that is not expected to be less than zero, for example, object width or height.",
                  "markdown": "Reports a negative value of a CSS property that is not expected to be less than zero, for example, object width or height."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 22,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssNoGenericFontName",
                "shortDescription": {
                  "text": "Missing generic font family name"
                },
                "fullDescription": {
                  "text": "Verifies that the 'font-family' property contains a generic font family name as a fallback alternative. Generic font family names are: 'serif', 'sans-serif', 'cursive', 'fantasy', and 'monospace'.",
                  "markdown": "Verifies that the [font-family](https://developer.mozilla.org/en-US/docs/Web/CSS/font-family) property contains a generic font family name as a fallback alternative.\n\n\nGeneric font family names are: `serif`, `sans-serif`, `cursive`, `fantasy`,\nand `monospace`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Probable bugs",
                      "index": 74,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssRedundantUnit",
                "shortDescription": {
                  "text": "Redundant measure unit"
                },
                "fullDescription": {
                  "text": "Reports a measure unit of a zero value where units are not required by the specification. Example: 'width: 0px'",
                  "markdown": "Reports a measure unit of a zero value where units are not required by the specification.\n\n**Example:**\n\n    width: 0px\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Code style issues",
                      "index": 59,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidPropertyValue",
                "shortDescription": {
                  "text": "Invalid property value"
                },
                "fullDescription": {
                  "text": "Reports an incorrect CSS property value.",
                  "markdown": "Reports an incorrect CSS property value."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 22,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssReplaceWithShorthandUnsafely",
                "shortDescription": {
                  "text": "Properties may probably be replaced with a shorthand"
                },
                "fullDescription": {
                  "text": "Reports a set of longhand CSS properties and suggests replacing an incomplete set of longhand CSS properties with a shorthand form, which is however not 100% equivalent in this case. For example, 2 properties: 'outline-color' and 'outline-style' may be replaced with a single 'outline'. Such replacement is not 100% equivalent because shorthands reset all omitted sub-values to their initial states. In this example, switching to the 'outline' shorthand means that 'outline-width' is also set to its initial value, which is 'medium'. This inspection doesn't handle full sets of longhand properties (when switching to shorthand is 100% safe). For such cases see the 'Properties may be safely replaced with a shorthand' inspection instead.",
                  "markdown": "Reports a set of longhand CSS properties and suggests replacing an incomplete set of longhand CSS properties with a shorthand form, which is however not 100% equivalent in this case.\n\n\nFor example, 2 properties: `outline-color` and `outline-style` may be replaced with a single `outline`.\nSuch replacement is not 100% equivalent because shorthands reset all omitted sub-values to their initial states.\nIn this example, switching to the `outline` shorthand means that `outline-width` is also set to its initial value,\nwhich is `medium`.\n\n\nThis inspection doesn't handle full sets of longhand properties (when switching to shorthand is 100% safe).\nFor such cases see the 'Properties may be safely replaced with a shorthand' inspection instead."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 21,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidImport",
                "shortDescription": {
                  "text": "Misplaced @import"
                },
                "fullDescription": {
                  "text": "Reports a misplaced '@import' statement. According to the specification, '@import' rules must precede all other types of rules, except '@charset' rules.",
                  "markdown": "Reports a misplaced `@import` statement.\n\n\nAccording to the [specification](https://developer.mozilla.org/en-US/docs/Web/CSS/@import),\n`@import` rules must precede all other types of rules, except `@charset` rules."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 22,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssUnresolvedClassInComposesRule",
                "shortDescription": {
                  "text": "Unresolved class in 'composes' rule"
                },
                "fullDescription": {
                  "text": "Reports a CSS class reference in the 'composes' rule that cannot be resolved to any valid target. Example: '.className {/* ... */}\n\n  .otherClassName {\n    composes: className;\n  }'",
                  "markdown": "Reports a CSS class reference in the ['composes'](https://github.com/css-modules/css-modules#composition) rule that cannot be resolved to any valid target.\n\n**Example:**\n\n\n      .className {/* ... */}\n\n      .otherClassName {\n        composes: className;\n      }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 22,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssReplaceWithShorthandSafely",
                "shortDescription": {
                  "text": "Properties may be safely replaced with a shorthand"
                },
                "fullDescription": {
                  "text": "Reports a set of longhand properties. Suggests replacing a complete set of longhand CSS properties with an equivalent shorthand form. For example, 4 properties: 'padding-top', 'padding-right', 'padding-bottom', and 'padding-left' can be safely replaced with a single 'padding' property. Note that this inspection doesn't show up if the set of longhand properties is incomplete (e.g. only 3 'padding-xxx' properties in a ruleset) because switching to a shorthand may change the result. For such cases consider the 'Properties may probably be replaced with a shorthand' inspection.",
                  "markdown": "Reports a set of longhand properties. Suggests replacing a complete set of longhand CSS properties with an equivalent shorthand form.\n\n\nFor example, 4 properties: `padding-top`, `padding-right`, `padding-bottom`, and\n`padding-left`\ncan be safely replaced with a single `padding` property.\n\n\nNote that this inspection doesn't show up if the set of longhand properties is incomplete\n(e.g. only 3 `padding-xxx` properties in a ruleset)\nbecause switching to a shorthand may change the result.\nFor such cases consider the 'Properties may probably be replaced with a shorthand'\ninspection."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 21,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.properties",
            "version": "231.5825.43",
            "rules": [
              {
                "id": "UseEllipsisInPropertyInspection",
                "shortDescription": {
                  "text": "Three dot characters instead of the ellipsis"
                },
                "fullDescription": {
                  "text": "Reports three \"dot\" characters which are used instead of the ellipsis character for UTF-8 properties files.",
                  "markdown": "Reports three \"dot\" characters which are used instead of the ellipsis character for UTF-8 properties files."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 26,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AlphaUnsortedPropertiesFile",
                "shortDescription": {
                  "text": "Properties file or resource bundle is alphabetically unsorted"
                },
                "fullDescription": {
                  "text": "Reports alphabetically unsorted resource bundles or .properties files.",
                  "markdown": "Reports alphabetically unsorted resource bundles or .properties files."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFO"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 26,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedProperty",
                "shortDescription": {
                  "text": "Unused property"
                },
                "fullDescription": {
                  "text": "Reports properties that are not referenced outside of the .properties file they are contained in.",
                  "markdown": "Reports properties that are not referenced outside of the .properties file they are contained in."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 26,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TrailingSpacesInProperty",
                "shortDescription": {
                  "text": "Trailing spaces in property"
                },
                "fullDescription": {
                  "text": "Reports properties whose keys or values end with a whitespace.",
                  "markdown": "Reports properties whose keys or values end with a whitespace."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 26,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WrongPropertyKeyValueDelimiter",
                "shortDescription": {
                  "text": "Property key/value delimiter doesn't match code style settings"
                },
                "fullDescription": {
                  "text": "Reports properties in which key or value delimiters do not match code style settings.",
                  "markdown": "Reports properties in which key or value delimiters do not match code style settings."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 26,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DuplicatePropertyInspection",
                "shortDescription": {
                  "text": "Duplicate property"
                },
                "fullDescription": {
                  "text": "Reports duplicate property keys with different values, duplicate keys, or duplicate property values. Example: 'property1=value;\nproperty2=value;' The Options list allows selecting the area in which the inspection should search for duplicates.",
                  "markdown": "Reports duplicate property keys with different values, duplicate keys, or duplicate property values.\n\nExample:\n\n\n    property1=value;\n    property2=value;\n\nThe **Options** list allows selecting the area in which the inspection should search for duplicates."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 26,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "XPathView",
            "version": "231.5825.43",
            "rules": [
              {
                "id": "XsltUnusedDeclaration",
                "shortDescription": {
                  "text": "Unused variable or parameter"
                },
                "fullDescription": {
                  "text": "Reports local variables and parameters that are never used.",
                  "markdown": "Reports local variables and parameters that are never used."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XSLT",
                      "index": 27,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantTypeConversion",
                "shortDescription": {
                  "text": "Redundant type conversion"
                },
                "fullDescription": {
                  "text": "Reports unnecessary type conversions. Type conversions are unnecessary when the argument type of a 'string()', 'number()', or 'boolean()' function is already the same as the function's return type or if the expected expression type is 'any'. Suggests removing the unnecessary conversion.",
                  "markdown": "Reports unnecessary type conversions. Type conversions are unnecessary when the argument type of a `string()`, `number()`, or `boolean()` function is already the same as the function's return type or if the expected expression type is `any`. Suggests removing the unnecessary conversion."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XPath",
                      "index": 45,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckNodeTest",
                "shortDescription": {
                  "text": "Unknown element or attribute name"
                },
                "fullDescription": {
                  "text": "Reports names of elements or attributes that are used in an XPath-expression but are missing in the associated XML files and are not defined in the referenced schemas. Such names are often the result of typos and would otherwise probably only be discovered at runtime. Example: '<xsl:template match=\"h:txtarea\" />' If the 'h' is bound to the XHTML namespace, the inspection will report this part of the 'match' expression as an unknown element name because the correct name of the element is \"textarea\".",
                  "markdown": "Reports names of elements or attributes that are used in an XPath-expression but are missing in the associated XML files and are not defined in the referenced schemas. Such names are often the result of typos and would otherwise probably only be discovered at runtime.\n\n**Example:**\n\n\n      <xsl:template match=\"h:txtarea\" />\n\n\nIf the `h` is bound to the XHTML namespace, the inspection will report this part of the `match` expression as an\nunknown element name because the correct name of the element is \"textarea\"."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XPath",
                      "index": 45,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XsltDeclarations",
                "shortDescription": {
                  "text": "Incorrect declaration"
                },
                "fullDescription": {
                  "text": "Reports duplicate declarations and illegal identifiers in XSLT variables, parameters, and named templates:",
                  "markdown": "Reports duplicate declarations and illegal identifiers in XSLT variables, parameters, and named templates:"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XSLT",
                      "index": 27,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HardwiredNamespacePrefix",
                "shortDescription": {
                  "text": "Hardcoded namespace prefix"
                },
                "fullDescription": {
                  "text": "Reports comparisons of the 'name()' function with a string that contains a colon (':'). Such usages usually indicate a hardcoded namespace prefix in the comparison. As a result, the code will break when run against XML that uses another prefix for the same namespace. Example: '<xsl:if test=\"name() = 'xlink:href'\">...<xsl:if>'",
                  "markdown": "Reports comparisons of the `name()` function with a string that contains a colon (`:`). Such usages usually indicate a hardcoded namespace prefix in the comparison. As a result, the code will break when run against XML that uses another prefix for the same namespace.\n\n**Example:**\n\n\n      <xsl:if test=\"name() = 'xlink:href'\">...<xsl:if>\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XPath",
                      "index": 45,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ImplicitTypeConversion",
                "shortDescription": {
                  "text": "Implicit type conversion"
                },
                "fullDescription": {
                  "text": "Reports implicit conversions between the predefined XPath-types 'STRING', 'NUMBER', 'BOOLEAN', and 'NODESET'. Helps to write XSLT scripts that are more expressive about types and prevents subtle bugs: Example: '<xsl:if test=\"foo\" />' is not the same as '<xsl:if test=\"string(foo)\" />' The first test checks whether the element \"foo\" exists ('count(foo) > 0)'; the latter one however is only true if the element actually contains any text ('string-length(foo) > 0'). Suggests making the type conversion more explicit. Use the following options to configure the inspection: Enable or disable implicit conversions between certain types Always report explicit conversions that do not result in the actually expected type, for example, '<xsl:if test=\"number(foo)\" />' Ignore conversion from 'NODESET' to 'BOOLEAN' by using the 'string()' function as a shortcut for writing 'string-length() > 0'.",
                  "markdown": "Reports implicit conversions between the predefined XPath-types `STRING`, `NUMBER`, `BOOLEAN`, and `NODESET`. Helps to write XSLT scripts that are more expressive about types and prevents subtle bugs:\n\n**Example:**\n\n\n      <xsl:if test=\"foo\" />\n\nis not the same as\n\n\n      <xsl:if test=\"string(foo)\" />\n\n\nThe first test checks whether the element \"foo\" exists (`count(foo) > 0)`; the latter one however is only\ntrue if the element actually contains any text (`string-length(foo) > 0`). Suggests making\nthe type conversion more explicit.\n\n\nUse the following options to configure the inspection:\n\n* Enable or disable implicit conversions between certain types\n* Always report explicit conversions that do not result in the actually expected type, for example, `<xsl:if test=\"number(foo)\" />`\n* Ignore conversion from `NODESET` to `BOOLEAN` by using the `string()` function as a shortcut for writing `string-length() > 0`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XPath",
                      "index": 45,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IndexZeroUsage",
                "shortDescription": {
                  "text": "XPath predicate with index 0"
                },
                "fullDescription": {
                  "text": "Reports usages of '0' in a predicate index or in a comparison with the function 'position()'. Such usage is almost always a bug because in XPath, the index starts at '1', not at '0'. Example: '//someelement[position() = 0]' or '//something[0]'",
                  "markdown": "Reports usages of `0` in a predicate index or in a comparison with the function `position()`. Such usage is almost always a bug because in XPath, the index starts at `1`, *not* at `0`.\n\n**Example:**\n\n\n      //someelement[position() = 0] or //something[0]\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XPath",
                      "index": 45,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XsltTemplateInvocation",
                "shortDescription": {
                  "text": "Incorrect template invocation"
                },
                "fullDescription": {
                  "text": "Reports missing arguments, passing arguments that are not declared, and passing arguments for parameters more than once in named XSLT template invocations. Parameters declared with a default value are optional and will not be reported as missing.",
                  "markdown": "Reports missing arguments, passing arguments that are not declared, and passing arguments for parameters more than once in named XSLT template invocations.\n\n\nParameters declared with a default value are optional and will not be reported as missing."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XSLT",
                      "index": 27,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XsltVariableShadowing",
                "shortDescription": {
                  "text": "Shadowed variable"
                },
                "fullDescription": {
                  "text": "Reports shadowed XSLT variables.",
                  "markdown": "Reports shadowed XSLT variables."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XSLT",
                      "index": 27,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.jetbrains.plugins.jade",
            "version": "231.5825.43",
            "rules": [
              {
                "id": "JadeTabsAndSpaces",
                "shortDescription": {
                  "text": "Tabs and spaces both used"
                },
                "fullDescription": {
                  "text": "Reports use of spaces and tabs for indentation in a Pug file.",
                  "markdown": "Reports use of spaces and tabs for indentation in a Pug file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Pug/Jade",
                      "index": 39,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "HtmlTools",
            "version": "231.5825.43",
            "rules": [
              {
                "id": "HtmlRequiredSummaryAttribute",
                "shortDescription": {
                  "text": "Missing required 'summary' attribute"
                },
                "fullDescription": {
                  "text": "Reports a missing 'summary' attribute in a 'table' tag. Suggests adding a'summary' attribute. Based on WCAG 2.0: H73.",
                  "markdown": "Reports a missing `summary` attribute in a `table` tag. Suggests adding a`summary` attribute. Based on WCAG 2.0: [H73](https://www.w3.org/TR/WCAG20-TECHS/H73.html)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 44,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlNonExistentInternetResource",
                "shortDescription": {
                  "text": "Unresolved web link"
                },
                "fullDescription": {
                  "text": "Reports an unresolved web link. Works by making network requests in the background.",
                  "markdown": "Reports an unresolved web link. Works by making network requests in the background."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlRequiredTitleAttribute",
                "shortDescription": {
                  "text": "Missing required 'title' attribute"
                },
                "fullDescription": {
                  "text": "Reports a missing title attribute 'frame', 'iframe', 'dl', and 'a' tags. Suggests adding a title attribute. Based on WCAG 2.0: H33, H40, and H64.",
                  "markdown": "Reports a missing title attribute `frame`, `iframe`, `dl`, and `a` tags. Suggests adding a title attribute. Based on WCAG 2.0: [H33](https://www.w3.org/TR/WCAG20-TECHS/H33.html), [H40](https://www.w3.org/TR/WCAG20-TECHS/H40.html), and [H64](https://www.w3.org/TR/WCAG20-TECHS/H64.html)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 44,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlRequiredAltAttribute",
                "shortDescription": {
                  "text": "Missing required 'alt' attribute"
                },
                "fullDescription": {
                  "text": "Reports a missing 'alt' attribute in a 'img' or 'applet' tag or in a 'area' element of an image map. Suggests adding a required attribute with a text alternative for the contents of the tag. Based on WCAG 2.0: H24, H35, H36, H37.",
                  "markdown": "Reports a missing `alt` attribute in a `img` or `applet` tag or in a `area` element of an image map. Suggests adding a required attribute with a text alternative for the contents of the tag. Based on WCAG 2.0: [H24](https://www.w3.org/TR/WCAG20-TECHS/H24.html), [H35](https://www.w3.org/TR/WCAG20-TECHS/H35.html), [H36](https://www.w3.org/TR/WCAG20-TECHS/H36.html), [H37](https://www.w3.org/TR/WCAG20-TECHS/H37.html)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 44,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlPresentationalElement",
                "shortDescription": {
                  "text": "Presentational tag"
                },
                "fullDescription": {
                  "text": "Reports a presentational HTML tag. Suggests replacing the presentational tag with a CSS or another tag.",
                  "markdown": "Reports a presentational HTML tag. Suggests replacing the presentational tag with a CSS or another tag."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlDeprecatedTag",
                "shortDescription": {
                  "text": "Obsolete tag"
                },
                "fullDescription": {
                  "text": "Reports an obsolete HTML5 tag. Suggests replacing the obsolete tag with a CSS or another tag.",
                  "markdown": "Reports an obsolete HTML5 tag. Suggests replacing the obsolete tag with a CSS or another tag."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlFormInputWithoutLabel",
                "shortDescription": {
                  "text": "Missing associated label"
                },
                "fullDescription": {
                  "text": "Reports a form element ('input', 'textarea', or 'select') without an associated label. Suggests creating a new label. Based on WCAG 2.0: H44.",
                  "markdown": "Reports a form element (`input`, `textarea`, or `select`) without an associated label. Suggests creating a new label. Based on WCAG 2.0: [H44](https://www.w3.org/TR/WCAG20-TECHS/H44.html).  "
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 44,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlRequiredTitleElement",
                "shortDescription": {
                  "text": "Missing required 'title' element"
                },
                "fullDescription": {
                  "text": "Reports a missing 'title' element inside a 'head' section. Suggests adding a 'title' element. The title should describe the document. Based on WCAG 2.0: H25.",
                  "markdown": "Reports a missing `title` element inside a `head` section. Suggests adding a `title` element. The title should describe the document. Based on WCAG 2.0: [H25](https://www.w3.org/TR/WCAG20-TECHS/H25.html)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 44,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlDeprecatedAttribute",
                "shortDescription": {
                  "text": "Obsolete attribute"
                },
                "fullDescription": {
                  "text": "Reports an obsolete HTML5 attribute.",
                  "markdown": "Reports an obsolete HTML5 attribute."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckImageSize",
                "shortDescription": {
                  "text": "Mismatched image size"
                },
                "fullDescription": {
                  "text": "Reports a 'width' and 'height' attribute value of a 'img' tag that is different from the actual width and height of the referenced image.",
                  "markdown": "Reports a `width` and `height` attribute value of a `img` tag that is different from the actual width and height of the referenced image."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlRequiredLangAttribute",
                "shortDescription": {
                  "text": "Missing required 'lang' attribute"
                },
                "fullDescription": {
                  "text": "Reports a missing 'lang' (or 'xml:lang') attribute in a 'html' tag. Suggests adding a required attribute to state the default language of the document. Based on WCAG 2.0: H57.",
                  "markdown": "Reports a missing `lang` (or `xml:lang`) attribute in a `html` tag. Suggests adding a required attribute to state the default language of the document. Based on WCAG 2.0: [H57](https://www.w3.org/TR/WCAG20-TECHS/H57.html)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 44,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.jetbrains.plugins.vue",
            "version": "231.5825.43",
            "rules": [
              {
                "id": "VueMissingComponentImportInspection",
                "shortDescription": {
                  "text": "Missing component import"
                },
                "fullDescription": {
                  "text": "Reports Vue components, which require to be imported in Vue templates. It provides a quick fix to add the missing import.",
                  "markdown": "Reports Vue components, which require to be imported in Vue templates. It provides a quick fix to add the missing import."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Vue",
                      "index": 47,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VueDeprecatedSymbol",
                "shortDescription": {
                  "text": "Deprecated symbol"
                },
                "fullDescription": {
                  "text": "Reports a deprecated Vue symbol.",
                  "markdown": "Reports a deprecated Vue symbol."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Vue",
                      "index": 47,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VueUnrecognizedDirective",
                "shortDescription": {
                  "text": "Unrecognized directive"
                },
                "fullDescription": {
                  "text": "Reports an unrecognized Vue directive.",
                  "markdown": "Reports an unrecognized Vue directive."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Vue",
                      "index": 47,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VueDuplicateTag",
                "shortDescription": {
                  "text": "Duplicate template/script tag"
                },
                "fullDescription": {
                  "text": "Reports multiple usages of the 'template' or 'script' tag in a Vue file. Vue Component specification indicates that each '*.vue' file can contain at most one 'template' or 'script' block at a time.",
                  "markdown": "Reports multiple usages of the `template` or `script` tag in a Vue file.\n\n[Vue Component specification](https://vue-loader.vuejs.org/spec.html) indicates that each `*.vue` file can contain at most one `template` or `script` block at a time."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Vue",
                      "index": 47,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VueDataFunction",
                "shortDescription": {
                  "text": "Data function"
                },
                "fullDescription": {
                  "text": "Reports a Vue component data property that is not a function. Suggests wrapping an object literal with a function. When defining a component, 'data' must be declared as a function that returns the initial data object, because the same definition will be used for creating numerous instances. If a plain object is still used for 'data', that very object will be shared by reference across all instances created! With a 'data' function, every time a new instance is created we can simply call it to return a fresh copy of the initial data.",
                  "markdown": "Reports a Vue component [data](https://vuejs.org/v2/api/#data) property that is not a function. Suggests wrapping an object literal with a function.\n\nWhen defining a component, `data` must be declared as a function that returns the initial data object, because the same definition will be used for creating numerous instances. If a plain object is still used for `data`, that very object will be shared by reference across all instances created! With a `data` function, every time a new instance is created we can simply call it to return a fresh copy of the initial data."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Vue",
                      "index": 47,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VueUnrecognizedSlot",
                "shortDescription": {
                  "text": "Unrecognized slot"
                },
                "fullDescription": {
                  "text": "Reports an unrecognized Vue slot.",
                  "markdown": "Reports an unrecognized Vue slot."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Vue",
                      "index": 47,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "intellij.webpack",
            "version": "231.5825.43",
            "rules": [
              {
                "id": "WebpackConfigHighlighting",
                "shortDescription": {
                  "text": "Webpack config compliance with JSON Schema"
                },
                "fullDescription": {
                  "text": "Validates options in webpack config files (which name should start with `webpack`, e.g. `webpack.config.js`) against webpack options schema. Disable this inspection to turn off validation and code completion inside the configuration object.",
                  "markdown": "Validates options in webpack config files (which name should start with \\`webpack\\`, e.g. \\`webpack.config.js\\`) against [webpack options schema](https://github.com/webpack/webpack/blob/master/schemas/WebpackOptions.json).   \n\nDisable this inspection to turn off validation and code completion inside the configuration object."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.jetbrains.sh",
            "version": "231.5825.43",
            "rules": [
              {
                "id": "ShellCheck",
                "shortDescription": {
                  "text": "ShellCheck"
                },
                "fullDescription": {
                  "text": "Reports shell script bugs detected by the integrated ShellCheck static analysis tool.",
                  "markdown": "Reports shell script bugs detected by the integrated [ShellCheck](https://github.com/koalaman/shellcheck) static analysis tool."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Shell script",
                      "index": 56,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.jetbrains.plugins.yaml",
            "version": "231.5825.43",
            "rules": [
              {
                "id": "YAMLUnresolvedAlias",
                "shortDescription": {
                  "text": "Unresolved alias"
                },
                "fullDescription": {
                  "text": "Reports unresolved aliases in YAML files. Example: 'some_key: *unknown_alias'",
                  "markdown": "Reports unresolved aliases in YAML files.\n\n**Example:**\n\n\n      some_key: *unknown_alias\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 61,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLDuplicatedKeys",
                "shortDescription": {
                  "text": "Duplicated YAML keys"
                },
                "fullDescription": {
                  "text": "Reports duplicated keys in YAML files. Example: 'same_key: some value\n  same_key: another value'",
                  "markdown": "Reports duplicated keys in YAML files.\n\n**Example:**\n\n\n      same_key: some value\n      same_key: another value\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 61,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLSchemaValidation",
                "shortDescription": {
                  "text": "Validation by JSON Schema"
                },
                "fullDescription": {
                  "text": "Reports inconsistencies between a YAML file and a JSON Schema if the schema is specified. Scheme example: '{\n    \"properties\": {\n      \"SomeNumberProperty\": {\n        \"type\": \"number\"\n      }\n    }\n  }' The following is an example with the corresponding warning: 'SomeNumberProperty: hello world'",
                  "markdown": "Reports inconsistencies between a YAML file and a JSON Schema if the schema is specified.\n\n**Scheme example:**\n\n\n      {\n        \"properties\": {\n          \"SomeNumberProperty\": {\n            \"type\": \"number\"\n          }\n        }\n      }\n\n**The following is an example with the corresponding warning:**\n\n\n      SomeNumberProperty: hello world\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 61,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLSchemaDeprecation",
                "shortDescription": {
                  "text": "Deprecated YAML key"
                },
                "fullDescription": {
                  "text": "Reports deprecated keys in YAML files. Deprecation is checked only if there exists a JSON schema associated with the corresponding YAML file. Note that the deprecation mechanism is not defined in the JSON Schema specification yet, and this inspection uses a non-standard 'deprecationMessage' extension. Scheme deprecation example: '{\n    \"properties\": {\n      \"SomeDeprecatedProperty\": {\n        \"deprecationMessage\": \"Baz\",\n        \"description\": \"Foo bar\"\n      }\n    }\n  }' The following is an example with the corresponding warning: 'SomeDeprecatedProperty: some value'",
                  "markdown": "Reports deprecated keys in YAML files.\n\nDeprecation is checked only if there exists a JSON schema associated with the corresponding YAML file.\n\nNote that the deprecation mechanism is not defined in the JSON Schema specification yet,\nand this inspection uses a non-standard `deprecationMessage` extension.\n\n**Scheme deprecation example:**\n\n\n      {\n        \"properties\": {\n          \"SomeDeprecatedProperty\": {\n            \"deprecationMessage\": \"Baz\",\n            \"description\": \"Foo bar\"\n          }\n        }\n      }\n\n**The following is an example with the corresponding warning:**\n\n\n      SomeDeprecatedProperty: some value\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 61,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLRecursiveAlias",
                "shortDescription": {
                  "text": "Recursive alias"
                },
                "fullDescription": {
                  "text": "Reports recursion in YAML aliases. Alias can't be recursive and be used inside the data referenced by a corresponding anchor. Example: 'some_key: &some_anchor\n    sub_key1: value1\n    sub_key2: *some_anchor'",
                  "markdown": "Reports recursion in YAML aliases.\n\nAlias can't be recursive and be used inside the data referenced by a corresponding anchor.\n\n**Example:**\n\n\n      some_key: &some_anchor\n        sub_key1: value1\n        sub_key2: *some_anchor\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 61,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLUnusedAnchor",
                "shortDescription": {
                  "text": "Unused anchor"
                },
                "fullDescription": {
                  "text": "Reports unused anchors. Example: 'some_key: &some_anchor\n    key1: value1'",
                  "markdown": "Reports unused anchors.\n\n**Example:**\n\n\n      some_key: &some_anchor\n        key1: value1\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 61,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.jetbrains.plugins.less",
            "version": "231.5825.43",
            "rules": [
              {
                "id": "LessResolvedByNameOnly",
                "shortDescription": {
                  "text": "Missing import"
                },
                "fullDescription": {
                  "text": "Reports a reference to a variable or mixin that is declared in another file, which is not explicitly imported in the current file. Example: '* {\n  margin: @var-in-other-file;\n}'",
                  "markdown": "Reports a reference to a variable or mixin that is declared in another file, which is not explicitly [imported](http://lesscss.org/features/#import-atrules-feature) in the current file.\n\n**Example:**\n\n\n    * {\n      margin: @var-in-other-file;\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Less",
                      "index": 64,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LessUnresolvedVariable",
                "shortDescription": {
                  "text": "Unresolved variable"
                },
                "fullDescription": {
                  "text": "Reports a reference to a Less variable that is not resolved. Example: '* {\n  margin: @unknown-var;\n}'",
                  "markdown": "Reports a reference to a [Less variable](http://lesscss.org/features/#variables-feature) that is not resolved.\n\n**Example:**\n\n\n    * {\n      margin: @unknown-var;\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Less",
                      "index": 64,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LessUnresolvedMixin",
                "shortDescription": {
                  "text": "Unresolved mixin"
                },
                "fullDescription": {
                  "text": "Reports a reference to a Less mixin that is not resolved. Example: '* {\n  .unknown-mixin();\n}'",
                  "markdown": "Reports a reference to a [Less mixin](http://lesscss.org/features/#mixins-feature) that is not resolved.\n\n**Example:**\n\n\n    * {\n      .unknown-mixin();\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Less",
                      "index": 64,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.jetbrains.rider-cpp",
            "version": "231.5825.43",
            "rules": [
              {
                "id": "UnrealJsonLocalInspectionTool",
                "shortDescription": {
                  "text": "Unreal Engine json inspection"
                },
                "fullDescription": {
                  "text": "RIDER-83134",
                  "markdown": "[RIDER-83134](https://youtrack.jetbrains.com/issue/RIDER-83134/)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unreal Engine",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "Karma",
            "version": "231.5825.43",
            "rules": [
              {
                "id": "KarmaConfigFile",
                "shortDescription": {
                  "text": "Invalid Karma configuration file"
                },
                "fullDescription": {
                  "text": "Reports a potential error in a file path ('basePath', 'files') for a Karma configuration file, for example, 'karma.conf.js'.",
                  "markdown": "Reports a potential error in a file path ('basePath', 'files') for a Karma configuration file, for example, `karma.conf.js`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Unit testing",
                      "index": 70,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.jetbrains.plugins.ini4idea",
            "version": "231.5825.43",
            "rules": [
              {
                "id": "DuplicateSectionInFile",
                "shortDescription": {
                  "text": "Duplicate section in file"
                },
                "fullDescription": {
                  "text": "Reports duplicate sections in the 'ini' file.",
                  "markdown": "Reports duplicate sections in the `ini` file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Ini files",
                      "index": 76,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DuplicateKeyInSection",
                "shortDescription": {
                  "text": "Duplicate directive in section"
                },
                "fullDescription": {
                  "text": "Reports duplicate properties in the 'ini' file section.",
                  "markdown": "Reports duplicate properties in the `ini` file section."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Ini files",
                      "index": 76,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "tslint",
            "version": "231.5825.43",
            "rules": [
              {
                "id": "TsLint",
                "shortDescription": {
                  "text": "TSLint"
                },
                "fullDescription": {
                  "text": "Reports a discrepancy detected by the TSLint linter. The highlighting is based on the rule severity specified in the TSLint configuration file for each individual rule. Clear the 'Use rule severity from the configuration file' checkbox to use the severity configured in this inspection for all TSLint rules.",
                  "markdown": "Reports a discrepancy detected by the [TSLint](https://github.com/palantir/tslint) linter.   \n\nThe highlighting is based on the rule severity specified in the [TSLint configuration file](https://palantir.github.io/tslint/usage/configuration/) for each individual rule.   \n\nClear the 'Use rule severity from the configuration file' checkbox to use the severity configured in this inspection for all TSLint rules."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code quality tools",
                      "index": 38,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.intellij.intelliLang",
            "version": "231.5825.43",
            "rules": [
              {
                "id": "InjectedReferences",
                "shortDescription": {
                  "text": "Injected references"
                },
                "fullDescription": {
                  "text": "Reports unresolved references injected by Language Injections. Example:     @Language(\"file-reference\")\n    String fileName = \"/home/user/nonexistent.file\"; // highlighted if file doesn't exist",
                  "markdown": "Reports unresolved references injected by [Language Injections](https://www.jetbrains.com/help/idea/using-language-injections.html).\n\nExample:\n\n```\n    @Language(\"file-reference\")\n    String fileName = \"/home/user/nonexistent.file\"; // highlighted if file doesn't exist\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "W3Validators",
            "version": "231.5825.43",
            "rules": [
              {
                "id": "W3CssValidation",
                "shortDescription": {
                  "text": "W3C CSS validator"
                },
                "fullDescription": {
                  "text": "Reports a discrepancy detected by the W3C CSS Validator.",
                  "markdown": "Reports a discrepancy detected by the [W3C CSS Validator](https://jigsaw.w3.org/css-validator/)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Code quality tools",
                      "index": 68,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.intellij.qodana",
            "version": "231.5825.43",
            "rules": [
              {
                "id": "QodanaServiceMessage",
                "shortDescription": {
                  "text": "Qodana service message"
                },
                "fullDescription": {
                  "text": "Reports the Qodana service messages such as suspending a particular inspection due to a large number of reported problems.",
                  "markdown": "Reports the Qodana service messages such as suspending a particular inspection due to a large number of reported problems."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.plugins.watcher",
            "version": "231.5825.43",
            "rules": [
              {
                "id": "TaskProblemsInspection",
                "shortDescription": {
                  "text": "File watcher problems"
                },
                "fullDescription": {
                  "text": "Reports an error detected by the output filters from a File Watcher. A File Watcher tracks changes in files and executes the configured command when a change is detected.",
                  "markdown": "Reports an error detected by the output filters from a File Watcher.\n\n\nA File Watcher tracks changes in files and executes the configured command when a change is detected."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "File Watchers",
                      "index": 79,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.dmarcotte.handlebars",
            "version": "231.5825.43",
            "rules": [
              {
                "id": "HbEmptyBlock",
                "shortDescription": {
                  "text": "Missing block helper argument"
                },
                "fullDescription": {
                  "text": "Reports an 'if', 'each', or 'with' block helper without an argument.",
                  "markdown": "Reports an `if`, `each`, or `with` block helper without an argument."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Handlebars/Mustache",
                      "index": 82,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          }
        ]
      },
      "invocations": [
        {
          "exitCode": 0,
          "toolExecutionNotifications": [],
          "executionSuccessful": true
        }
      ],
      "language": "en-US",
      "versionControlProvenance": [
        {
          "repositoryUri": "https://github.com/alexmg/Timingz.git",
          "revisionId": "c40f3ec0e094614b167712c18f818c43571b911d",
          "branch": "develop",
          "properties": {
            "repoUrl": "https://github.com/alexmg/Timingz.git",
            "lastAuthorName": "Alex Meyer-Gleaves",
            "vcsType": "Git",
            "lastAuthorEmail": "alex.meyergleaves@gmail.com"
          }
        }
      ],
      "results": [
        {
          "ruleId": "JSUnresolvedVariable",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Unresolved variable or type module",
            "markdown": "Unresolved variable or type module"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "commitlint.config.js",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 6,
                  "snippet": {
                    "text": "module"
                  },
                  "sourceLanguage": "JavaScript"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 72,
                  "snippet": {
                    "text": "module.exports = {\r\n    extends: [\"@commitlint/config-conventional\"],\r\n\r"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "rider.module",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "f3a7ed60bb480306d2add438fef3a09ae1837c09094f3bd0055f28e6658b2124"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "JavaScript"
            ]
          }
        }
      ],
      "automationDetails": {
        "id": "Timingz/qodana/2023-03-05",
        "guid": "f9981352-8d61-4e8f-a946-5d8e1433aee3",
        "properties": {
          "jobUrl": ""
        }
      },
      "newlineSequences": [
        "\r\n",
        "\n"
      ],
      "properties": {
        "configProfile": "absent",
        "deviceId": "200820300000000-4300-a10d-dd18-befad8724d30"
      }
    }
  ]
}